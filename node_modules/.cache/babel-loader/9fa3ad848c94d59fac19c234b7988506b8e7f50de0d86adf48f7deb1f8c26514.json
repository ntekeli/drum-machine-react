{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport var Follower = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Follower, _ToneAudioNode);\n  var _super = _createSuper(Follower);\n  function Follower() {\n    var _this;\n    _classCallCheck(this, Follower);\n    _this = _super.call(this, optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    _this.name = \"Follower\";\n    var options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    _this._abs = _this.input = new Abs({\n      context: _this.context\n    });\n    _this._lowpass = _this.output = new OnePoleFilter({\n      context: _this.context,\n      frequency: 1 / _this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n    _this._abs.connect(_this._lowpass);\n    _this._smoothing = options.smoothing;\n    return _this;\n  }\n  _createClass(Follower, [{\n    key: \"smoothing\",\n    get:\n    /**\n     * The amount of time it takes a value change to arrive at the updated value.\n     */\n    function get() {\n      return this._smoothing;\n    },\n    set: function set(smoothing) {\n      this._smoothing = smoothing;\n      this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Follower.prototype), \"dispose\", this).call(this);\n      this._abs.dispose();\n      this._lowpass.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        smoothing: 0.05\n      });\n    }\n  }]);\n  return Follower;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AACA,SAAgCA,aAAa,QAA8B,kCAAkC;AAC7G,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,GAAG,QAAQ,kBAAkB;AAMtC;;;;;;;;;;AAUA,WAAaC,QAAS;EAAA;EAAA;EA2BrB;IAAA;IAAA;IACC,0BAAMH,oBAAoB,CAACG,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IA1BpE,UAAI,GAAW,UAAU;IA2BjC,IAAMC,OAAO,GAAGN,oBAAoB,CAACG,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAEtF,MAAKE,IAAI,GAAG,MAAKC,KAAK,GAAG,IAAIN,GAAG,CAAC;MAAEO,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC3D,MAAKC,QAAQ,GAAG,MAAKC,MAAM,GAAG,IAAIV,aAAa,CAAC;MAC/CQ,OAAO,EAAE,MAAKA,OAAO;MACrBG,SAAS,EAAE,CAAC,GAAG,MAAKC,SAAS,CAACP,OAAO,CAACQ,SAAS,CAAC;MAChDC,IAAI,EAAE;KACN,CAAC;IACF,MAAKR,IAAI,CAACS,OAAO,CAAC,MAAKN,QAAQ,CAAC;IAChC,MAAKO,UAAU,GAAGX,OAAO,CAACQ,SAAS;IAAC;EACrC;EAAC;IAAA;IAAA;IAQD;;;IAGA,eAAa;MACZ,OAAO,IAAI,CAACG,UAAU;IACvB,CAAC;IAAA,KACD,aAAcH,SAAS;MACtB,IAAI,CAACG,UAAU,GAAGH,SAAS;MAC3B,IAAI,CAACJ,QAAQ,CAACE,SAAS,GAAG,CAAC,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,SAAS,CAAC;IAC7D;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACP,IAAI,CAACW,OAAO,EAAE;MACnB,IAAI,CAACR,QAAQ,CAACQ,OAAO,EAAE;MACvB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAtBD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACrB,aAAa,CAACK,WAAW,EAAE,EAAE;QACjDU,SAAS,EAAE;OACX,CAAC;IACH;EAAC;EAAA;AAAA,EA7C4Bf,aAA8B","names":["ToneAudioNode","optionsFromArguments","OnePoleFilter","Abs","Follower","getDefaults","arguments","options","_abs","input","context","_lowpass","output","frequency","toSeconds","smoothing","type","connect","_smoothing","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\analysis\\Follower.ts"],"sourcesContent":["import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}