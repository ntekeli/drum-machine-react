{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport var Volume = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Volume, _ToneAudioNode);\n  var _super = _createSuper(Volume);\n  function Volume() {\n    var _this;\n    _classCallCheck(this, Volume);\n    _this = _super.call(this, optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    _this.name = \"Volume\";\n    var options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    _this.volume = _this.output.gain;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    _this._unmutedVolume = options.volume;\n    // set the mute initially\n    _this.mute = options.mute;\n    return _this;\n  }\n  _createClass(Volume, [{\n    key: \"mute\",\n    get:\n    /**\n     * Mute the output.\n     * @example\n     * const vol = new Tone.Volume(-12).toDestination();\n     * const osc = new Tone.Oscillator().connect(vol).start();\n     * // mute the output\n     * vol.mute = true;\n     */\n    function get() {\n      return this.volume.value === -Infinity;\n    },\n    set: function set(mute) {\n      if (!this.mute && mute) {\n        this._unmutedVolume = this.volume.value;\n        // maybe it should ramp here?\n        this.volume.value = -Infinity;\n      } else if (this.mute && !mute) {\n        this.volume.value = this._unmutedVolume;\n      }\n    }\n    /**\n     * clean up\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Volume.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this.volume.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mute: false,\n        volume: 0\n      });\n    }\n  }]);\n  return Volume;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AAOpD;;;;;;;;AAQA,WAAaC,MAAO;EAAA;EAAA;EAiCnB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,MAAM,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;IAjC/D,UAAI,GAAW,QAAQ;IAkC/B,IAAMC,OAAO,GAAGL,oBAAoB,CAACE,MAAM,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;IAEjF,MAAKE,KAAK,GAAG,MAAKC,MAAM,GAAG,IAAIT,IAAI,CAAC;MACnCU,OAAO,EAAE,MAAKA,OAAO;MACrBC,IAAI,EAAEJ,OAAO,CAACK,MAAM;MACpBC,KAAK,EAAE;KACP,CAAC;IACF,MAAKD,MAAM,GAAG,MAAKH,MAAM,CAACE,IAAI;IAC9BR,QAAQ,gCAAO,QAAQ,CAAC;IACxB,MAAKW,cAAc,GAAGP,OAAO,CAACK,MAAM;IAEpC;IACA,MAAKG,IAAI,GAAGR,OAAO,CAACQ,IAAI;IAAC;EAC1B;EAAC;IAAA;IAAA;IASD;;;;;;;;IAQA,eAAQ;MACP,OAAO,IAAI,CAACH,MAAM,CAACI,KAAK,KAAK,CAACC,QAAQ;IACvC,CAAC;IAAA,KACD,aAASF,IAAa;MACrB,IAAI,CAAC,IAAI,CAACA,IAAI,IAAIA,IAAI,EAAE;QACvB,IAAI,CAACD,cAAc,GAAG,IAAI,CAACF,MAAM,CAACI,KAAK;QACvC;QACA,IAAI,CAACJ,MAAM,CAACI,KAAK,GAAG,CAACC,QAAQ;OAC7B,MAAM,IAAI,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,EAAE;QAC9B,IAAI,CAACH,MAAM,CAACI,KAAK,GAAG,IAAI,CAACF,cAAc;;IAEzC;IAEA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACN,KAAK,CAACU,OAAO,EAAE;MACpB,IAAI,CAACN,MAAM,CAACM,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OApCD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACnB,aAAa,CAACI,WAAW,EAAE,EAAE;QACjDU,IAAI,EAAE,KAAK;QACXH,MAAM,EAAE;OACR,CAAC;IACH;EAAC;EAAA;AAAA,EAxD0BX,aAA4B","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","Volume","getDefaults","arguments","options","input","output","context","gain","volume","units","_unmutedVolume","mute","value","Infinity","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Volume.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * const vol = new Tone.Volume().toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const vol = new Tone.Volume(-12).toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}