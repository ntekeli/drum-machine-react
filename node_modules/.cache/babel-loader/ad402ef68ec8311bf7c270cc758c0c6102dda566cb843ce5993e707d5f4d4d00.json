{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport var TimeBaseClass = /*#__PURE__*/function (_Tone) {\n  _inherits(TimeBaseClass, _Tone);\n  var _super = _createSuper(TimeBaseClass);\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  function TimeBaseClass(context, value, units) {\n    var _this;\n    _classCallCheck(this, TimeBaseClass);\n    _this = _super.call(this);\n    /**\n     * The default units\n     */\n    _this.defaultUnits = \"s\";\n    _this._val = value;\n    _this._units = units;\n    _this.context = context;\n    _this._expressions = _this._getExpressions();\n    return _this;\n  }\n  /**\n   * All of the time encoding expressions\n   */\n  _createClass(TimeBaseClass, [{\n    key: \"_getExpressions\",\n    value: function _getExpressions() {\n      var _this2 = this;\n      return {\n        hz: {\n          method: function method(value) {\n            return _this2._frequencyToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n        },\n        i: {\n          method: function method(value) {\n            return _this2._ticksToUnits(parseInt(value, 10));\n          },\n          regexp: /^(\\d+)i$/i\n        },\n        m: {\n          method: function method(value) {\n            return _this2._beatsToUnits(parseInt(value, 10) * _this2._getTimeSignature());\n          },\n          regexp: /^(\\d+)m$/i\n        },\n        n: {\n          method: function method(value, dot) {\n            var numericValue = parseInt(value, 10);\n            var scalar = dot === \".\" ? 1.5 : 1;\n            if (numericValue === 1) {\n              return _this2._beatsToUnits(_this2._getTimeSignature()) * scalar;\n            } else {\n              return _this2._beatsToUnits(4 / numericValue) * scalar;\n            }\n          },\n          regexp: /^(\\d+)n(\\.?)$/i\n        },\n        number: {\n          method: function method(value) {\n            return _this2._expressions[_this2.defaultUnits].method.call(_this2, value);\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)$/\n        },\n        s: {\n          method: function method(value) {\n            return _this2._secondsToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)s$/\n        },\n        samples: {\n          method: function method(value) {\n            return parseInt(value, 10) / _this2.context.sampleRate;\n          },\n          regexp: /^(\\d+)samples$/\n        },\n        t: {\n          method: function method(value) {\n            var numericValue = parseInt(value, 10);\n            return _this2._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n          },\n          regexp: /^(\\d+)t$/i\n        },\n        tr: {\n          method: function method(m, q, s) {\n            var total = 0;\n            if (m && m !== \"0\") {\n              total += _this2._beatsToUnits(_this2._getTimeSignature() * parseFloat(m));\n            }\n            if (q && q !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(q));\n            }\n            if (s && s !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(s) / 4);\n            }\n            return total;\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n        }\n      };\n    }\n    //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (this._val instanceof TimeBaseClass) {\n        this.fromType(this._val);\n      }\n      if (isUndef(this._val)) {\n        return this._noArg();\n      } else if (isString(this._val) && isUndef(this._units)) {\n        for (var units in this._expressions) {\n          if (this._expressions[units].regexp.test(this._val.trim())) {\n            this._units = units;\n            break;\n          }\n        }\n      } else if (isObject(this._val)) {\n        var total = 0;\n        for (var typeName in this._val) {\n          if (isDefined(this._val[typeName])) {\n            var quantity = this._val[typeName];\n            // @ts-ignore\n            var time = new this.constructor(this.context, typeName).valueOf() * quantity;\n            total += time;\n          }\n        }\n        return total;\n      }\n      if (isDefined(this._units)) {\n        var expr = this._expressions[this._units];\n        var matching = this._val.toString().trim().match(expr.regexp);\n        if (matching) {\n          return expr.method.apply(this, matching.slice(1));\n        } else {\n          return expr.method.call(this, this._val);\n        }\n      } else if (isString(this._val)) {\n        return parseFloat(this._val);\n      } else {\n        return this._val;\n      }\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Returns the value of a frequency in the current units\n     */\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return 1 / freq;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 60 / this._getBpm() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return seconds;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ticks * this._beatsToUnits(1) / this._getPPQ();\n    }\n    /**\n     * With no arguments, return 'now'\n     */\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return this._now();\n    }\n    //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the bpm\n     */\n  }, {\n    key: \"_getBpm\",\n    value: function _getBpm() {\n      return this.context.transport.bpm.value;\n    }\n    /**\n     * Return the timeSignature\n     */\n  }, {\n    key: \"_getTimeSignature\",\n    value: function _getTimeSignature() {\n      return this.context.transport.timeSignature;\n    }\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n  }, {\n    key: \"_getPPQ\",\n    value: function _getPPQ() {\n      return this.context.transport.PPQ;\n    }\n    //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n  }, {\n    key: \"fromType\",\n    value: function fromType(type) {\n      this._units = undefined;\n      switch (this.defaultUnits) {\n        case \"s\":\n          this._val = type.toSeconds();\n          break;\n        case \"i\":\n          this._val = type.toTicks();\n          break;\n        case \"hz\":\n          this._val = type.toFrequency();\n          break;\n        case \"midi\":\n          this._val = type.toMidi();\n          break;\n      }\n      return this;\n    }\n    /**\n     * Return the value in hertz\n     */\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency() {\n      return 1 / this.toSeconds();\n    }\n    /**\n     * Return the time in samples\n     */\n  }, {\n    key: \"toSamples\",\n    value: function toSamples() {\n      return this.toSeconds() * this.context.sampleRate;\n    }\n    /**\n     * Return the time in milliseconds.\n     */\n  }, {\n    key: \"toMilliseconds\",\n    value: function toMilliseconds() {\n      return this.toSeconds() * 1000;\n    }\n  }]);\n  return TimeBaseClass;\n}(Tone);","map":{"version":3,"mappings":"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","names":["Tone","isDefined","isObject","isString","isUndef","TimeBaseClass","context","value","units","_val","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","i","_ticksToUnits","parseInt","m","_beatsToUnits","_getTimeSignature","n","dot","numericValue","scalar","number","defaultUnits","call","s","_secondsToUnits","samples","sampleRate","t","Math","floor","tr","q","total","fromType","_noArg","test","trim","typeName","quantity","time","constructor","valueOf","expr","matching","toString","match","apply","slice","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","type","undefined","toSeconds","toTicks","toFrequency","toMidi"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\type\\TimeBase.ts"],"sourcesContent":["import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}