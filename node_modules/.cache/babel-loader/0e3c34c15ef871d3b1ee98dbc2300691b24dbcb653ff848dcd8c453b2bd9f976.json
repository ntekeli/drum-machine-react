{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConstantSourceNodeRendererFactory = function createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConstantSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n    var createConstantSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeConstantSourceNode, nativeConstantSourceNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeConstantSourceNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n              nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n              if (!nativeConstantSourceNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeConstantSourceNode.channelCount,\n                  channelCountMode: nativeConstantSourceNode.channelCountMode,\n                  channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                  offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                  nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                  nativeConstantSourceNode.stop(stop);\n                }\n              }\n              renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n              if (nativeConstantSourceNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            case 11:\n              _context.next = 13;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            case 13:\n              return _context.abrupt(\"return\", nativeConstantSourceNode);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createConstantSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,uCAAuC,GAA8C,SAArFA,uCAAuC,CAChDC,iBAAiB,EACjBC,8BAA8B,EAC9BC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,iCAAiC,GAAG,IAAIC,OAAO,EAAyD;IAE9G,IAAIC,KAAK,GAAkB,IAAI;IAC/B,IAAIC,IAAI,GAAkB,IAAI;IAE9B,IAAMC,wBAAwB;MAAA,sEAAG,iBAAOC,KAA6B,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cACpHC,wBAAwB,GAAGV,kBAAkB,CAA+BQ,KAAK,CAAC;cAEtF;;;;cAIMG,wCAAwC,GAAGf,gBAAgB,CAACc,wBAAwB,EAAED,yBAAyB,CAAC;cAEtH,IAAI,CAACE,wCAAwC,EAAE;gBACrCC,OAAO,GAAG;kBACZC,YAAY,EAAEH,wBAAwB,CAACG,YAAY;kBACnDC,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAAgB;kBAC3DC,qBAAqB,EAAEL,wBAAwB,CAACK,qBAAqB;kBACrEC,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAACC;iBAC3C;gBAEDP,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAyB,EAAEG,OAAO,CAAC;gBAE7F,IAAIP,KAAK,KAAK,IAAI,EAAE;kBAChBK,wBAAwB,CAACL,KAAK,CAACA,KAAK,CAAC;;gBAGzC,IAAIC,IAAI,KAAK,IAAI,EAAE;kBACfI,wBAAwB,CAACJ,IAAI,CAACA,IAAI,CAAC;;;cAI3CH,iCAAiC,CAACe,GAAG,CAACT,yBAAyB,EAAEC,wBAAwB,CAAC;cAAC,IAEtFC,wCAAwC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACnCV,gBAAgB,CAACQ,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAE1FlB,iBAAiB,CAACW,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;YAAA;cAAA;cAAA,OAG/Fd,uBAAuB,CAACM,KAAK,EAAEC,yBAAyB,EAAEC,wBAAwB,CAAC;YAAA;cAAA,iCAElFA,wBAAwB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClC;MAAA,gBAvCKH,wBAAwB;QAAA;MAAA;IAAA,GAuC7B;IAED,OAAO;MACH,IAAIF,KAAK,CAACY,KAAa;QACnBZ,KAAK,GAAGY,KAAK;MACjB,CAAC;MACD,IAAIX,IAAI,CAACW,KAAa;QAClBX,IAAI,GAAGW,KAAK;MAChB,CAAC;MACDE,MAAM,kBACFX,KAA6B,EAC7BC,yBAAqD;QAErD,IAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAG,CAACZ,yBAAyB,CAAC;QAEzG,IAAIW,gCAAgC,KAAKE,SAAS,EAAE;UAChD,OAAOC,OAAO,CAACC,OAAO,CAACJ,gCAAgC,CAAC;;QAG5D,OAAOb,wBAAwB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACrE;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConstantSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConstantSourceNodeRendererFactoryFactory, TNativeConstantSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConstantSourceNodeRendererFactory: TConstantSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConstantSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConstantSourceNode>();\n\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createConstantSourceNode = async (proxy: IConstantSourceNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode<T, TNativeConstantSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            return nativeConstantSourceNode;\n        };\n\n        return {\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IConstantSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeConstantSourceNode> {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}