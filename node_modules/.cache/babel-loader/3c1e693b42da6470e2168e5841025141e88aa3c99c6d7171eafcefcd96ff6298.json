{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam) {\n      var audioParamConnections;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            audioParamConnections = getAudioParamConnections(audioParam);\n            _context2.next = 3;\n            return Promise.all(Array.from(audioParamConnections.activeInputs).map( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n                var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                      audioNodeRenderer = getAudioNodeRenderer(source);\n                      _context.next = 4;\n                      return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                    case 4:\n                      renderedNativeAudioNode = _context.sent;\n                      if (!isPartOfACycle(source)) {\n                        renderedNativeAudioNode.connect(nativeAudioParam, output);\n                      }\n                    case 6:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x4) {\n                return _ref3.apply(this, arguments);\n              };\n            }()));\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;AAGA,OAAO,IAAMA,8BAA8B,GAAqC,SAAnEA,8BAA8B,CACvCC,oBAAoB,EACpBC,wBAAwB,EACxBC,cAAc,EACd;EACA;IAAA,sEAAO,kBACHC,UAAuB,EACvBC,yBAAqD,EACrDC,gBAAmC;MAAA;MAAA;QAAA;UAAA;YAE7BC,qBAAqB,GAAGL,wBAAwB,CAAIE,UAAU,CAAC;YAAA;YAAA,OAE/DI,OAAO,CAACC,GAAG,CACbC,KAAK,CAACC,IAAI,CAACJ,qBAAqB,CAACK,YAAY,CAAC,CAACC,GAAG;cAAA,uEAAC;gBAAA;gBAAA;kBAAA;oBAAA;sBAAA,kCAAQC,MAAM,aAAEC,MAAM;sBAC/DC,iBAAiB,GAAGf,oBAAoB,CAACa,MAAM,CAAC;sBAAA;sBAAA,OAChBE,iBAAiB,CAACC,MAAM,CAACH,MAAM,EAAET,yBAAyB,CAAC;oBAAA;sBAA3Fa,uBAAuB;sBAE7B,IAAI,CAACf,cAAc,CAACW,MAAM,CAAC,EAAE;wBACzBI,uBAAuB,CAACC,OAAO,CAACb,gBAAgB,EAAES,MAAM,CAAC;;oBAC5D;oBAAA;sBAAA;kBAAA;gBAAA;cAAA,CACJ;cAAA;gBAAA;cAAA;YAAA,IAAC,CACL;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACJ;IAAA;MAAA;IAAA;EAAA;AACL,CAAC","names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","render","renderedNativeAudioNode","connect"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\render-inputs-of-audio-param.ts"],"sourcesContent":["import { IAudioParam, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TNativeAudioParam, TNativeOfflineAudioContext, TRenderInputsOfAudioParamFactory } from '../types';\n\nexport const createRenderInputsOfAudioParam: TRenderInputsOfAudioParamFactory = (\n    getAudioNodeRenderer,\n    getAudioParamConnections,\n    isPartOfACycle\n) => {\n    return async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioParam: IAudioParam,\n        nativeOfflineAudioContext: TNativeOfflineAudioContext,\n        nativeAudioParam: TNativeAudioParam\n    ): Promise<void> => {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        await Promise.all(\n            Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n                const audioNodeRenderer = getAudioNodeRenderer(source);\n                const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                if (!isPartOfACycle(source)) {\n                    renderedNativeAudioNode.connect(nativeAudioParam, output);\n                }\n            })\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}