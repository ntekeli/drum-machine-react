{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport var Subtract = /*#__PURE__*/function (_Signal) {\n  _inherits(Subtract, _Signal);\n  var _super = _createSuper(Subtract);\n  function Subtract() {\n    var _this;\n    _classCallCheck(this, Subtract);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n    _this.override = false;\n    _this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n    _this._neg = new Negate({\n      context: _this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n    _this.subtrahend = _this._param;\n    connectSeries(_this._constantSource, _this._neg, _this._sum);\n    return _this;\n  }\n  _createClass(Subtract, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Subtract.prototype), \"dispose\", this).call(this);\n      this._neg.dispose();\n      this._sum.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n  return Subtract;\n}(Signal);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,IAAI,QAAQ,sBAAsB;AAE3C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,MAAM,QAAuB,kBAAkB;AAExD;;;;;;;;;;;;;;;;;;;AAmBA,WAAaC,QAAS;EAAA;EAAA;EA6BrB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACL,oBAAoB,CAACG,QAAQ,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IA5BxF,cAAQ,GAAG,KAAK;IAEP,UAAI,GAAW,UAAU;IAElC;;;IAGQ,UAAI,GAAS,IAAIR,IAAI,CAAC;MAAES,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC/C,WAAK,GAAS,MAAKC,IAAI;IACvB,YAAM,GAAS,MAAKA,IAAI;IAEjC;;;IAGQ,UAAI,GAAW,IAAIR,MAAM,CAAC;MAAEO,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAE5D;;;IAGA,gBAAU,GAAoB,MAAKE,MAAM;IAWxCZ,aAAa,CAAC,MAAKa,eAAe,EAAE,MAAKC,IAAI,EAAE,MAAKH,IAAI,CAAC;IAAC;EAC3D;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACG,IAAI,CAACC,OAAO,EAAE;MACnB,IAAI,CAACJ,IAAI,CAACI,OAAO,EAAE;MACnB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAXD,uBAAkB;MACjB,OAAOT,MAAM,CAACC,MAAM,CAACH,MAAM,CAACI,WAAW,EAAE,EAAE;QAC1CQ,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EAvC4BZ,MAAM","names":["connectSeries","Gain","optionsFromArguments","Negate","Signal","Subtract","Object","assign","getDefaults","arguments","context","_sum","_param","_constantSource","_neg","dispose","value"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\Subtract.ts"],"sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}