{"ast":null,"code":"import _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoFeedbackEffect } from \"./StereoFeedbackEffect\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport var StereoXFeedbackEffect = /*#__PURE__*/function (_StereoFeedbackEffect) {\n  _inherits(StereoXFeedbackEffect, _StereoFeedbackEffect);\n  var _super = _createSuper(StereoXFeedbackEffect);\n  function StereoXFeedbackEffect(options) {\n    var _this;\n    _classCallCheck(this, StereoXFeedbackEffect);\n    _this = _super.call(this, options);\n    // the left output connected to the right input\n    _this._feedbackL.disconnect();\n    _this._feedbackL.connect(_this._feedbackMerge, 0, 1);\n    // the left output connected to the right input\n    _this._feedbackR.disconnect();\n    _this._feedbackR.connect(_this._feedbackMerge, 0, 0);\n    readOnly(_assertThisInitialized(_this), [\"feedback\"]);\n    return _this;\n  }\n  return _createClass(StereoXFeedbackEffect);\n}(StereoFeedbackEffect);","map":{"version":3,"mappings":";;;;;AAAA,SAASA,oBAAoB,QAAqC,wBAAwB;AAE1F,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD;;;;;;;;;;;;;AAaA,WAAaC,qBAAoE;EAAA;EAAA;EAEhF,+BAAYC,OAAqC;IAAA;IAAA;IAEhD,0BAAMA,OAAO;IACb;IACA,MAAKC,UAAU,CAACC,UAAU,EAAE;IAC5B,MAAKD,UAAU,CAACE,OAAO,CAAC,MAAKC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElD;IACA,MAAKC,UAAU,CAACH,UAAU,EAAE;IAC5B,MAAKG,UAAU,CAACF,OAAO,CAAC,MAAKC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;IAElDN,QAAQ,gCAAO,CAAC,UAAU,CAAC,CAAC;IAAC;EAC9B;EAAC;AAAA,EAduFD,oBAA6B","names":["StereoFeedbackEffect","readOnly","StereoXFeedbackEffect","options","_feedbackL","disconnect","connect","_feedbackMerge","_feedbackR"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\StereoXFeedbackEffect.ts"],"sourcesContent":["import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}