{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\nexport var MidSideCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideCompressor, _ToneAudioNode);\n  var _super = _createSuper(MidSideCompressor);\n  function MidSideCompressor() {\n    var _this;\n    _classCallCheck(this, MidSideCompressor);\n    _this = _super.call(this, Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    _this.name = \"MidSideCompressor\";\n    var options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    _this._midSideSplit = _this.input = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSideMerge = _this.output = new MidSideMerge({\n      context: _this.context\n    });\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.side = new Compressor(Object.assign(options.side, {\n      context: _this.context\n    }));\n    _this._midSideSplit.mid.chain(_this.mid, _this._midSideMerge.mid);\n    _this._midSideSplit.side.chain(_this.side, _this._midSideMerge.side);\n    readOnly(_assertThisInitialized(_this), [\"mid\", \"side\"]);\n    return _this;\n  }\n  _createClass(MidSideCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideCompressor.prototype), \"dispose\", this).call(this);\n      this.mid.dispose();\n      this.side.dispose();\n      this._midSideSplit.dispose();\n      this._midSideMerge.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        side: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        }\n      });\n    }\n  }]);\n  return MidSideCompressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAAgCA,aAAa,QAA8B,kCAAkC;AAC7G,SAASC,UAAU,QAA2B,cAAc;AAC5D,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,QAAQ,QAA0B,2BAA2B;AAOtE;;;;;AAKA,WAAaC,iBAAkB;EAAA;EAAA;EA4B9B;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACN,oBAAoB,CAACI,iBAAiB,CAACG,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IA3B7E,UAAI,GAAW,mBAAmB;IA4B1C,IAAMC,OAAO,GAAGT,oBAAoB,CAACI,iBAAiB,CAACG,WAAW,EAAE,EAAEC,SAAS,CAAC;IAEhF,MAAKE,aAAa,GAAG,MAAKC,KAAK,GAAG,IAAIV,YAAY,CAAC;MAAEW,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC7E,MAAKC,aAAa,GAAG,MAAKC,MAAM,GAAG,IAAIZ,YAAY,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC9E,MAAKG,GAAG,GAAG,IAAIhB,UAAU,CAACM,MAAM,CAACC,MAAM,CAACG,OAAO,CAACM,GAAG,EAAE;MAAEH,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC,CAAC;IAChF,MAAKI,IAAI,GAAG,IAAIjB,UAAU,CAACM,MAAM,CAACC,MAAM,CAACG,OAAO,CAACO,IAAI,EAAE;MAAEJ,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC,CAAC;IAElF,MAAKF,aAAa,CAACK,GAAG,CAACE,KAAK,CAAC,MAAKF,GAAG,EAAE,MAAKF,aAAa,CAACE,GAAG,CAAC;IAC9D,MAAKL,aAAa,CAACM,IAAI,CAACC,KAAK,CAAC,MAAKD,IAAI,EAAE,MAAKH,aAAa,CAACG,IAAI,CAAC;IACjEb,QAAQ,gCAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAAC;EACjC;EAAC;IAAA;IAAA,OAqBD,mBAAO;MACN;MACA,IAAI,CAACY,GAAG,CAACG,OAAO,EAAE;MAClB,IAAI,CAACF,IAAI,CAACE,OAAO,EAAE;MACnB,IAAI,CAACR,aAAa,CAACQ,OAAO,EAAE;MAC5B,IAAI,CAACL,aAAa,CAACK,OAAO,EAAE;MAC5B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OA1BD,uBAAkB;MACjB,OAAOb,MAAM,CAACC,MAAM,CAACR,aAAa,CAACS,WAAW,EAAE,EAAE;QACjDQ,GAAG,EAAE;UACJI,KAAK,EAAE,CAAC;UACRC,SAAS,EAAE,CAAC,EAAE;UACdC,OAAO,EAAE,IAAI;UACbC,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE;SACN;QACDP,IAAI,EAAE;UACLG,KAAK,EAAE,CAAC;UACRC,SAAS,EAAE,CAAC,EAAE;UACdC,OAAO,EAAE,IAAI;UACbC,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE;;OAEP,CAAC;IACH;EAAC;EAAA;AAAA,EA3DqCzB,aAAuC","names":["ToneAudioNode","Compressor","optionsFromArguments","MidSideSplit","MidSideMerge","readOnly","MidSideCompressor","Object","assign","getDefaults","arguments","options","_midSideSplit","input","context","_midSideMerge","output","mid","side","chain","dispose","ratio","threshold","release","attack","knee"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\dynamics\\MidSideCompressor.ts"],"sourcesContent":["import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\n\nexport interface MidSideCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tside: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\nexport class MidSideCompressor extends ToneAudioNode<MidSideCompressorOptions> {\n\n\treadonly name: string = \"MidSideCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Split the incoming signal into Mid/Side\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\n\t/**\n\t * Merge the compressed signal back into a single stream\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\n\t/**\n\t * The compression applied to the mid signal\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compression applied to the side signal\n\t */\n\treadonly side: Compressor;\n\n\tconstructor(options?: RecursivePartial<MidSideCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n\n\t\tthis._midSideSplit = this.input = new MidSideSplit({ context: this.context });\n\t\tthis._midSideMerge = this.output = new MidSideMerge({ context: this.context });\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.side = new Compressor(Object.assign(options.side, { context: this.context }));\n\n\t\tthis._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\tthis._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\treadOnly(this, [\"mid\", \"side\"]);\n\t}\n\n\tstatic getDefaults(): MidSideCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\tside: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}