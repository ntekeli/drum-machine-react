{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createMediaElementAudioSourceNodeConstructor = function createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(MediaElementAudioSourceNode, _audioNodeConstructor);\n    var _super = _createSuper(MediaElementAudioSourceNode);\n    function MediaElementAudioSourceNode(context, options) {\n      var _this;\n      _classCallCheck(this, MediaElementAudioSourceNode);\n      var nativeContext = getNativeContext(context);\n      var nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n      // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw TypeError();\n      }\n      _this = _super.call(this, context, true, nativeMediaElementAudioSourceNode, null);\n      _this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n      return _this;\n    }\n    _createClass(MediaElementAudioSourceNode, [{\n      key: \"mediaElement\",\n      get: function get() {\n        return this._nativeMediaElementAudioSourceNode.mediaElement;\n      }\n    }]);\n    return MediaElementAudioSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;AAGA,OAAO,IAAMA,4CAA4C,GAAmD,SAA/FA,4CAA4C,CACrDC,oBAAoB,EACpBC,uCAAuC,EACvCC,gBAAgB,EAChBC,2BAA2B,EAC3B;EACA;IAAA;IAAA;IAII,qCAAYC,OAAU,EAAEC,OAAwC;MAAA;MAAA;MAC5D,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAO,CAAC;MAC/C,IAAMG,iCAAiC,GAAGN,uCAAuC,CAACK,aAAa,EAAED,OAAO,CAAC;MAEzG;MACA,IAAIF,2BAA2B,CAACG,aAAa,CAAC,EAAE;QAC5C,MAAME,SAAS,EAAE;;MAGrB,0BAAMJ,OAAO,EAAE,IAAI,EAAEG,iCAAiC,EAAyB,IAAI;MAEnF,MAAKE,kCAAkC,GAAGF,iCAAiC;MAAC;IAChF;IAAC;MAAA;MAAA,KAED,eAAgB;QACZ,OAAO,IAAI,CAACE,kCAAkC,CAACC,YAAY;MAC/D;IAAC;IAAA;EAAA,EApB4FV,oBAAuB;AAsB5H,CAAC","names":["createMediaElementAudioSourceNodeConstructor","audioNodeConstructor","createNativeMediaElementAudioSourceNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","nativeMediaElementAudioSourceNode","TypeError","_nativeMediaElementAudioSourceNode","mediaElement"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\media-element-audio-source-node-constructor.ts"],"sourcesContent":["import { IAudioContext, IMediaElementAudioSourceNode, IMediaElementAudioSourceOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaElementAudioSourceNodeConstructorFactory, TNativeMediaElementAudioSourceNode } from '../types';\n\nexport const createMediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaElementAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaElementAudioSourceNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaElementAudioSourceNode<T> {\n        private _nativeMediaElementAudioSourceNode: TNativeMediaElementAudioSourceNode;\n\n        constructor(context: T, options: IMediaElementAudioSourceOptions) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n\n            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw TypeError();\n            }\n\n            super(context, true, nativeMediaElementAudioSourceNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n\n        get mediaElement(): HTMLMediaElement {\n            return this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}