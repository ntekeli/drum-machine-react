{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var createAudioDestinationNodeRenderer = function createAudioDestinationNodeRenderer(renderInputsOfAudioNode) {\n  var renderedNativeAudioDestinationNodes = new WeakMap();\n  var createAudioDestinationNode = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n      var nativeAudioDestinationNode;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n            renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n            _context.next = 4;\n            return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n          case 4:\n            return _context.abrupt(\"return\", nativeAudioDestinationNode);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function createAudioDestinationNode(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    render: function render(proxy, nativeOfflineAudioContext) {\n      var renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n  };\n};","map":{"version":3,"mappings":";;AAQA,OAAO,IAAMA,kCAAkC,GAAyC,SAA3EA,kCAAkC,CAG3CC,uBAAyD,EACzD;EACA,IAAMC,mCAAmC,GAAG,IAAIC,OAAO,EAA2D;EAElH,IAAMC,0BAA0B;IAAA,sEAAG,iBAAOC,KAA+B,EAAEC,yBAAqD;MAAA;MAAA;QAAA;UAAA;YACtHC,0BAA0B,GAAGD,yBAAyB,CAACE,WAAW;YAExEN,mCAAmC,CAACO,GAAG,CAACH,yBAAyB,EAAEC,0BAA0B,CAAC;YAAC;YAAA,OAEzFN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,0BAA0B,CAAC;UAAA;YAAA,iCAEpFA,0BAA0B;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACpC;IAAA,gBARKH,0BAA0B;MAAA;IAAA;EAAA,GAQ/B;EAED,OAAO;IACHM,MAAM,kBACFL,KAA+B,EAC/BC,yBAAqD;MAErD,IAAMK,kCAAkC,GAAGT,mCAAmC,CAACU,GAAG,CAACN,yBAAyB,CAAC;MAE7G,IAAIK,kCAAkC,KAAKE,SAAS,EAAE;QAClD,OAAOC,OAAO,CAACC,OAAO,CAACJ,kCAAkC,CAAC;;MAG9D,OAAOP,0BAA0B,CAACC,KAAK,EAAEC,yBAAyB,CAAC;IACvE;GACH;AACL,CAAC","names":["createAudioDestinationNodeRenderer","renderInputsOfAudioNode","renderedNativeAudioDestinationNodes","WeakMap","createAudioDestinationNode","proxy","nativeOfflineAudioContext","nativeAudioDestinationNode","destination","set","render","renderedNativeAudioDestinationNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\audio-destination-node-renderer-factory.ts"],"sourcesContent":["import { IAudioDestinationNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TAudioDestinationNodeRendererFactory,\n    TNativeAudioDestinationNode,\n    TNativeOfflineAudioContext,\n    TRenderInputsOfAudioNodeFunction\n} from '../types';\n\nexport const createAudioDestinationNodeRenderer: TAudioDestinationNodeRendererFactory = <\n    T extends IMinimalOfflineAudioContext | IOfflineAudioContext\n>(\n    renderInputsOfAudioNode: TRenderInputsOfAudioNodeFunction\n) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioDestinationNode>();\n\n    const createAudioDestinationNode = async (proxy: IAudioDestinationNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        return nativeAudioDestinationNode;\n    };\n\n    return {\n        render(\n            proxy: IAudioDestinationNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ): Promise<TNativeAudioDestinationNode> {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}