{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\nexport var createChannelSplitterNodeConstructor = function createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ChannelSplitterNode, _audioNodeConstructor);\n    var _super = _createSuper(ChannelSplitterNode);\n    function ChannelSplitterNode(context, options) {\n      _classCallCheck(this, ChannelSplitterNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = sanitizeChannelSplitterOptions(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options));\n      var nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      var channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      return _super.call(this, context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n    return _createClass(ChannelSplitterNode);\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,UAAU;EAC5BC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE;CACX;AAEV,OAAO,IAAMC,oCAAoC,GAA2C,SAA/EA,oCAAoC,CAC7CC,oBAAoB,EACpBC,iCAAiC,EACjCC,+BAA+B,EAC/BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,8BAA8B,EAC9B;EACA;IAAA;IAAA;IACI,6BAAYC,OAAU,EAAEC,OAA0C;MAAA;MAC9D,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,aAAa,GAAGJ,8BAA8B,iCAAMX,eAAe,GAAKa,OAAO,EAAG;MACxF,IAAMG,yBAAyB,GAAGR,+BAA+B,CAACM,aAAa,EAAEC,aAAa,CAAC;MAC/F,IAAME,2BAA2B,GAC5BP,2BAA2B,CAACI,aAAa,CAAC,GAAGP,iCAAiC,EAAE,GAAG,IACvF;MAAC,yBAEIK,OAAO,EAAE,KAAK,EAAEI,yBAAyB,EAAEC,2BAA2B;IAChF;IAAC;EAAA,EAVwDX,oBAAuB;AAYxF,CAAC","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","createChannelSplitterNodeConstructor","audioNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","getNativeContext","isNativeOfflineAudioContext","sanitizeChannelSplitterOptions","context","options","nativeContext","mergedOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\channel-splitter-node-constructor.ts"],"sourcesContent":["import { IChannelSplitterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TChannelSplitterNodeConstructorFactory, TContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n} as const;\n\nexport const createChannelSplitterNodeConstructor: TChannelSplitterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n) => {\n    return class ChannelSplitterNode<T extends TContext> extends audioNodeConstructor<T> {\n        constructor(context: T, options?: Partial<IChannelSplitterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null)\n            );\n\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}