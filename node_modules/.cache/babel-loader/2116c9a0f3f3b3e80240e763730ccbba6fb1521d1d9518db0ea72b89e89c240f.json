{"ast":null,"code":"export var createGetAudioNodeRenderer = function createGetAudioNodeRenderer(getAudioNodeConnections) {\n  return function (audioNode) {\n    var audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,0BAA0B,GAAiC,SAA3DA,0BAA0B,CAAkCC,uBAAuB,EAAI;EAChG,OAAO,UACHC,SAAwB,EACc;IACtC,IAAMC,oBAAoB,GAAGF,uBAAuB,CAACC,SAAS,CAAC;IAE/D,IAAIC,oBAAoB,CAACC,QAAQ,KAAK,IAAI,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;;IAGtF,OAA6CF,oBAAoB,CAACC,QAAQ;EAC9E,CAAC;AACL,CAAC","names":["createGetAudioNodeRenderer","getAudioNodeConnections","audioNode","audioNodeConnections","renderer","Error"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\get-audio-node-renderer.ts"],"sourcesContent":["import { IAudioNode, IAudioNodeRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGetAudioNodeRendererFactory } from '../types';\n\nexport const createGetAudioNodeRenderer: TGetAudioNodeRendererFactory = (getAudioNodeConnections) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioNode: IAudioNode<T>\n    ): IAudioNodeRenderer<T, IAudioNode<T>> => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n        if (audioNodeConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n\n        return <IAudioNodeRenderer<T, IAudioNode<T>>>audioNodeConnections.renderer;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}