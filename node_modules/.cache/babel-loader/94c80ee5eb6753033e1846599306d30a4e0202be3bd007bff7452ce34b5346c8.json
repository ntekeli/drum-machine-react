{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport var LowpassCombFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(LowpassCombFilter, _ToneAudioNode);\n  var _super = _createSuper(LowpassCombFilter);\n  function LowpassCombFilter() {\n    var _this;\n    _classCallCheck(this, LowpassCombFilter);\n    _this = _super.call(this, optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n    _this.name = \"LowpassCombFilter\";\n    var options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    _this._combFilter = _this.output = new FeedbackCombFilter({\n      context: _this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    _this.delayTime = _this._combFilter.delayTime;\n    _this.resonance = _this._combFilter.resonance;\n    _this._lowpass = _this.input = new OnePoleFilter({\n      context: _this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    });\n    // connections\n    _this._lowpass.connect(_this._combFilter);\n    return _this;\n  }\n  _createClass(LowpassCombFilter, [{\n    key: \"dampening\",\n    get:\n    /**\n     * The dampening control of the feedback\n     */\n    function get() {\n      return this._lowpass.frequency;\n    },\n    set: function set(fq) {\n      this._lowpass.frequency = fq;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LowpassCombFilter.prototype), \"dispose\", this).call(this);\n      this._combFilter.dispose();\n      this._lowpass.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        dampening: 3000,\n        delayTime: 0.1,\n        resonance: 0.5\n      });\n    }\n  }]);\n  return LowpassCombFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AACA,SAAgCA,aAAa,QAA8B,kCAAkC;AAE7G,SAASC,oBAAoB,QAAQ,0BAA0B;AAE/D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAQ/C;;;;;AAKA,WAAaC,iBAAkB;EAAA;EAAA;EAkC9B;IAAA;IAAA;IACC,0BAAMH,oBAAoB,CAACG,iBAAiB,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAjCvG,UAAI,GAAG,mBAAmB;IAkClC,IAAMC,OAAO,GAAGN,oBAAoB,CAACG,iBAAiB,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAEzH,MAAKE,WAAW,GAAG,MAAKC,MAAM,GAAG,IAAIP,kBAAkB,CAAC;MACvDQ,OAAO,EAAE,MAAKA,OAAO;MACrBC,SAAS,EAAEJ,OAAO,CAACI,SAAS;MAC5BC,SAAS,EAAEL,OAAO,CAACK;KACnB,CAAC;IACF,MAAKD,SAAS,GAAG,MAAKH,WAAW,CAACG,SAAS;IAC3C,MAAKC,SAAS,GAAG,MAAKJ,WAAW,CAACI,SAAS;IAE3C,MAAKC,QAAQ,GAAG,MAAKC,KAAK,GAAG,IAAIX,aAAa,CAAC;MAC9CO,OAAO,EAAE,MAAKA,OAAO;MACrBK,SAAS,EAAER,OAAO,CAACS,SAAS;MAC5BC,IAAI,EAAE;KACN,CAAC;IAEF;IACA,MAAKJ,QAAQ,CAACK,OAAO,CAAC,MAAKV,WAAW,CAAC;IAAC;EACzC;EAAC;IAAA;IAAA;IAUD;;;IAGA,eAAa;MACZ,OAAO,IAAI,CAACK,QAAQ,CAACE,SAAS;IAC/B,CAAC;IAAA,KACD,aAAcI,EAAE;MACf,IAAI,CAACN,QAAQ,CAACE,SAAS,GAAGI,EAAE;IAC7B;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACX,WAAW,CAACY,OAAO,EAAE;MAC1B,IAAI,CAACP,QAAQ,CAACO,OAAO,EAAE;MACvB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAvBD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACtB,aAAa,CAACK,WAAW,EAAE,EAAE;QACjDW,SAAS,EAAE,IAAI;QACfL,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;OACX,CAAC;IACH;EAAC;EAAA;AAAA,EA9DqCZ,aAAuC","names":["ToneAudioNode","optionsFromArguments","FeedbackCombFilter","OnePoleFilter","LowpassCombFilter","getDefaults","arguments","options","_combFilter","output","context","delayTime","resonance","_lowpass","input","frequency","dampening","type","connect","fq","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\filter\\LowpassCombFilter.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { RecursivePartial } from \"../../core/util/Interface\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n\ninterface LowpassCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n\tdampening: Frequency;\n}\n\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode<LowpassCombFilterOptions> {\n\n\treadonly name = \"LowpassCombFilter\";\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _combFilter: FeedbackCombFilter;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The delayTime of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * @param delayTime The delay time of the comb filter\n\t * @param resonance The resonance (feedback) of the comb filter\n\t * @param dampening The cutoff of the lowpass filter dampens the signal as it is fedback.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: RecursivePartial<LowpassCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n\n\t\tthis._combFilter = this.output = new FeedbackCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tresonance: options.resonance,\n\t\t});\n\t\tthis.delayTime = this._combFilter.delayTime;\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\tthis._lowpass = this.input = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.dampening,\n\t\t\ttype: \"lowpass\",\n\t\t});\n\n\t\t// connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t}\n\n\tstatic getDefaults(): LowpassCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdampening: 3000,\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\t\n\t/**\n\t * The dampening control of the feedback\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lowpass.frequency;\n\t}\n\tset dampening(fq) {\n\t\tthis._lowpass.frequency = fq;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._combFilter.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}