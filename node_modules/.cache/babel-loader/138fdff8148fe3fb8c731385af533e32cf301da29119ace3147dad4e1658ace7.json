{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 440,\n  periodicWave: undefined,\n  type: 'sine'\n};\nexport var createOscillatorNodeConstructor = function createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(OscillatorNode, _audioNodeConstructor);\n    var _super = _createSuper(OscillatorNode);\n    function OscillatorNode(context, options) {\n      var _this;\n      _classCallCheck(this, OscillatorNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      var nyquist = context.sampleRate / 2;\n      _this = _super.call(this, context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n      // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n      _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeOscillatorNode.detune, 153600, -153600);\n      // Bug #76: Safari does not export the correct values for maxValue and minValue.\n      _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      _this._nativeOscillatorNode = nativeOscillatorNode;\n      _this._onended = null;\n      _this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n      if (_this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        _this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n      return _this;\n    }\n    _createClass(OscillatorNode, [{\n      key: \"detune\",\n      get: function get() {\n        return this._detune;\n      }\n    }, {\n      key: \"frequency\",\n      get: function get() {\n        return this._frequency;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeOscillatorNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeOscillatorNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._nativeOscillatorNode.type;\n      },\n      set: function set(value) {\n        this._nativeOscillatorNode.type = value;\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.periodicWave = null;\n        }\n      }\n    }, {\n      key: \"setPeriodicWave\",\n      value: function setPeriodicWave(periodicWave) {\n        this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.periodicWave = periodicWave;\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this._nativeOscillatorNode.start(when);\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.start = when;\n        }\n        if (this.context.state !== 'closed') {\n          setInternalStateToActive(this);\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n            if (isActiveAudioNode(_this2)) {\n              setInternalStateToPassive(_this2);\n            }\n          };\n          this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this._nativeOscillatorNode.stop(when);\n        if (this._oscillatorNodeRenderer !== null) {\n          this._oscillatorNodeRenderer.stop = when;\n        }\n      }\n    }]);\n    return OscillatorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","detune","frequency","periodicWave","undefined","type","createOscillatorNodeConstructor","audioNodeConstructor","createAudioParam","createNativeOscillatorNode","createOscillatorNodeRenderer","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeOscillatorNode","isOffline","oscillatorNodeRenderer","nyquist","sampleRate","_detune","_frequency","_nativeOscillatorNode","_onended","_oscillatorNodeRenderer","value","wrappedListener","onended","nativeOnEnded","setPeriodicWave","when","start","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-constructor.ts"],"sourcesContent":["import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport {\n    IAudioParam,\n    IAudioScheduledSourceNodeEventMap,\n    IMinimalOfflineAudioContext,\n    IOscillatorNode,\n    IOscillatorNodeRenderer,\n    IOscillatorOptions\n} from '../interfaces';\nimport {\n    TContext,\n    TEventHandler,\n    TNativeOscillatorNode,\n    TOscillatorNodeConstructorFactory,\n    TOscillatorNodeRenderer,\n    TOscillatorType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.\n    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.\n    detune: 0,\n    frequency: 440,\n    periodicWave: undefined,\n    type: 'sine'\n} as const;\n\nexport const createOscillatorNodeConstructor: TOscillatorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class OscillatorNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IOscillatorNode<T>\n    {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _nativeOscillatorNode: TNativeOscillatorNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _oscillatorNodeRenderer: TOscillatorNodeRenderer<T>;\n\n        constructor(context: T, options?: Partial<IOscillatorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = <TOscillatorNodeRenderer<T>>(isOffline ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n\n            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Safari does not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                (<IOscillatorNodeRenderer<IMinimalOfflineAudioContext>>this._oscillatorNodeRenderer).periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeOscillatorNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get type(): TOscillatorType {\n            return this._nativeOscillatorNode.type;\n        }\n\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n\n        public setPeriodicWave(periodicWave: PeriodicWave): void {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n\n        public start(when = 0): void {\n            this._nativeOscillatorNode.start(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeOscillatorNode.stop(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}