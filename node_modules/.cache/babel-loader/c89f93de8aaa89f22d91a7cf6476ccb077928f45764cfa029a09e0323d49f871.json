{"ast":null,"code":"export var createNativeAudioDestinationNodeFactory = function createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors) {\n  return function (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) {\n    var nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Safari does not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch (_unused) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    }\n    // Bug #83: Safari does not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    }\n    // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n    var gainNode = createNativeGainNode(nativeContext, {\n      channelCount: channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        try {\n          nativeAudioDestinationNode.channelCount = value;\n        } catch (err) {\n          // Bug #169: Safari throws an error on each attempt to change the channelCount.\n          if (value > nativeAudioDestinationNode.maxChannelCount) {\n            throw err;\n          }\n        }\n      };\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelCountMode = value;\n      };\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelInterpretation = value;\n      };\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: function get() {\n        return nativeAudioDestinationNode.maxChannelCount;\n      }\n    });\n    // @todo This should be disconnected when the context is closed.\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uCAAuC,GAA8C,SAArFA,uCAAuC,CAChDC,oBAAoB,EACpBC,kBAAkB,EAClB;EACA,OAAO,UAACC,aAAa,EAAEC,YAAY,EAAEC,iCAAiC,EAAI;IACtE,IAAMC,0BAA0B,GAAGH,aAAa,CAACI,WAAW;IAE5D;IACA,IAAID,0BAA0B,CAACF,YAAY,KAAKA,YAAY,EAAE;MAC1D,IAAI;QACAE,0BAA0B,CAACF,YAAY,GAAGA,YAAY;OACzD,CAAC,gBAAM;QACJ;MAAA;;IAIR;IACA,IAAIC,iCAAiC,IAAIC,0BAA0B,CAACE,gBAAgB,KAAK,UAAU,EAAE;MACjGF,0BAA0B,CAACE,gBAAgB,GAAG,UAAU;;IAG5D;IACA,IAAIF,0BAA0B,CAACG,eAAe,KAAK,CAAC,EAAE;MAClDC,MAAM,CAACC,cAAc,CAACL,0BAA0B,EAAE,iBAAiB,EAAE;QACjEM,KAAK,EAAER;OACV,CAAC;;IAGN;IACA,IAAMS,QAAQ,GAAGZ,oBAAoB,CAACE,aAAa,EAAE;MACjDC,YAAY,EAAZA,YAAY;MACZI,gBAAgB,EAAEF,0BAA0B,CAACE,gBAAgB;MAC7DM,qBAAqB,EAAER,0BAA0B,CAACQ,qBAAqB;MACvEC,IAAI,EAAE;KACT,CAAC;IAEFb,kBAAkB,CACdW,QAAQ,EACR,cAAc,EACd,UAACG,GAAG;MAAA,OAAK;QAAA,OAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC;MAAA;IAAA,GACjC,UAACK,GAAG;MAAA,OAAK,UAACN,KAAK,EAAI;QACfM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;QAEzB,IAAI;UACAN,0BAA0B,CAACF,YAAY,GAAGQ,KAAK;SAClD,CAAC,OAAOO,GAAG,EAAE;UACV;UACA,IAAIP,KAAK,GAAGN,0BAA0B,CAACG,eAAe,EAAE;YACpD,MAAMU,GAAG;;;MAGrB,CAAC;IAAA,EACJ;IAEDjB,kBAAkB,CACdW,QAAQ,EACR,kBAAkB,EAClB,UAACG,GAAG;MAAA,OAAK;QAAA,OAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC;MAAA;IAAA,GACjC,UAACK,GAAG;MAAA,OAAK,UAACN,KAAK,EAAI;QACfM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;QACzBN,0BAA0B,CAACE,gBAAgB,GAAGI,KAAK;MACvD,CAAC;IAAA,EACJ;IAEDV,kBAAkB,CACdW,QAAQ,EACR,uBAAuB,EACvB,UAACG,GAAG;MAAA,OAAK;QAAA,OAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC;MAAA;IAAA,GACjC,UAACK,GAAG;MAAA,OAAK,UAACN,KAAK,EAAI;QACfM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;QACzBN,0BAA0B,CAACQ,qBAAqB,GAAGF,KAAK;MAC5D,CAAC;IAAA,EACJ;IAEDF,MAAM,CAACC,cAAc,CAACE,QAAQ,EAAE,iBAAiB,EAAE;MAC/CG,GAAG,EAAE;QAAA,OAAMV,0BAA0B,CAACG,eAAe;MAAA;KACxD,CAAC;IAEF;IACAI,QAAQ,CAACO,OAAO,CAACd,0BAA0B,CAAC;IAE5C,OAA8FO,QAAQ;EAC1G,CAAC;AACL,CAAC","names":["createNativeAudioDestinationNodeFactory","createNativeGainNode","overwriteAccessors","nativeContext","channelCount","isNodeOfNativeOfflineAudioContext","nativeAudioDestinationNode","destination","channelCountMode","maxChannelCount","Object","defineProperty","value","gainNode","channelInterpretation","gain","get","call","set","err","connect"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\native-audio-destination-node.ts"],"sourcesContent":["import { TNativeAudioDestinationNode, TNativeAudioDestinationNodeFactoryFactory, TNativeGainNode } from '../types';\n\nexport const createNativeAudioDestinationNodeFactory: TNativeAudioDestinationNodeFactoryFactory = (\n    createNativeGainNode,\n    overwriteAccessors\n) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            } catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n\n        overwriteAccessors(\n            gainNode,\n            'channelCount',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n\n                try {\n                    nativeAudioDestinationNode.channelCount = value;\n                } catch (err) {\n                    // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                    if (value > nativeAudioDestinationNode.maxChannelCount) {\n                        throw err;\n                    }\n                }\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelCountMode',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelCountMode = value;\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelInterpretation',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelInterpretation = value;\n            }\n        );\n\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n\n        return <{ maxChannelCount: TNativeAudioDestinationNode['maxChannelCount'] } & TNativeGainNode>gainNode;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}