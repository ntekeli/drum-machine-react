{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAudioBufferSourceNodeRendererFactory = function createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioBufferSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n    var createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioBufferSourceNode, nativeAudioBufferSourceNodeIsOwnedByContext, options, _nativeAudioBufferSou;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n              nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n              if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                options = {\n                  buffer: nativeAudioBufferSourceNode.buffer,\n                  channelCount: nativeAudioBufferSourceNode.channelCount,\n                  channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                  channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                  // Bug #149: Safari does not yet support the detune AudioParam.\n                  loop: nativeAudioBufferSourceNode.loop,\n                  loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                  loopStart: nativeAudioBufferSourceNode.loopStart,\n                  playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                  (_nativeAudioBufferSou = nativeAudioBufferSourceNode).start.apply(_nativeAudioBufferSou, _toConsumableArray(start));\n                }\n                if (stop !== null) {\n                  nativeAudioBufferSourceNode.stop(stop);\n                }\n              }\n              renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n              if (nativeAudioBufferSourceNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            case 11:\n              _context.next = 13;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            case 13:\n              return _context.abrupt(\"return\", nativeAudioBufferSourceNode);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createAudioBufferSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,0CAA0C,GAAiD,SAA3FA,0CAA0C,CACnDC,iBAAiB,EACjBC,iCAAiC,EACjCC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,oCAAoC,GAAG,IAAIC,OAAO,EAA4D;IAEpH,IAAIC,KAAK,GAAuD,IAAI;IACpE,IAAIC,IAAI,GAAkB,IAAI;IAE9B,IAAMC,2BAA2B;MAAA,sEAAG,iBAChCC,KAAgC,EAChCC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAEjDC,2BAA2B,GAAGV,kBAAkB,CAAkCQ,KAAK,CAAC;cAE5F;;;;cAIMG,2CAA2C,GAAGf,gBAAgB,CAACc,2BAA2B,EAAED,yBAAyB,CAAC;cAE5H,IAAI,CAACE,2CAA2C,EAAE;gBACxCC,OAAO,GAAG;kBACZC,MAAM,EAAEH,2BAA2B,CAACG,MAAM;kBAC1CC,YAAY,EAAEJ,2BAA2B,CAACI,YAAY;kBACtDC,gBAAgB,EAAEL,2BAA2B,CAACK,gBAAgB;kBAC9DC,qBAAqB,EAAEN,2BAA2B,CAACM,qBAAqB;kBACxE;kBACAC,IAAI,EAAEP,2BAA2B,CAACO,IAAI;kBACtCC,OAAO,EAAER,2BAA2B,CAACQ,OAAO;kBAC5CC,SAAS,EAAET,2BAA2B,CAACS,SAAS;kBAChDC,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAACC;iBAC1D;gBAEDX,2BAA2B,GAAGX,iCAAiC,CAACU,yBAAyB,EAAEG,OAAO,CAAC;gBAEnG,IAAIP,KAAK,KAAK,IAAI,EAAE;kBAChB,oDAA2B,EAACA,KAAK,iDAAIA,KAAK,EAAC;;gBAG/C,IAAIC,IAAI,KAAK,IAAI,EAAE;kBACfI,2BAA2B,CAACJ,IAAI,CAACA,IAAI,CAAC;;;cAI9CH,oCAAoC,CAACmB,GAAG,CAACb,yBAAyB,EAAEC,2BAA2B,CAAC;cAAC,IAE5FC,2CAA2C;gBAAA;gBAAA;cAAA;cAAA;cAAA,OAEtCV,gBAAgB,CAACQ,yBAAyB,EAAED,KAAK,CAACY,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAGzGtB,iBAAiB,CAACW,yBAAyB,EAAED,KAAK,CAACY,YAAY,EAAEV,2BAA2B,CAACU,YAAY,CAAC;YAAA;cAAA;cAAA,OAG9GlB,uBAAuB,CAACM,KAAK,EAAEC,yBAAyB,EAAEC,2BAA2B,CAAC;YAAA;cAAA,iCAErFA,2BAA2B;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACrC;MAAA,gBAjDKH,2BAA2B;QAAA;MAAA;IAAA,GAiDhC;IAED,OAAO;MACH,IAAIF,KAAK,CAACgB,KAAkD;QACxDhB,KAAK,GAAGgB,KAAK;MACjB,CAAC;MACD,IAAIf,IAAI,CAACe,KAAa;QAClBf,IAAI,GAAGe,KAAK;MAChB,CAAC;MACDE,MAAM,kBACFf,KAAgC,EAChCC,yBAAqD;QAErD,IAAMe,mCAAmC,GAAGrB,oCAAoC,CAACsB,GAAG,CAAChB,yBAAyB,CAAC;QAE/G,IAAIe,mCAAmC,KAAKE,SAAS,EAAE;UACnD,OAAOC,OAAO,CAACC,OAAO,CAACJ,mCAAmC,CAAC;;QAG/D,OAAOjB,2BAA2B,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACxE;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\audio-buffer-source-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioBufferSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioBufferSourceNodeRendererFactoryFactory, TNativeAudioBufferSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAudioBufferSourceNodeRendererFactory: TAudioBufferSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode>();\n\n        let start: null | [number, number] | [number, number, number] = null;\n        let stop: null | number = null;\n\n        const createAudioBufferSourceNode = async (\n            proxy: IAudioBufferSourceNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode<T, TNativeAudioBufferSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            } else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            return nativeAudioBufferSourceNode;\n        };\n\n        return {\n            set start(value: [number, number] | [number, number, number]) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IAudioBufferSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode> {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}