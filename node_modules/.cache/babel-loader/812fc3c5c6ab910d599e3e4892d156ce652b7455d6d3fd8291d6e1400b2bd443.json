{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport var Convolver = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Convolver, _ToneAudioNode);\n  var _super = _createSuper(Convolver);\n  function Convolver() {\n    var _this;\n    _classCallCheck(this, Convolver);\n    _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n    _this._convolver = _this.context.createConvolver();\n    var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n      _this.buffer = buffer;\n      options.onload();\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    // set if it's already loaded, set it immediately\n    if (_this._buffer.loaded) {\n      _this.buffer = _this._buffer;\n    }\n    // initially set normalization\n    _this.normalize = options.normalize;\n    // connect it up\n    _this.input.chain(_this._convolver, _this.output);\n    return _this;\n  }\n  _createClass(Convolver, [{\n    key: \"load\",\n    value:\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._buffer.load(url);\n            case 2:\n              this.buffer = _context.sent;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * The convolver's buffer\n     */\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      if (this._buffer.length) {\n        return this._buffer;\n      } else {\n        return null;\n      }\n    },\n    set: function set(buffer) {\n      if (buffer) {\n        this._buffer.set(buffer);\n      }\n      // if it's already got a buffer, create a new one\n      if (this._convolver.buffer) {\n        // disconnect the old one\n        this.input.disconnect();\n        this._convolver.disconnect();\n        // create and connect a new one\n        this._convolver = this.context.createConvolver();\n        this.input.chain(this._convolver, this.output);\n      }\n      var buff = this._buffer.get();\n      this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n  }, {\n    key: \"normalize\",\n    get: function get() {\n      return this._convolver.normalize;\n    },\n    set: function set(norm) {\n      this._convolver.normalize = norm;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Convolver.prototype), \"dispose\", this).call(this);\n      this._buffer.dispose();\n      this._convolver.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalize: true,\n        onload: noOp\n      });\n    }\n  }]);\n  return Convolver;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","ToneAudioBuffer","optionsFromArguments","Gain","noOp","Convolver","getDefaults","arguments","context","createConvolver","options","_buffer","url","buffer","onload","input","output","loaded","normalize","chain","_convolver","load","length","set","disconnect","buff","get","norm","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\filter\\Convolver.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.chain(this._convolver, this.output);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}