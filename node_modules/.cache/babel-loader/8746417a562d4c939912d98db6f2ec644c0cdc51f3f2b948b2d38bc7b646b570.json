{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeGainNodes = new WeakMap();\n    var createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n              if (!nativeGainNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeGainNode.channelCount,\n                  channelCountMode: nativeGainNode.channelCountMode,\n                  channelInterpretation: nativeGainNode.channelInterpretation,\n                  gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n              if (nativeGainNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            case 11:\n              _context.next = 13;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            case 13:\n              return _context.abrupt(\"return\", nativeGainNode);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createGainNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,6BAA6B,GAAoC,SAAjEA,6BAA6B,CACtCC,iBAAiB,EACjBC,oBAAoB,EACpBC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,uBAAuB,GAAG,IAAIC,OAAO,EAA+C;IAE1F,IAAMC,cAAc;MAAA,sEAAG,iBAAOC,KAAmB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAChGC,cAAc,GAAGR,kBAAkB,CAAqBM,KAAK,CAAC,EAElE;cACMG,8BAA8B,GAAGb,gBAAgB,CAACY,cAAc,EAAED,yBAAyB,CAAC;cAElG,IAAI,CAACE,8BAA8B,EAAE;gBAC3BC,OAAO,GAAG;kBACZC,YAAY,EAAEH,cAAc,CAACG,YAAY;kBACzCC,gBAAgB,EAAEJ,cAAc,CAACI,gBAAgB;kBACjDC,qBAAqB,EAAEL,cAAc,CAACK,qBAAqB;kBAC3DC,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACC;iBAC7B;gBAEDP,cAAc,GAAGT,oBAAoB,CAACQ,yBAAyB,EAAEG,OAAO,CAAC;;cAG7EP,uBAAuB,CAACa,GAAG,CAACT,yBAAyB,EAAEC,cAAc,CAAC;cAAC,IAElEC,8BAA8B;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACzBR,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACQ,IAAI,EAAEN,cAAc,CAACM,IAAI,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAE5EhB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACQ,IAAI,EAAEN,cAAc,CAACM,IAAI,CAAC;YAAA;cAAA;cAAA,OAGjFZ,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,cAAc,CAAC;YAAA;cAAA,iCAExEA,cAAc;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACxB;MAAA,gBA5BKH,cAAc;QAAA;MAAA;IAAA,GA4BnB;IAED,OAAO;MACHY,MAAM,kBAACX,KAAmB,EAAEC,yBAAqD;QAC7E,IAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAG,CAACZ,yBAAyB,CAAC;QAErF,IAAIW,sBAAsB,KAAKE,SAAS,EAAE;UACtC,OAAOC,OAAO,CAACC,OAAO,CAACJ,sBAAsB,CAAC;;QAGlD,OAAOb,cAAc,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC3D;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IGainNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGainNodeRendererFactoryFactory, TNativeGainNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createGainNodeRendererFactory: TGainNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeGainNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode>();\n\n        const createGainNode = async (proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode<T, TNativeGainNode>(proxy);\n\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n            return nativeGainNode;\n        };\n\n        return {\n            render(proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeGainNode> {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}