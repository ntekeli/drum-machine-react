{"ast":null,"code":"export var testClonabilityOfAudioWorkletNodeOptions = function testClonabilityOfAudioWorkletNodeOptions(audioWorkletNodeOptions) {\n  var _MessageChannel = new MessageChannel(),\n    port1 = _MessageChannel.port1;\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,wCAAwC,GAAG,SAA3CA,wCAAwC,CAAIC,uBAAiD,EAAU;EAChH,sBAAkB,IAAIC,cAAc,EAAE;IAA9BC,KAAK,mBAALA,KAAK;EAEb,IAAI;IACA;IACAA,KAAK,CAACC,WAAW,CAACH,uBAAuB,CAAC;GAC7C,SAAS;IACNE,KAAK,CAACE,KAAK,EAAE;;AAErB,CAAC","names":["testClonabilityOfAudioWorkletNodeOptions","audioWorkletNodeOptions","MessageChannel","port1","postMessage","close"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\helpers\\test-clonability-of-audio-worklet-node-options.ts"],"sourcesContent":["import { IAudioWorkletNodeOptions } from '../interfaces';\n\nexport const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions: IAudioWorkletNodeOptions): void => {\n    const { port1 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n    }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}