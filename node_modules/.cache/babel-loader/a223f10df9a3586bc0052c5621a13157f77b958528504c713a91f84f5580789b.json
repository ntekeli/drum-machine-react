{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport var createTestAudioWorkletProcessorNoOutputsSupport = function createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var blob, messageChannel, offlineAudioContext, url, isCallingProcess, audioWorkletNode, oscillator;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(nativeAudioWorkletNodeConstructor === null)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", true);\n        case 2:\n          if (!(nativeOfflineAudioContextConstructor === null)) {\n            _context.next = 4;\n            break;\n          }\n          return _context.abrupt(\"return\", false);\n        case 4:\n          blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n            type: 'application/javascript; charset=utf-8'\n          });\n          messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n          offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n          url = URL.createObjectURL(blob);\n          isCallingProcess = false;\n          _context.prev = 9;\n          _context.next = 12;\n          return offlineAudioContext.audioWorklet.addModule(url);\n        case 12:\n          audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n            numberOfOutputs: 0\n          });\n          oscillator = offlineAudioContext.createOscillator();\n          _context.next = 16;\n          return new Promise(function (resolve) {\n            audioWorkletNode.port.onmessage = function () {\n              return resolve();\n            };\n            audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n          });\n        case 16:\n          audioWorkletNode.port.onmessage = function () {\n            return isCallingProcess = true;\n          };\n          oscillator.connect(audioWorkletNode);\n          oscillator.start(0);\n          _context.next = 21;\n          return offlineAudioContext.startRendering();\n        case 21:\n          _context.next = 23;\n          return new Promise(function (resolve) {\n            messageChannel.port1.onmessage = function (_ref2) {\n              var data = _ref2.data;\n              return resolve(data === 1);\n            };\n            messageChannel.port1.postMessage(0);\n          });\n        case 23:\n          isCallingProcess = _context.sent;\n          _context.next = 28;\n          break;\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](9);\n        case 28:\n          _context.prev = 28;\n          messageChannel.port1.close();\n          URL.revokeObjectURL(url);\n          return _context.finish(28);\n        case 32:\n          return _context.abrupt(\"return\", isCallingProcess);\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[9, 26, 28, 32]]);\n  }));\n};","map":{"version":3,"mappings":";;AAEA;;;;AAIA,OAAO,IAAMA,+CAA+C,GAAsD,SAArGA,+CAA+C,CACxDC,iCAAiC,EACjCC,oCAAoC,EACpC;EACA,+EAAO;IAAA;IAAA;MAAA;QAAA;UAAA,MAECD,iCAAiC,KAAK,IAAI;YAAA;YAAA;UAAA;UAAA,iCACnC,IAAI;QAAA;UAAA,MAGXC,oCAAoC,KAAK,IAAI;YAAA;YAAA;UAAA;UAAA,iCACtC,KAAK;QAAA;UAGVC,IAAI,GAAG,IAAIC,IAAI,CACjB,CACI,uNAAuN,CAC1N,EACD;YACIC,IAAI,EAAE;WACT,CACJ;UACKC,cAAc,GAAG,IAAIC,cAAc,EAAE,EAC3C;UACMC,mBAAmB,GAAG,IAAIN,oCAAoC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;UAC7EO,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;UAEjCS,gBAAgB,GAAG,KAAK;UAAA;UAAA;UAAA,OAGlBJ,mBAAmB,CAACK,YAAY,CAACC,SAAS,CAACL,GAAG,CAAC;QAAA;UAE/CM,gBAAgB,GAAG,IAAId,iCAAiC,CAACO,mBAAmB,EAAE,GAAG,EAAE;YAAEQ,eAAe,EAAE;UAAC,CAAE,CAAC;UAC1GC,UAAU,GAAGT,mBAAmB,CAACU,gBAAgB,EAAE;UAAA;UAAA,OAEnD,IAAIC,OAAO,CAAO,UAACC,OAAO,EAAI;YAChCL,gBAAgB,CAACM,IAAI,CAACC,SAAS,GAAG;cAAA,OAAMF,OAAO,EAAE;YAAA;YACjDL,gBAAgB,CAACM,IAAI,CAACE,WAAW,CAACjB,cAAc,CAACkB,KAAK,EAAE,CAAClB,cAAc,CAACkB,KAAK,CAAC,CAAC;UACnF,CAAC,CAAC;QAAA;UAEFT,gBAAgB,CAACM,IAAI,CAACC,SAAS,GAAG;YAAA,OAAOV,gBAAgB,GAAG,IAAI;UAAA,CAAC;UAEjEK,UAAU,CAACQ,OAAO,CAACV,gBAAgB,CAAC;UACpCE,UAAU,CAACS,KAAK,CAAC,CAAC,CAAC;UAAC;UAAA,OAEdlB,mBAAmB,CAACmB,cAAc,EAAE;QAAA;UAAA;UAAA,OAEjB,IAAIR,OAAO,CAAC,UAACC,OAAO,EAAI;YAC7Cd,cAAc,CAACsB,KAAK,CAACN,SAAS,GAAG;cAAA,IAAGO,IAAI,SAAJA,IAAI;cAAA,OAAOT,OAAO,CAACS,IAAI,KAAK,CAAC,CAAC;YAAA;YAClEvB,cAAc,CAACsB,KAAK,CAACL,WAAW,CAAC,CAAC,CAAC;UACvC,CAAC,CAAC;QAAA;UAHFX,gBAAgB;UAAA;UAAA;QAAA;UAAA;UAAA;QAAA;UAAA;UAOhBN,cAAc,CAACsB,KAAK,CAACE,KAAK,EAAE;UAC5BpB,GAAG,CAACqB,eAAe,CAACtB,GAAG,CAAC;UAAC;QAAA;UAAA,iCAGtBG,gBAAgB;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC1B;AACL,CAAC","names":["createTestAudioWorkletProcessorNoOutputsSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","messageChannel","MessageChannel","offlineAudioContext","url","URL","createObjectURL","isCallingProcess","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","Promise","resolve","port","onmessage","postMessage","port2","connect","start","startRendering","port1","data","close","revokeObjectURL"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\test-audio-worklet-processor-no-outputs-support.ts"],"sourcesContent":["import { TTestAudioWorkletProcessorNoOutputsSupportFactory } from '../types';\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport: TTestAudioWorkletProcessorNoOutputsSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            [\n                'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n            ],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isCallingProcess = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            await new Promise<void>((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        } catch {\n            // Ignore errors.\n        } finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n\n        return isCallingProcess;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}