{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport var Chorus = /*#__PURE__*/function (_StereoFeedbackEffect) {\n  _inherits(Chorus, _StereoFeedbackEffect);\n  var _super = _createSuper(Chorus);\n  function Chorus() {\n    var _this;\n    _classCallCheck(this, Chorus);\n    _this = _super.call(this, optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n    _this.name = \"Chorus\";\n    var options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    _this._depth = options.depth;\n    _this._delayTime = options.delayTime / 1000;\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._delayNodeL = new Delay({\n      context: _this.context\n    });\n    _this._delayNodeR = new Delay({\n      context: _this.context\n    });\n    _this.frequency = _this._lfoL.frequency;\n    readOnly(_assertThisInitialized(_this), [\"frequency\"]);\n    // have one LFO frequency control the other\n    _this._lfoL.frequency.connect(_this._lfoR.frequency);\n    // connections\n    _this.connectEffectLeft(_this._delayNodeL);\n    _this.connectEffectRight(_this._delayNodeR);\n    // lfo setup\n    _this._lfoL.connect(_this._delayNodeL.delayTime);\n    _this._lfoR.connect(_this._delayNodeR.delayTime);\n    // set the initial values\n    _this.depth = _this._depth;\n    _this.type = options.type;\n    _this.spread = options.spread;\n    return _this;\n  }\n  _createClass(Chorus, [{\n    key: \"depth\",\n    get:\n    /**\n     * The depth of the effect. A depth of 1 makes the delayTime\n     * modulate between 0 and 2*delayTime (centered around the delayTime).\n     */\n    function get() {\n      return this._depth;\n    },\n    set: function set(depth) {\n      this._depth = depth;\n      var deviation = this._delayTime * depth;\n      this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoL.max = this._delayTime + deviation;\n      this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n      this._lfoR.max = this._delayTime + deviation;\n    }\n    /**\n     * The delayTime in milliseconds of the chorus. A larger delayTime\n     * will give a more pronounced effect. Nominal range a delayTime\n     * is between 2 and 20ms.\n     */\n  }, {\n    key: \"delayTime\",\n    get: function get() {\n      return this._delayTime * 1000;\n    },\n    set: function set(delayTime) {\n      this._delayTime = delayTime / 1000;\n      this.depth = this._depth;\n    }\n    /**\n     * The oscillator type of the LFO.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase;\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n    /**\n     * Start the effect.\n     */\n  }, {\n    key: \"start\",\n    value: function start(time) {\n      this._lfoL.start(time);\n      this._lfoR.start(time);\n      return this;\n    }\n    /**\n     * Stop the lfo\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n      this._lfoR.stop(time);\n      return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n      this._lfoR.sync();\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n      this._lfoR.unsync();\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Chorus.prototype), \"dispose\", this).call(this);\n      this._lfoL.dispose();\n      this._lfoR.dispose();\n      this._delayNodeL.dispose();\n      this._delayNodeR.dispose();\n      this.frequency.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoFeedbackEffect.getDefaults(), {\n        frequency: 1.5,\n        delayTime: 3.5,\n        depth: 0.7,\n        type: \"sine\",\n        spread: 180,\n        feedback: 0,\n        wet: 0.5\n      });\n    }\n  }]);\n  return Chorus;\n}(StereoFeedbackEffect);","map":{"version":3,"mappings":"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","names":["StereoFeedbackEffect","optionsFromArguments","LFO","Delay","readOnly","Chorus","getDefaults","arguments","options","_depth","depth","_delayTime","delayTime","_lfoL","context","frequency","min","max","_lfoR","phase","_delayNodeL","_delayNodeR","connect","connectEffectLeft","connectEffectRight","type","spread","deviation","Math","time","start","stop","sync","unsync","dispose","Object","assign","feedback","wet"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\Chorus.ts"],"sourcesContent":["import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"../effect/StereoFeedbackEffect\";\nimport { Degrees, Frequency, Milliseconds, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface ChorusOptions extends StereoFeedbackEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\n}\n\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n * \n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect<ChorusOptions> {\n\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(frequency?: Frequency, delayTime?: Milliseconds, depth?: NormalRange);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoFeedbackEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tspread: 180,\n\t\t\tfeedback: 0,\n\t\t\twet: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tconst deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread / 2);\n\t\tthis._lfoR.phase = (spread / 2) + 90;\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}