{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport var Players = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Players, _ToneAudioNode);\n  var _super = _createSuper(Players);\n  function Players() {\n    var _this;\n    _classCallCheck(this, Players);\n    _this = _super.call(this, optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n    _this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n    _this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n    _this._players = new Map();\n    var options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    _this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    // mute initially\n    _this.mute = options.mute;\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    return _this;\n  }\n  _createClass(Players, [{\n    key: \"mute\",\n    get:\n    /**\n     * Mute the output.\n     */\n    function get() {\n      return this._volume.mute;\n    },\n    set: function set(mute) {\n      this._volume.mute = mute;\n    }\n    /**\n     * The fadeIn time of the envelope applied to the source.\n     */\n  }, {\n    key: \"fadeIn\",\n    get: function get() {\n      return this._fadeIn;\n    },\n    set: function set(fadeIn) {\n      this._fadeIn = fadeIn;\n      this._players.forEach(function (player) {\n        player.fadeIn = fadeIn;\n      });\n    }\n    /**\n     * The fadeOut time of the each of the sources.\n     */\n  }, {\n    key: \"fadeOut\",\n    get: function get() {\n      return this._fadeOut;\n    },\n    set: function set(fadeOut) {\n      this._fadeOut = fadeOut;\n      this._players.forEach(function (player) {\n        player.fadeOut = fadeOut;\n      });\n    }\n    /**\n     * The state of the players object. Returns \"started\" if any of the players are playing.\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      var playing = Array.from(this._players).some(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          player = _ref2[1];\n        return player.state === \"started\";\n      });\n      return playing ? \"started\" : \"stopped\";\n    }\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param name  The key or index of the buffer.\n     */\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._buffers.has(name);\n    }\n    /**\n     * Get a player by name.\n     * @param  name  The players name as defined in the constructor object or `add` method.\n     */\n  }, {\n    key: \"player\",\n    value: function player(name) {\n      assert(this.has(name), \"No Player with the name \".concat(name, \" exists on this object\"));\n      if (!this._players.has(name)) {\n        var player = new Player({\n          context: this.context,\n          fadeIn: this._fadeIn,\n          fadeOut: this._fadeOut,\n          url: this._buffers.get(name)\n        }).connect(this.output);\n        this._players.set(name, player);\n      }\n      return this._players.get(name);\n    }\n    /**\n     * If all the buffers are loaded or not\n     */\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffers.loaded;\n    }\n    /**\n     * Add a player by name and url to the Players\n     * @param  name A unique name to give the player\n     * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n     * @param callback  The callback to invoke when the url is loaded.\n     */\n  }, {\n    key: \"add\",\n    value: function add(name, url, callback) {\n      assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n      this._buffers.add(name, url, callback);\n      return this;\n    }\n    /**\n     * Stop all of the players at the given time\n     * @param time The time to stop all of the players.\n     */\n  }, {\n    key: \"stopAll\",\n    value: function stopAll(time) {\n      this._players.forEach(function (player) {\n        return player.stop(time);\n      });\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Players.prototype), \"dispose\", this).call(this);\n      this._volume.dispose();\n      this.volume.dispose();\n      this._players.forEach(function (player) {\n        return player.dispose();\n      });\n      this._buffers.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        baseUrl: \"\",\n        fadeIn: 0,\n        fadeOut: 0,\n        mute: false,\n        onload: noOp,\n        onerror: noOp,\n        urls: {},\n        volume: 0\n      });\n    }\n  }]);\n  return Players;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Volume","ToneAudioBuffers","ToneAudioNode","optionsFromArguments","assert","noOp","readOnly","Source","Player","Players","getDefaults","arguments","undefined","Map","options","_volume","output","context","volume","_buffers","urls","onload","baseUrl","onerror","mute","_fadeIn","fadeIn","_fadeOut","fadeOut","_players","forEach","player","playing","Array","from","some","_","state","name","has","url","get","connect","set","loaded","callback","add","time","stop","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\source\\buffer\\Players.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: options.urls, \n\t\t\tonload: options.onload, \n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror\n\t\t});\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tassert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}