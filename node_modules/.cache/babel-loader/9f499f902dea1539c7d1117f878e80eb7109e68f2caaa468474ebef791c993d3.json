{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See [[AudioToGain]].\n * @category Signal\n */\nexport var GainToAudio = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(GainToAudio, _SignalOperator);\n  var _super = _createSuper(GainToAudio);\n  function GainToAudio() {\n    var _this;\n    _classCallCheck(this, GainToAudio);\n    _this = _super.apply(this, arguments);\n    _this.name = \"GainToAudio\";\n    /**\n     * The node which converts the audio ranges\n     */\n    _this._norm = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(x) {\n        return Math.abs(x) * 2 - 1;\n      }\n    });\n    /**\n     * The NormalRange input [0, 1]\n     */\n    _this.input = _this._norm;\n    /**\n     * The AudioRange output [-1, 1]\n     */\n    _this.output = _this._norm;\n    return _this;\n  }\n  /**\n   * clean up\n   */\n  _createClass(GainToAudio, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GainToAudio.prototype), \"dispose\", this).call(this);\n      this._norm.dispose();\n      return this;\n    }\n  }]);\n  return GainToAudio;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,cAAc;AAEzC;;;;;AAKA,WAAaC,WAAY;EAAA;EAAA;EAAzB;IAAA;IAAA;;IAEU,UAAI,GAAW,aAAa;IAErC;;;IAGQ,WAAK,GAAG,IAAID,UAAU,CAAC;MAC9BE,OAAO,EAAE,MAAKA,OAAO;MACrBC,OAAO,EAAE,kBAAC;QAAA,OAAIC,IAAI,CAACC,GAAG,CAACC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAAA;KACjC,CAAC;IAEF;;;IAGA,WAAK,GAAG,MAAKC,KAAK;IAElB;;;IAGA,YAAM,GAAG,MAAKA,KAAK;IAAC;EAUrB;EARC;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACA,KAAK,CAACC,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EA7B+BT,cAAoC","names":["SignalOperator","WaveShaper","GainToAudio","context","mapping","Math","abs","x","_norm","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\GainToAudio.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See [[AudioToGain]].\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}