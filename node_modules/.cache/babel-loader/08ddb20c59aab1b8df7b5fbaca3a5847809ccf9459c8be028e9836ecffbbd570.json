{"ast":null,"code":"export var createWrapChannelMergerNode = function createWrapChannelMergerNode(createInvalidStateError, monitorConnections) {\n  return function (nativeContext, channelMergerNode) {\n    // Bug #15: Safari does not return the default properties.\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit';\n    // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: function get() {\n        return 1;\n      },\n      set: function set() {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: function get() {\n        return 'explicit';\n      },\n      set: function set() {\n        throw createInvalidStateError();\n      }\n    });\n    // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n    var audioBufferSourceNode = nativeContext.createBufferSource();\n    var whenConnected = function whenConnected() {\n      var length = channelMergerNode.numberOfInputs;\n      for (var i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n    var whenDisconnected = function whenDisconnected() {\n      return audioBufferSourceNode.disconnect(channelMergerNode);\n    };\n    monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,2BAA2B,GAAkC,SAA7DA,2BAA2B,CAAmCC,uBAAuB,EAAEC,kBAAkB,EAAI;EACtH,OAAO,UAACC,aAAa,EAAEC,iBAAiB,EAAI;IACxC;IACAA,iBAAiB,CAACC,YAAY,GAAG,CAAC;IAClCD,iBAAiB,CAACE,gBAAgB,GAAG,UAAU;IAE/C;IACAC,MAAM,CAACC,cAAc,CAACJ,iBAAiB,EAAE,cAAc,EAAE;MACrDK,GAAG,EAAE;QAAA,OAAM,CAAC;MAAA;MACZC,GAAG,EAAE,eAAK;QACN,MAAMT,uBAAuB,EAAE;MACnC;KACH,CAAC;IAEFM,MAAM,CAACC,cAAc,CAACJ,iBAAiB,EAAE,kBAAkB,EAAE;MACzDK,GAAG,EAAE;QAAA,OAAM,UAAU;MAAA;MACrBC,GAAG,EAAE,eAAK;QACN,MAAMT,uBAAuB,EAAE;MACnC;KACH,CAAC;IAEF;IACA,IAAMU,qBAAqB,GAAGR,aAAa,CAACS,kBAAkB,EAAE;IAEhE,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAQ;MACvB,IAAMC,MAAM,GAAGV,iBAAiB,CAACW,cAAc;MAE/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;QAChCL,qBAAqB,CAACM,OAAO,CAACb,iBAAiB,EAAE,CAAC,EAAEY,CAAC,CAAC;;IAE9D,CAAC;IACD,IAAME,gBAAgB,GAAG,SAAnBA,gBAAgB;MAAA,OAASP,qBAAqB,CAACQ,UAAU,CAACf,iBAAiB,CAAC;IAAA;IAElFF,kBAAkB,CAACE,iBAAiB,EAAES,aAAa,EAAEK,gBAAgB,CAAC;EAC1E,CAAC;AACL,CAAC","names":["createWrapChannelMergerNode","createInvalidStateError","monitorConnections","nativeContext","channelMergerNode","channelCount","channelCountMode","Object","defineProperty","get","set","audioBufferSourceNode","createBufferSource","whenConnected","length","numberOfInputs","i","connect","whenDisconnected","disconnect"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\wrap-channel-merger-node.ts"],"sourcesContent":["import { TWrapChannelMergerNodeFactory } from '../types';\n\nexport const createWrapChannelMergerNode: TWrapChannelMergerNodeFactory = (createInvalidStateError, monitorConnections) => {\n    return (nativeContext, channelMergerNode) => {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = nativeContext.createBufferSource();\n\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}