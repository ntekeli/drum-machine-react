{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport var MidiClass = /*#__PURE__*/function (_FrequencyClass) {\n  _inherits(MidiClass, _FrequencyClass);\n  var _super = _createSuper(MidiClass);\n  function MidiClass() {\n    var _this;\n    _classCallCheck(this, MidiClass);\n    _this = _super.apply(this, arguments);\n    _this.name = \"MidiClass\";\n    _this.defaultUnits = \"midi\";\n    return _this;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _createClass(MidiClass, [{\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_frequencyToUnits\", this).call(this, freq));\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_ticksToUnits\", this).call(this, ticks));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_beatsToUnits\", this).call(this, beats));\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_secondsToUnits\", this).call(this, seconds));\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toMidi(); // 60\n     */\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return this.valueOf();\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toFrequency(); // 261.6255653005986\n     */\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency() {\n      return mtof(this.toMidi());\n    }\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return A new transposed MidiClass\n     * @example\n     * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n     */\n  }, {\n    key: \"transpose\",\n    value: function transpose(interval) {\n      return new MidiClass(this.context, this.toMidi() + interval);\n    }\n  }]);\n  return MidiClass;\n}(FrequencyClass);\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAU,QAAQ,WAAW;AACtC,SAASC,IAAI,EAAEC,IAAI,QAAQ,eAAe;AAC1C,SAASC,cAAc,QAAuB,aAAa;AAI3D;;;;;;AAMA,WAAaC,SAAU;EAAA;EAAA;EAAvB;IAAA;IAAA;;IAEU,UAAI,GAAW,WAAW;IAE1B,kBAAY,GAAG,MAAM;IAAC;EAyDhC;EAvDC;;;EAAA;IAAA;IAAA,OAGU,2BAAkBC,IAAW;MACtC,OAAOJ,IAAI,kFAAyBI,IAAI,EAAE;IAC3C;IAEA;;;EAAA;IAAA;IAAA,OAGU,uBAAcC,KAAY;MACnC,OAAOL,IAAI,8EAAqBK,KAAK,EAAE;IACxC;IAEA;;;EAAA;IAAA;IAAA,OAGU,uBAAcC,KAAa;MACpC,OAAON,IAAI,8EAAqBM,KAAK,EAAE;IACxC;IAEA;;;EAAA;IAAA;IAAA,OAGU,yBAAgBC,OAAgB;MACzC,OAAOP,IAAI,gFAAuBO,OAAO,EAAE;IAC5C;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,kBAAM;MACL,OAAO,IAAI,CAACC,OAAO,EAAE;IACtB;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,uBAAW;MACV,OAAOP,IAAI,CAAC,IAAI,CAACQ,MAAM,EAAE,CAAC;IAC3B;IAEA;;;;;;EAAA;IAAA;IAAA,OAMA,mBAAUC,QAAkB;MAC3B,OAAO,IAAIP,SAAS,CAAC,IAAI,CAACQ,OAAO,EAAE,IAAI,CAACF,MAAM,EAAE,GAAGC,QAAQ,CAAC;IAC7D;EAAC;EAAA;AAAA,EA5D6BR,cAAwB;AA+DvD;;;;AAIA,OAAM,SAAUU,IAAI,CAACC,KAAiB,EAAEC,KAAqB;EAC5D,OAAO,IAAIX,SAAS,CAACJ,UAAU,EAAE,EAAEc,KAAK,EAAEC,KAAK,CAAC;AACjD","names":["getContext","ftom","mtof","FrequencyClass","MidiClass","freq","ticks","beats","seconds","valueOf","toMidi","interval","context","Midi","value","units"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\type\\Midi.ts"],"sourcesContent":["import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"MidiClass\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}