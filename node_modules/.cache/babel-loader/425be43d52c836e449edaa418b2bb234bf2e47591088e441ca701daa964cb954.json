{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport var ToneOscillatorNode = /*#__PURE__*/function (_OneShotSource) {\n  _inherits(ToneOscillatorNode, _OneShotSource);\n  var _super = _createSuper(ToneOscillatorNode);\n  function ToneOscillatorNode() {\n    var _this;\n    _classCallCheck(this, ToneOscillatorNode);\n    _this = _super.call(this, optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n    _this._oscillator = _this.context.createOscillator();\n    _this._internalChannels = [_this._oscillator];\n    var options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    connect(_this._oscillator, _this._gainNode);\n    _this.type = options.type;\n    _this.frequency = new Param({\n      context: _this.context,\n      param: _this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      param: _this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\"]);\n    return _this;\n  }\n  _createClass(ToneOscillatorNode, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the oscillator node at the given time\n     * @param  time When to start the oscillator\n     */\n    function start(time) {\n      var computedTime = this.toSeconds(time);\n      this.log(\"start\", computedTime);\n      this._startGain(computedTime);\n      this._oscillator.start(computedTime);\n      return this;\n    }\n  }, {\n    key: \"_stopSource\",\n    value: function _stopSource(time) {\n      this._oscillator.stop(time);\n    }\n    /**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n     */\n  }, {\n    key: \"setPeriodicWave\",\n    value: function setPeriodicWave(periodicWave) {\n      this._oscillator.setPeriodicWave(periodicWave);\n      return this;\n    }\n    /**\n     * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._oscillator.type;\n    },\n    set: function set(type) {\n      this._oscillator.type = type;\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneOscillatorNode.prototype), \"dispose\", this).call(this);\n      if (this.state === \"started\") {\n        this.stop();\n      }\n      this._oscillator.disconnect();\n      this.frequency.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(OneShotSource.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        type: \"sine\"\n      });\n    }\n  }]);\n  return ToneOscillatorNode;\n}(OneShotSource);","map":{"version":3,"mappings":"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","names":["connect","Param","optionsFromArguments","OneShotSource","readOnly","ToneOscillatorNode","getDefaults","arguments","context","createOscillator","_oscillator","options","_gainNode","type","frequency","param","units","value","detune","time","computedTime","toSeconds","log","_startGain","start","stop","periodicWave","setPeriodicWave","state","disconnect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\source\\oscillator\\ToneOscillatorNode.ts"],"sourcesContent":["import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}