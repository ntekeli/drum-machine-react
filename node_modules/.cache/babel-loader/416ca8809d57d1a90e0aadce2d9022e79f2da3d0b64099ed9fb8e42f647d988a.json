{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createOscillatorNodeRendererFactory = function createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeOscillatorNodes = new WeakMap();\n    var periodicWave = null;\n    var start = null;\n    var stop = null;\n    var createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeOscillatorNode, nativeOscillatorNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n              if (!nativeOscillatorNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeOscillatorNode.channelCount,\n                  channelCountMode: nativeOscillatorNode.channelCountMode,\n                  channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                  detune: nativeOscillatorNode.detune.value,\n                  frequency: nativeOscillatorNode.frequency.value,\n                  periodicWave: periodicWave === null ? undefined : periodicWave,\n                  type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                  nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                  nativeOscillatorNode.stop(stop);\n                }\n              }\n              renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n              if (nativeOscillatorNodeIsOwnedByContext) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n            case 7:\n              _context.next = 9;\n              return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            case 9:\n              _context.next = 15;\n              break;\n            case 11:\n              _context.next = 13;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n            case 13:\n              _context.next = 15;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            case 15:\n              _context.next = 17;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            case 17:\n              return _context.abrupt(\"return\", nativeOscillatorNode);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createOscillatorNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\oscillator-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IOscillatorNode, IPeriodicWave } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeOscillatorNode, TOscillatorNodeRendererFactoryFactory } from '../types';\n\nexport const createOscillatorNodeRendererFactory: TOscillatorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeOscillatorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeOscillatorNode>();\n\n        let periodicWave: null | IPeriodicWave = null;\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createOscillatorNode = async (proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode<T, TNativeOscillatorNode>(proxy);\n\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n            return nativeOscillatorNode;\n        };\n\n        return {\n            set periodicWave(value: null | IPeriodicWave) {\n                periodicWave = value;\n            },\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeOscillatorNode> {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}