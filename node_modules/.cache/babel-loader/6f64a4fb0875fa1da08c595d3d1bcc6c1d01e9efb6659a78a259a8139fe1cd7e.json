{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportEvent } from \"./TransportEvent\";\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport var TransportRepeatEvent = /*#__PURE__*/function (_TransportEvent) {\n  _inherits(TransportRepeatEvent, _TransportEvent);\n  var _super = _createSuper(TransportRepeatEvent);\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  function TransportRepeatEvent(transport, opts) {\n    var _this;\n    _classCallCheck(this, TransportRepeatEvent);\n    _this = _super.call(this, transport, opts);\n    /**\n     * The ID of the current timeline event\n     */\n    _this._currentId = -1;\n    /**\n     * The ID of the next timeline event\n     */\n    _this._nextId = -1;\n    /**\n     * The time of the next event\n     */\n    _this._nextTick = _this.time;\n    /**\n     * a reference to the bound start method\n     */\n    _this._boundRestart = _this._restart.bind(_assertThisInitialized(_this));\n    var options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n    _this.duration = new TicksClass(transport.context, options.duration).valueOf();\n    _this._interval = new TicksClass(transport.context, options.interval).valueOf();\n    _this._nextTick = options.time;\n    _this.transport.on(\"start\", _this._boundRestart);\n    _this.transport.on(\"loopStart\", _this._boundRestart);\n    _this.context = _this.transport.context;\n    _this._restart();\n    return _this;\n  }\n  _createClass(TransportRepeatEvent, [{\n    key: \"invoke\",\n    value:\n    /**\n     * Invoke the callback. Returns the tick time which\n     * the next event should be scheduled at.\n     * @param  time  The AudioContext time in seconds of the event\n     */\n    function invoke(time) {\n      // create more events if necessary\n      this._createEvents(time);\n      // call the super class\n      _get(_getPrototypeOf(TransportRepeatEvent.prototype), \"invoke\", this).call(this, time);\n    }\n    /**\n     * Push more events onto the timeline to keep up with the position of the timeline\n     */\n  }, {\n    key: \"_createEvents\",\n    value: function _createEvents(time) {\n      // schedule the next event\n      var ticks = this.transport.getTicksAtTime(time);\n      if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n        this._nextTick += this._interval;\n        this._currentId = this._nextId;\n        this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n      }\n    }\n    /**\n     * Push more events onto the timeline to keep up with the position of the timeline\n     */\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this.transport.clear(this._currentId);\n      this.transport.clear(this._nextId);\n      this._nextTick = this.time;\n      var ticks = this.transport.getTicksAtTime(time);\n      if (ticks > this.time) {\n        this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n      }\n      this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n      this._nextTick += this._interval;\n      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    }\n    /**\n     * Clean up\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(TransportRepeatEvent.prototype), \"dispose\", this).call(this);\n      this.transport.clear(this._currentId);\n      this.transport.clear(this._nextId);\n      this.transport.off(\"start\", this._boundRestart);\n      this.transport.off(\"loopStart\", this._boundRestart);\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign({}, TransportEvent.getDefaults(), {\n        duration: Infinity,\n        interval: 1,\n        once: false\n      });\n    }\n  }]);\n  return TransportRepeatEvent;\n}(TransportEvent);","map":{"version":3,"mappings":"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","names":["TicksClass","TransportEvent","TransportRepeatEvent","transport","opts","time","_restart","bind","options","Object","assign","getDefaults","duration","context","valueOf","_interval","interval","_nextTick","on","_boundRestart","_createEvents","ticks","getTicksAtTime","_currentId","_nextId","scheduleOnce","invoke","toSeconds","clear","Math","ceil","off","Infinity","once"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\clock\\TransportRepeatEvent.ts"],"sourcesContent":["import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}