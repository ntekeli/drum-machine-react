{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n  var result = [0, 0];\n  for (var i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n  return result;\n}\nexport var createNativeIIRFilterNodeFakerFactory = function createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) {\n  return function (nativeContext, baseLatency, _ref) {\n    var channelCount = _ref.channelCount,\n      channelCountMode = _ref.channelCountMode,\n      channelInterpretation = _ref.channelInterpretation,\n      feedback = _ref.feedback,\n      feedforward = _ref.feedforward;\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    var feedbackLength = convertedFeedback.length;\n    var feedforwardLength = convertedFeedforward.length;\n    var minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (convertedFeedback[0] !== 1) {\n      for (var i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n      for (var _i = 1; _i < feedbackLength; _i += 1) {\n        convertedFeedback[_i] /= convertedFeedback[0];\n      }\n    }\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    var bufferLength = 32;\n    var bufferIndexes = [];\n    var xBuffers = [];\n    var yBuffers = [];\n    for (var _i2 = 0; _i2 < channelCount; _i2 += 1) {\n      bufferIndexes.push(0);\n      var xBuffer = new Float32Array(bufferLength);\n      var yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = function (event) {\n      var inputBuffer = event.inputBuffer;\n      var outputBuffer = event.outputBuffer;\n      var numberOfChannels = inputBuffer.numberOfChannels;\n      for (var _i3 = 0; _i3 < numberOfChannels; _i3 += 1) {\n        var input = inputBuffer.getChannelData(_i3);\n        var output = outputBuffer.getChannelData(_i3);\n        bufferIndexes[_i3] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[_i3], yBuffers[_i3], bufferIndexes[_i3], bufferLength, input, output);\n      }\n    };\n    var nyquist = nativeContext.sampleRate / 2;\n    var nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n      addEventListener: function addEventListener() {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      getFrequencyResponse: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n        var length = frequencyHz.length;\n        for (var _i4 = 0; _i4 < length; _i4 += 1) {\n          var omega = -Math.PI * (frequencyHz[_i4] / nyquist);\n          var z = [Math.cos(omega), Math.sin(omega)];\n          var numerator = evaluatePolynomial(convertedFeedforward, z);\n          var denominator = evaluatePolynomial(convertedFeedback, z);\n          var response = divide(numerator, denominator);\n          magResponse[_i4] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[_i4] = Math.atan2(response[1], response[0]);\n        }\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"mappings":"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","names":["computeBufferSize","filterBuffer","interceptConnections","divide","a","b","denominator","multiply","evaluatePolynomial","coefficient","z","result","i","length","createNativeIIRFilterNodeFakerFactory","createInvalidAccessError","createInvalidStateError","createNativeScriptProcessorNode","createNotSupportedError","nativeContext","baseLatency","channelCount","channelCountMode","channelInterpretation","feedback","feedforward","bufferSize","sampleRate","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","feedforwardLength","minLength","Math","min","scriptProcessorNode","bufferLength","bufferIndexes","xBuffers","yBuffers","push","xBuffer","Float32Array","yBuffer","fill","onaudioprocess","event","inputBuffer","outputBuffer","numberOfChannels","input","getChannelData","output","nyquist","nativeIIRFilterNodeFaker","value","context","inputs","numberOfInputs","numberOfOutputs","addEventListener","dispatchEvent","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","omega","PI","cos","sin","numerator","response","sqrt","atan2","removeEventListener"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\native-iir-filter-node-faker-factory.ts"],"sourcesContent":["import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativeIIRFilterNode, TNativeIIRFilterNodeFakerFactoryFactory } from '../types';\n\nfunction divide(a: [number, number], b: [number, number]): [number, number] {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a: [number, number], b: [number, number]): [number, number] {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient: Float64Array, z: [number, number]): [number, number] {\n    let result: [number, number] = [0, 0];\n\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n\n        result[0] += coefficient[i];\n    }\n\n    return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory: TNativeIIRFilterNodeFakerFactoryFactory = (\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n\n        const bufferLength = 32;\n        const bufferIndexes: number[] = [];\n        const xBuffers: Float32Array[] = [];\n        const yBuffers: Float32Array[] = [];\n\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n\n            const numberOfChannels = inputBuffer.numberOfChannels;\n\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n\n                bufferIndexes[i] = filterBuffer(\n                    convertedFeedback,\n                    feedbackLength,\n                    convertedFeedforward,\n                    feedforwardLength,\n                    minLength,\n                    xBuffers[i],\n                    yBuffers[i],\n                    bufferIndexes[i],\n                    bufferLength,\n                    input,\n                    output\n                );\n            }\n        };\n\n        const nyquist = nativeContext.sampleRate / 2;\n\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeIIRFilterNode['channelCountMode'] {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeIIRFilterNode['channelInterpretation'] {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context(): TNativeIIRFilterNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs(): number {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args: any[]): void {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n\n                const length = frequencyHz.length;\n\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z: [number, number] = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}