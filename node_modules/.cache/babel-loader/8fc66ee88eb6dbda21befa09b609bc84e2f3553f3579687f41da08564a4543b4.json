{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport var createIIRFilterNodeConstructor = function createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(IIRFilterNode, _audioNodeConstructor);\n    var _super = _createSuper(IIRFilterNode);\n    function IIRFilterNode(context, options) {\n      var _this;\n      _classCallCheck(this, IIRFilterNode);\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      var iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      _this = _super.call(this, context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n      // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      _this._nativeIIRFilterNode = nativeIIRFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n    _createClass(IIRFilterNode, [{\n      key: \"getFrequencyResponse\",\n      value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      }\n    }]);\n    return IIRFilterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,2CAA2C,QAAQ,+DAA+D;AAI3H,IAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE;CACjB;AAEV,OAAO,IAAMC,8BAA8B,GAAqC,SAAnEA,8BAA8B,CACvCC,oBAAoB,EACpBC,yBAAyB,EACzBC,2BAA2B,EAC3BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,EACpB;EACA;IAAA;IAAA;IAGI,uBACIC,OAAU,EACVC,OAAgI;MAAA;MAAA;MAEhI,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,SAAS,GAAGL,2BAA2B,CAACI,aAAa,CAAC;MAC5D,IAAME,aAAa,mCAAQf,eAAe,GAAKY,OAAO,CAAE;MACxD,IAAMI,mBAAmB,GAAGV,yBAAyB,CACjDO,aAAa,EACbC,SAAS,GAAG,IAAI,GAAgCH,OAAS,CAACM,WAAW,EACrEF,aAAa,CAChB;MACD,IAAMG,qBAAqB,GACtBJ,SAAS,GAAGP,2BAA2B,CAACQ,aAAa,CAACI,QAAQ,EAAEJ,aAAa,CAACK,WAAW,CAAC,GAAG,IACjG;MAED,0BAAMT,OAAO,EAAE,KAAK,EAAEK,mBAAmB,EAAEE,qBAAqB;MAEhE;MACA;MACAnB,2CAA2C,CAACiB,mBAAmB,CAAC;MAEhE,MAAKK,oBAAoB,GAAGL,mBAAmB;MAE/C;MACAN,oBAAoB,gCAAO,CAAC,CAAC;MAAC;IAClC;IAAC;MAAA;MAAA,OAEM,8BAAqBY,WAAyB,EAAEC,WAAyB,EAAEC,aAA2B;QACzG,OAAO,IAAI,CAACH,oBAAoB,CAACI,oBAAoB,CAACH,WAAW,EAAEC,WAAW,EAAEC,aAAa,CAAC;MAClG;IAAC;IAAA;EAAA,EAjCkDnB,oBAAuB;AAmClF,CAAC","names":["wrapIIRFilterNodeGetFrequencyResponseMethod","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createIIRFilterNodeConstructor","audioNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","isOffline","mergedOptions","nativeIIRFilterNode","baseLatency","iirFilterNodeRenderer","feedback","feedforward","_nativeIIRFilterNode","frequencyHz","magResponse","phaseResponse","getFrequencyResponse"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\iir-filter-node-constructor.ts"],"sourcesContent":["import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nimport { IIIRFilterNode, IIIRFilterOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TIIRFilterNodeConstructorFactory, TNativeIIRFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n} as const;\n\nexport const createIIRFilterNodeConstructor: TIIRFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeIIRFilterNode,\n    createIIRFilterNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class IIRFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IIIRFilterNode<T> {\n        private _nativeIIRFilterNode: TNativeIIRFilterNode;\n\n        constructor(\n            context: T,\n            options: { feedback: IIIRFilterOptions['feedback']; feedforward: IIIRFilterOptions['feedforward'] } & Partial<IIIRFilterOptions>\n        ) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(\n                nativeContext,\n                isOffline ? null : (<IMinimalAudioContext>(<any>context)).baseLatency,\n                mergedOptions\n            );\n            const iirFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null)\n            );\n\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}