{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport var DuoSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(DuoSynth, _Monophonic);\n  var _super = _createSuper(DuoSynth);\n  function DuoSynth() {\n    var _this;\n    _classCallCheck(this, DuoSynth);\n    _this = _super.call(this, optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    _this.name = \"DuoSynth\";\n    var options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    _this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: _this.context,\n      onsilence: function onsilence() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      }\n    }));\n    _this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: _this.context\n    }));\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    _this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: _this.context,\n      min: -50,\n      max: 50\n    });\n    // start the vibrato immediately\n    _this._vibrato.start();\n    _this.vibratoRate = _this._vibrato.frequency;\n    _this._vibratoGain = new Gain({\n      context: _this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    _this.vibratoAmount = _this._vibratoGain.gain;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    // control the two voices frequency\n    _this.frequency.connect(_this.voice0.frequency);\n    _this.frequency.chain(_this.harmonicity, _this.voice1.frequency);\n    _this._vibrato.connect(_this._vibratoGain);\n    _this._vibratoGain.fan(_this.voice0.detune, _this.voice1.detune);\n    _this.detune.fan(_this.voice0.detune, _this.voice1.detune);\n    _this.voice0.connect(_this.output);\n    _this.voice1.connect(_this.output);\n    readOnly(_assertThisInitialized(_this), [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n    return _this;\n  }\n  _createClass(DuoSynth, [{\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack portion of the note\n     */\n    function _triggerEnvelopeAttack(time, velocity) {\n      // @ts-ignore\n      this.voice0._triggerEnvelopeAttack(time, velocity);\n      // @ts-ignore\n      this.voice1._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      // @ts-ignore\n      this.voice0._triggerEnvelopeRelease(time);\n      // @ts-ignore\n      this.voice1._triggerEnvelopeRelease(time);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DuoSynth.prototype), \"dispose\", this).call(this);\n      this.voice0.dispose();\n      this.voice1.dispose();\n      this.frequency.dispose();\n      this.detune.dispose();\n      this._vibrato.dispose();\n      this.vibratoRate.dispose();\n      this._vibratoGain.dispose();\n      this.harmonicity.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), {\n        vibratoAmount: 0.5,\n        vibratoRate: 5,\n        harmonicity: 1.5,\n        voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n          filterEnvelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          },\n          envelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          }\n        }),\n        voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n          filterEnvelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          },\n          envelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          }\n        })\n      });\n    }\n  }]);\n  return DuoSynth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["Monophonic","MonoSynth","Signal","readOnly","LFO","Gain","Multiply","deepMerge","omitFromObject","optionsFromArguments","DuoSynth","getDefaults","arguments","options","voice0","Object","assign","context","onsilence","voice1","harmonicity","units","value","_vibrato","frequency","vibratoRate","min","max","start","_vibratoGain","gain","vibratoAmount","detune","connect","chain","fan","output","time","toSeconds","envelope","getValueAtTime","velocity","_triggerEnvelopeAttack","_triggerEnvelopeRelease","dispose","keys","filterEnvelope","attack","decay","sustain","release"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\DuoSynth.ts"],"sourcesContent":["import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const duoSynth = new Tone.DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, {\n\t\t\tcontext: this.context,\n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}