{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport var createMinimalAudioContextConstructor = function createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(MinimalAudioContext, _minimalBaseAudioCont);\n    var _super = _createSuper(MinimalAudioContext);\n    function MinimalAudioContext() {\n      var _this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _classCallCheck(this, MinimalAudioContext);\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n      var nativeAudioContext;\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n      // Bug #131 Safari returns null when there are four other AudioContexts running already.\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      }\n      // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(\"The provided value '\".concat(options.latencyHint, \"' is not a valid enum value of type AudioContextLatencyCategory.\"));\n      }\n      // Bug #150 Safari does not support setting the sampleRate.\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n      _this = _super.call(this, nativeAudioContext, 2);\n      var latencyHint = options.latencyHint;\n      var _nativeAudioContext = nativeAudioContext,\n        sampleRate = _nativeAudioContext.sampleRate;\n      // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n      _this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      _this._nativeAudioContext = nativeAudioContext;\n      // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        _this._nativeGainNode = nativeAudioContext.createGain();\n        _this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        _this._nativeGainNode.gain.value = 1e-37;\n        _this._nativeOscillatorNode.connect(_this._nativeGainNode).connect(nativeAudioContext.destination);\n        _this._nativeOscillatorNode.start();\n      } else {\n        _this._nativeGainNode = null;\n        _this._nativeOscillatorNode = null;\n      }\n      _this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n      if (nativeAudioContext.state === 'running') {\n        _this._state = 'suspended';\n        var revokeState = function revokeState() {\n          if (_this._state === 'suspended') {\n            _this._state = null;\n          }\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n      return _this;\n    }\n    _createClass(MinimalAudioContext, [{\n      key: \"baseLatency\",\n      get: function get() {\n        return this._baseLatency;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state !== null ? this._state : this._nativeAudioContext.state;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        var _this2 = this;\n        // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n        if (this.state === 'closed') {\n          return this._nativeAudioContext.close().then(function () {\n            throw createInvalidStateError();\n          });\n        }\n        // Bug #34: If the state was set to suspended before it should be revoked now.\n        if (this._state === 'suspended') {\n          this._state = null;\n        }\n        return this._nativeAudioContext.close().then(function () {\n          if (_this2._nativeGainNode !== null && _this2._nativeOscillatorNode !== null) {\n            _this2._nativeOscillatorNode.stop();\n            _this2._nativeGainNode.disconnect();\n            _this2._nativeOscillatorNode.disconnect();\n          }\n          deactivateAudioGraph(_this2);\n        });\n      }\n    }, {\n      key: \"resume\",\n      value: function resume() {\n        var _this3 = this;\n        if (this._state === 'suspended') {\n          return new Promise(function (resolve, reject) {\n            var resolvePromise = function resolvePromise() {\n              _this3._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n              if (_this3._nativeAudioContext.state === 'running') {\n                resolve();\n              } else {\n                _this3.resume().then(resolve, reject);\n              }\n            };\n            _this3._nativeAudioContext.addEventListener('statechange', resolvePromise);\n          });\n        }\n        return this._nativeAudioContext.resume().catch(function (err) {\n          // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined || err.code === 15) {\n            throw createInvalidStateError();\n          }\n          throw err;\n        });\n      }\n    }, {\n      key: \"suspend\",\n      value: function suspend() {\n        return this._nativeAudioContext.suspend().catch(function (err) {\n          // Bug #56: Safari invokes the catch handler but without an error.\n          if (err === undefined) {\n            throw createInvalidStateError();\n          }\n          throw err;\n        });\n      }\n    }]);\n    return MinimalAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["deactivateAudioGraph","isValidLatencyHint","createMinimalAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","minimalBaseAudioContextConstructor","nativeAudioContextConstructor","options","Error","nativeAudioContext","err","code","message","latencyHint","TypeError","sampleRate","undefined","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","name","_nativeGainNode","createGain","_nativeOscillatorNode","createOscillator","gain","value","connect","destination","start","_state","state","revokeState","removeEventListener","addEventListener","close","then","stop","disconnect","Promise","resolve","reject","resolvePromise","resume","catch","suspend"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\minimal-audio-context-constructor.ts"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nimport { IAudioContextOptions, IMinimalAudioContext } from '../interfaces';\nimport {\n    TAudioContextState,\n    TMinimalAudioContextConstructorFactory,\n    TNativeAudioContext,\n    TNativeGainNode,\n    TNativeOscillatorNode\n} from '../types';\n\nexport const createMinimalAudioContextConstructor: TMinimalAudioContextConstructorFactory = (\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor<IMinimalAudioContext> implements IMinimalAudioContext {\n        private _baseLatency: number;\n\n        private _nativeAudioContext: TNativeAudioContext;\n\n        private _nativeGainNode: null | TNativeGainNode;\n\n        private _nativeOscillatorNode: null | TNativeOscillatorNode;\n\n        private _state: null | 'suspended';\n\n        constructor(options: IAudioContextOptions = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n\n            let nativeAudioContext: TNativeAudioContext;\n\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            } catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(\n                    `The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`\n                );\n            }\n\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n\n            super(nativeAudioContext, 2);\n\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                    ? 512 / sampleRate\n                    : latencyHint === 'interactive' || latencyHint === undefined\n                    ? 256 / sampleRate\n                    : latencyHint === 'playback'\n                    ? 1024 / sampleRate\n                    : /*\n                       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                       * ScriptProcessorNode.\n                       */\n                      (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n\n                this._nativeGainNode.gain.value = 1e-37;\n\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            } else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n\n            this._state = null;\n\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n\n        get baseLatency(): number {\n            return this._baseLatency;\n        }\n\n        get state(): TAudioContextState {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n\n        public close(): Promise<void> {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        public resume(): Promise<void> {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        } else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n\n        public suspend(): Promise<void> {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}