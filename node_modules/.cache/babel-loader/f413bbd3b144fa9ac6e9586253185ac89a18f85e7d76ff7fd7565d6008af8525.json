{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport var Filter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Filter, _ToneAudioNode);\n  var _super = _createSuper(Filter);\n  function Filter() {\n    var _this;\n    _classCallCheck(this, Filter);\n    _this = _super.call(this, optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    _this.name = \"Filter\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._filters = [];\n    var options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    _this._filters = [];\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.gain = new Signal({\n      context: _this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain\n    });\n    _this._type = options.type;\n    _this.rolloff = options.rolloff;\n    readOnly(_assertThisInitialized(_this), [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    return _this;\n  }\n  _createClass(Filter, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._type = type;\n      this._filters.forEach(function (filter) {\n        return filter.type = type;\n      });\n    }\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n  }, {\n    key: \"rolloff\",\n    get: function get() {\n      return this._rolloff;\n    },\n    set: function set(rolloff) {\n      var rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n      var possibilities = [-12, -24, -48, -96];\n      var cascadingCount = possibilities.indexOf(rolloffNum);\n      // check the rolloff is valid\n      assert(cascadingCount !== -1, \"rolloff can only be \".concat(possibilities.join(\", \")));\n      cascadingCount += 1;\n      this._rolloff = rolloffNum;\n      this.input.disconnect();\n      this._filters.forEach(function (filter) {\n        return filter.disconnect();\n      });\n      this._filters = new Array(cascadingCount);\n      for (var count = 0; count < cascadingCount; count++) {\n        var filter = new BiquadFilter({\n          context: this.context\n        });\n        filter.type = this._type;\n        this.frequency.connect(filter.frequency);\n        this.detune.connect(filter.detune);\n        this.Q.connect(filter.Q);\n        this.gain.connect(filter.gain);\n        this._filters[count] = filter;\n      }\n      this._internalChannels = this._filters;\n      connectSeries.apply(void 0, [this.input].concat(_toConsumableArray(this._internalChannels), [this.output]));\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var filterClone = new BiquadFilter({\n        frequency: this.frequency.value,\n        gain: this.gain.value,\n        Q: this.Q.value,\n        type: this._type,\n        detune: this.detune.value\n      });\n      // start with all 1s\n      var totalResponse = new Float32Array(len).map(function () {\n        return 1;\n      });\n      this._filters.forEach(function () {\n        var response = filterClone.getFrequencyResponse(len);\n        response.forEach(function (val, i) {\n          return totalResponse[i] *= val;\n        });\n      });\n      filterClone.dispose();\n      return totalResponse;\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Filter.prototype), \"dispose\", this).call(this);\n      this._filters.forEach(function (filter) {\n        filter.dispose();\n      });\n      writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n      this.frequency.dispose();\n      this.Q.dispose();\n      this.detune.dispose();\n      this.gain.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        detune: 0,\n        frequency: 350,\n        gain: 0,\n        rolloff: -12,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n  return Filter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","writable","isNumber","Signal","assert","BiquadFilter","Filter","getDefaults","arguments","context","options","_filters","Q","units","value","frequency","detune","gain","convert","_type","type","rolloff","types","indexOf","forEach","filter","_rolloff","rolloffNum","parseInt","possibilities","cascadingCount","join","input","disconnect","Array","count","connect","_internalChannels","output","len","filterClone","totalResponse","Float32Array","map","response","getFrequencyResponse","val","i","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\filter\\Filter.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter, BiquadFilterOptions } from \"./BiquadFilter\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport type FilterOptions = BiquadFilterOptions & {\n\trolloff: FilterRollOff;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilter[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tassert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = new BiquadFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst filterClone = new BiquadFilter({\n\t\t\tfrequency: this.frequency.value,\n\t\t\tgain: this.gain.value,\n\t\t\tQ: this.Q.value,\n\t\t\ttype: this._type,\n\t\t\tdetune: this.detune.value,\n\t\t});\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst response = filterClone.getFrequencyResponse(len);\n\t\t\tresponse.forEach((val, i) => totalResponse[i] *= val);\n\t\t});\n\t\tfilterClone.dispose();\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.dispose();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}