{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport var PluckSynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(PluckSynth, _Instrument);\n  var _super = _createSuper(PluckSynth);\n  function PluckSynth() {\n    var _this;\n    _classCallCheck(this, PluckSynth);\n    _this = _super.call(this, optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    _this.name = \"PluckSynth\";\n    var options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    _this._noise = new Noise({\n      context: _this.context,\n      type: \"pink\"\n    });\n    _this.attackNoise = options.attackNoise;\n    _this._lfcf = new LowpassCombFilter({\n      context: _this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    _this.resonance = options.resonance;\n    _this.release = options.release;\n    _this._noise.connect(_this._lfcf);\n    _this._lfcf.connect(_this.output);\n    return _this;\n  }\n  _createClass(PluckSynth, [{\n    key: \"dampening\",\n    get:\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    function get() {\n      return this._lfcf.dampening;\n    },\n    set: function set(fq) {\n      this._lfcf.dampening = fq;\n    }\n  }, {\n    key: \"triggerAttack\",\n    value: function triggerAttack(note, time) {\n      var freq = this.toFrequency(note);\n      time = this.toSeconds(time);\n      var delayAmount = 1 / freq;\n      this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n      this._noise.start(time);\n      this._noise.stop(time + delayAmount * this.attackNoise);\n      this._lfcf.resonance.cancelScheduledValues(time);\n      this._lfcf.resonance.setValueAtTime(this.resonance, time);\n      return this;\n    }\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      this._lfcf.resonance.linearRampTo(0, this.release, time);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PluckSynth.prototype), \"dispose\", this).call(this);\n      this._noise.dispose();\n      this._lfcf.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Instrument.getDefaults(), {\n        attackNoise: 1,\n        dampening: 4000,\n        resonance: 0.7,\n        release: 1\n      });\n    }\n  }]);\n  return PluckSynth;\n}(Instrument);","map":{"version":3,"mappings":"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","names":["LowpassCombFilter","deepMerge","optionsFromArguments","Noise","Instrument","PluckSynth","getDefaults","arguments","options","_noise","context","type","attackNoise","_lfcf","dampening","resonance","release","connect","output","fq","note","time","freq","toFrequency","toSeconds","delayAmount","delayTime","setValueAtTime","start","stop","cancelScheduledValues","linearRampTo","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\PluckSynth.ts"],"sourcesContent":["import { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\n\nexport interface PluckSynthOptions extends InstrumentOptions {\n\tattackNoise: number;\n\tdampening: Frequency;\n\tresonance: NormalRange;\n\trelease: Time;\n}\n\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument<PluckSynthOptions> {\n\n\treadonly name = \"PluckSynth\";\n\n\t/**\n\t * Noise burst at the beginning\n\t */\n\tprivate _noise: Noise;\n\tprivate _lfcf: LowpassCombFilter;\n\n\t/**\n\t * The amount of noise at the attack.\n\t * Nominal range of [0.1, 20]\n\t * @min 0.1\n\t * @max 20\n\t */\n\tattackNoise: number;\n\n\t/**\n\t * The amount of resonance of the pluck. Also correlates to the sustain duration.\n\t */\n\tresonance: NormalRange;\n\n\t/**\n\t * The release time which corresponds to a resonance ramp down to 0\n\t */\n\trelease: Time;\n\n\tconstructor(options?: RecursivePartial<PluckSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n\n\t\tthis._noise = new Noise({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"pink\"\n\t\t});\n\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\tthis._lfcf = new LowpassCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdampening: options.dampening,\n\t\t\tresonance: options.resonance,\n\t\t});\n\n\t\tthis.resonance = options.resonance;\n\t\tthis.release = options.release;\n\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t}\n\n\tstatic getDefaults(): PluckSynthOptions {\n\t\treturn deepMerge(Instrument.getDefaults(), {\n\t\t\tattackNoise: 1,\n\t\t\tdampening: 4000,\n\t\t\tresonance: 0.7,\n\t\t\trelease: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t * @min 0\n\t * @max 7000\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lfcf.dampening;\n\t}\n\tset dampening(fq) {\n\t\tthis._lfcf.dampening = fq;\n\t}\n\n\ttriggerAttack(note: Frequency, time?: Time): this {\n\t\tconst freq = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tconst delayAmount = 1 / freq;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\tthis._lfcf.resonance.cancelScheduledValues(time);\n\t\tthis._lfcf.resonance.setValueAtTime(this.resonance, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ramp down the [[resonance]] to 0 over the duration of the release time.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis._lfcf.resonance.linearRampTo(0, this.release, time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}