{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport var AutoFilter = /*#__PURE__*/function (_LFOEffect) {\n  _inherits(AutoFilter, _LFOEffect);\n  var _super = _createSuper(AutoFilter);\n  function AutoFilter() {\n    var _this;\n    _classCallCheck(this, AutoFilter);\n    _this = _super.call(this, optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    _this.name = \"AutoFilter\";\n    var options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    }));\n    // connections\n    _this.connectEffect(_this.filter);\n    _this._lfo.connect(_this.filter.frequency);\n    _this.octaves = options.octaves;\n    _this.baseFrequency = options.baseFrequency;\n    return _this;\n  }\n  _createClass(AutoFilter, [{\n    key: \"baseFrequency\",\n    get:\n    /**\n     * The minimum value of the filter's cutoff frequency.\n     */\n    function get() {\n      return this._lfo.min;\n    },\n    set: function set(freq) {\n      this._lfo.min = this.toFrequency(freq);\n      // and set the max\n      this.octaves = this._octaves;\n    }\n    /**\n     * The maximum value of the filter's cutoff frequency.\n     */\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(oct) {\n      this._octaves = oct;\n      this._lfo.max = this._lfo.min * Math.pow(2, oct);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoFilter.prototype), \"dispose\", this).call(this);\n      this.filter.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(LFOEffect.getDefaults(), {\n        baseFrequency: 200,\n        octaves: 2.6,\n        filter: {\n          type: \"lowpass\",\n          rolloff: -12,\n          Q: 1\n        }\n      });\n    }\n  }]);\n  return AutoFilter;\n}(LFOEffect);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,MAAM,QAAuB,4BAA4B;AAElE,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,SAAS,QAA0B,aAAa;AAQzD;;;;;;;;;;;;AAYA,WAAaC,UAAW;EAAA;EAAA;EAqBvB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;IArBlG,UAAI,GAAW,YAAY;IAsBnC,IAAMC,OAAO,GAAGL,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;IAEpH,MAAKE,MAAM,GAAG,IAAIP,MAAM,CAACQ,MAAM,CAACC,MAAM,CAACH,OAAO,CAACC,MAAM,EAAE;MACtDG,OAAO,EAAE,MAAKA;KACd,CAAC,CAAC;IAEH;IACA,MAAKC,aAAa,CAAC,MAAKJ,MAAM,CAAC;IAC/B,MAAKK,IAAI,CAACC,OAAO,CAAC,MAAKN,MAAM,CAACO,SAAS,CAAC;IACxC,MAAKC,OAAO,GAAGT,OAAO,CAACS,OAAO;IAC9B,MAAKC,aAAa,GAAGV,OAAO,CAACU,aAAa;IAAC;EAC5C;EAAC;IAAA;IAAA;IAcD;;;IAGA,eAAiB;MAChB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG;IACrB,CAAC;IAAA,KACD,aAAkBC,IAAI;MACrB,IAAI,CAACN,IAAI,CAACK,GAAG,GAAG,IAAI,CAACE,WAAW,CAACD,IAAI,CAAC;MACtC;MACA,IAAI,CAACH,OAAO,GAAG,IAAI,CAACK,QAAQ;IAC7B;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAW;MACV,OAAO,IAAI,CAACA,QAAQ;IACrB,CAAC;IAAA,KACD,aAAYC,GAAG;MACd,IAAI,CAACD,QAAQ,GAAGC,GAAG;MACnB,IAAI,CAACT,IAAI,CAACU,GAAG,GAAG,IAAI,CAACV,IAAI,CAACK,GAAG,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,GAAG,CAAC;IACjD;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACd,MAAM,CAACkB,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAvCD,uBAAkB;MACjB,OAAOjB,MAAM,CAACC,MAAM,CAACP,SAAS,CAACE,WAAW,EAAE,EAAE;QAC7CY,aAAa,EAAE,GAAG;QAClBD,OAAO,EAAE,GAAG;QACZR,MAAM,EAAE;UACPmB,IAAI,EAAE,SAAsB;UAC5BC,OAAO,EAAE,CAAC,EAAS;UACnBC,CAAC,EAAE;;OAEJ,CAAC;IACH;EAAC;EAAA;AAAA,EA/C8B1B,SAA4B","names":["Filter","optionsFromArguments","LFOEffect","AutoFilter","getDefaults","arguments","options","filter","Object","assign","context","connectEffect","_lfo","connect","frequency","octaves","baseFrequency","min","freq","toFrequency","_octaves","oct","max","Math","pow","dispose","type","rolloff","Q"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\AutoFilter.ts"],"sourcesContent":["import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}