{"ast":null,"code":"//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n/**\n * Array of callbacks to invoke when a new context is created\n */\nvar notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(function (cb) {\n    return cb(ctx);\n  });\n}\n/**\n * Array of callbacks to invoke when a new context is created\n */\nvar notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // add any additional modules\n  notifyCloseContext.forEach(function (cb) {\n    return cb(ctx);\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAIA;;;AAGA,IAAMA,gBAAgB,GAAkC,EAAE;AAE1D;;;AAGA,OAAM,SAAUC,aAAa,CAACC,EAA0B;EACvDF,gBAAgB,CAACG,IAAI,CAACD,EAAE,CAAC;AAC1B;AAEA;;;AAGA,OAAM,SAAUE,iBAAiB,CAACC,GAAY;EAC7C;EACAL,gBAAgB,CAACM,OAAO,CAAC,YAAE;IAAA,OAAIJ,EAAE,CAACG,GAAG,CAAC;EAAA,EAAC;AACxC;AAEA;;;AAGA,IAAME,kBAAkB,GAAkC,EAAE;AAE5D;;;AAGA,OAAM,SAAUC,cAAc,CAACN,EAA0B;EACxDK,kBAAkB,CAACJ,IAAI,CAACD,EAAE,CAAC;AAC5B;AAEA,OAAM,SAAUO,YAAY,CAACJ,GAAY;EACxC;EACAE,kBAAkB,CAACD,OAAO,CAAC,YAAE;IAAA,OAAIJ,EAAE,CAACG,GAAG,CAAC;EAAA,EAAC;AAC1C","names":["notifyNewContext","onContextInit","cb","push","initializeContext","ctx","forEach","notifyCloseContext","onContextClose","closeContext"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\context\\ContextInitialization.ts"],"sourcesContent":["//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}