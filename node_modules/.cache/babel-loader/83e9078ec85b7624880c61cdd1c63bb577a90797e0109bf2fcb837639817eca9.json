{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport var CrossFade = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(CrossFade, _ToneAudioNode);\n  var _super = _createSuper(CrossFade);\n  function CrossFade() {\n    var _this;\n    _classCallCheck(this, CrossFade);\n    _this = _super.call(this, Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    _this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n    _this._panner = _this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n    _this._split = _this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n    _this._g2a = new GainToAudio({\n      context: _this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n    _this.a = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n    _this.b = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [_this.a, _this.b];\n    var options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    _this.fade = new Signal({\n      context: _this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(_assertThisInitialized(_this), \"fade\");\n    _this.context.getConstant(1).connect(_this._panner);\n    _this._panner.connect(_this._split);\n    // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n    _this._panner.channelCount = 1;\n    _this._panner.channelCountMode = \"explicit\";\n    connect(_this._split, _this.a.gain, 0);\n    connect(_this._split, _this.b.gain, 1);\n    _this.fade.chain(_this._g2a, _this._panner.pan);\n    _this.a.connect(_this.output);\n    _this.b.connect(_this.output);\n    return _this;\n  }\n  _createClass(CrossFade, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(CrossFade.prototype), \"dispose\", this).call(this);\n      this.a.dispose();\n      this.b.dispose();\n      this.output.dispose();\n      this.fade.dispose();\n      this._g2a.dispose();\n      this._panner.disconnect();\n      this._split.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        fade: 0.5\n      });\n    }\n  }]);\n  return CrossFade;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","connect","ToneAudioNode","optionsFromArguments","readOnly","GainToAudio","Signal","CrossFade","Object","assign","getDefaults","arguments","context","createStereoPanner","createChannelSplitter","gain","a","b","options","fade","units","value","getConstant","_panner","_split","channelCount","channelCountMode","chain","_g2a","pan","output","dispose","disconnect"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\CrossFade.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}