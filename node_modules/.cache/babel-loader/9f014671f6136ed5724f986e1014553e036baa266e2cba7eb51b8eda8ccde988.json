{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport var Merge = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Merge, _ToneAudioNode);\n  var _super = _createSuper(Merge);\n  function Merge() {\n    var _this;\n    _classCallCheck(this, Merge);\n    _this = _super.call(this, optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n    _this.name = \"Merge\";\n    var options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    _this._merger = _this.output = _this.input = _this.context.createChannelMerger(options.channels);\n    return _this;\n  }\n  _createClass(Merge, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Merge.prototype), \"dispose\", this).call(this);\n      this._merger.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        channels: 2\n      });\n    }\n  }]);\n  return Merge;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAM/D;;;;;;;;;;;AAWA,WAAaC,KAAM;EAAA;EAAA;EAwBlB;IAAA;IAAA;IACC,0BAAMD,oBAAoB,CAACC,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAvBhE,UAAI,GAAW,OAAO;IAwB9B,IAAMC,OAAO,GAAGJ,oBAAoB,CAACC,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAElF,MAAKE,OAAO,GAAG,MAAKC,MAAM,GAAG,MAAKC,KAAK,GAAG,MAAKC,OAAO,CAACC,mBAAmB,CAACL,OAAO,CAACM,QAAQ,CAAC;IAAC;EAC9F;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACL,OAAO,CAACM,UAAU,EAAE;MACzB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACd,aAAa,CAACG,WAAW,EAAE,EAAE;QACjDQ,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EAnCyBX,aAA2B","names":["ToneAudioNode","optionsFromArguments","Merge","getDefaults","arguments","options","_merger","output","input","context","createChannelMerger","channels","disconnect","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Merge.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}