{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport var createMonitorConnections = function createMonitorConnections(insertElementInSet, isNativeAudioNode) {\n  return function (nativeAudioNode, whenConnected, whenDisconnected) {\n    var connections = new Set();\n    nativeAudioNode.connect = function (connect) {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return function (destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var wasDisconnected = connections.size === 0;\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], function (connection) {\n            return connection[0] === destination && connection[1] === output && connection[2] === input;\n          }, true);\n          if (wasDisconnected) {\n            whenConnected();\n          }\n          return destination;\n        }\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], function (connection) {\n          return connection[0] === destination && connection[1] === output;\n        }, true);\n        if (wasDisconnected) {\n          whenConnected();\n        }\n        return;\n      };\n    }(nativeAudioNode.connect);\n    nativeAudioNode.disconnect = function (disconnect) {\n      return function (destinationOrOutput, output, input) {\n        var wasConnected = connections.size > 0;\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n          var _iterator = _createForOfIteratorHelper(connections),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var connection = _step.value;\n              if (connection[1] === destinationOrOutput) {\n                connections.delete(connection);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n          var _iterator2 = _createForOfIteratorHelper(connections),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _connection = _step2.value;\n              if (_connection[0] === destinationOrOutput && (output === undefined || _connection[1] === output) && (input === undefined || _connection[2] === input)) {\n                connections.delete(_connection);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        var isDisconnected = connections.size === 0;\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    }(nativeAudioNode.disconnect);\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"mappings":";AAEA,OAAO,IAAMA,wBAAwB,GAA+B,SAAvDA,wBAAwB,CAAgCC,kBAAkB,EAAEC,iBAAiB,EAAI;EAC1G,OAAO,UAACC,eAAe,EAAEC,aAAa,EAAEC,gBAAgB,EAAI;IACxD,IAAMC,WAAW,GAAG,IAAIC,GAAG,EAAoE;IAE/FJ,eAAe,CAACK,OAAO,GAAiC,UAACA,OAAO,EAAI;MAChE;MACA,OAAO,UAACC,WAAiD,EAA4D;QAAA,IAA1DC,MAAM,uEAAG,CAAC;QAAA,IAAEC,4EAAgB,CAAC;QACpF,IAAMC,eAAe,GAAGN,WAAW,CAACO,IAAI,KAAK,CAAC;QAE9C,IAAIX,iBAAiB,CAACO,WAAW,CAAC,EAAE;UAChC;UACuFD,OAAQ,CAACM,IAAI,CAChGX,eAAe,EACfM,WAAW,EACXC,MAAM,EACNC,KAAK,CACR;UAEDV,kBAAkB,CACdK,WAAW,EACX,CAACG,WAAW,EAAEC,MAAM,EAAEC,KAAK,CAAC,EAC5B,UAACI,UAAU;YAAA,OAAKA,UAAU,CAAC,CAAC,CAAC,KAAKN,WAAW,IAAIM,UAAU,CAAC,CAAC,CAAC,KAAKL,MAAM,IAAIK,UAAU,CAAC,CAAC,CAAC,KAAKJ,KAAK;UAAA,GACpG,IAAI,CACP;UAED,IAAIC,eAAe,EAAE;YACjBR,aAAa,EAAE;;UAGnB,OAAOK,WAAW;;QAGtBD,OAAO,CAACM,IAAI,CAACX,eAAe,EAAEM,WAAW,EAAEC,MAAM,CAAC;QAElDT,kBAAkB,CACdK,WAAW,EACX,CAACG,WAAW,EAAEC,MAAM,CAAC,EACrB,UAACK,UAAU;UAAA,OAAKA,UAAU,CAAC,CAAC,CAAC,KAAKN,WAAW,IAAIM,UAAU,CAAC,CAAC,CAAC,KAAKL,MAAM;QAAA,GACzE,IAAI,CACP;QAED,IAAIE,eAAe,EAAE;UACjBR,aAAa,EAAE;;QAGnB;MACJ,CAAC;IACL,CAAC,CAAED,eAAe,CAACK,OAAO,CAAC;IAE3BL,eAAe,CAACa,UAAU,GAAI,UAACA,UAAU,EAAI;MACzC,OAAO,UAACC,mBAAmE,EAAEP,MAAe,EAAEC,KAAc,EAAU;QAClH,IAAMO,YAAY,GAAGZ,WAAW,CAACO,IAAI,GAAG,CAAC;QAEzC,IAAII,mBAAmB,KAAKE,SAAS,EAAE;UACnCH,UAAU,CAACI,KAAK,CAACjB,eAAe,CAAC;UAEjCG,WAAW,CAACe,KAAK,EAAE;SACtB,MAAM,IAAI,OAAOJ,mBAAmB,KAAK,QAAQ,EAAE;UAChD;UAC2BD,UAAW,CAACF,IAAI,CAACX,eAAe,EAAEc,mBAAmB,CAAC;UAAC,2CAEzDX,WAAW;YAAA;UAAA;YAApC,oDAAsC;cAAA,IAA3BS,UAAU;cACjB,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAKE,mBAAmB,EAAE;gBACvCX,WAAW,CAACgB,MAAM,CAACP,UAAU,CAAC;;;UAErC;YAAA;UAAA;YAAA;UAAA;SACJ,MAAM;UACH,IAAIb,iBAAiB,CAACe,mBAAmB,CAAC,EAAE;YACxC;YAC2ED,UAAW,CAACF,IAAI,CACvFX,eAAe,EACfc,mBAAmB,EACnBP,MAAM,EACNC,KAAK,CACR;WACJ,MAAM;YACH;YAC4DK,UAAW,CAACF,IAAI,CACxEX,eAAe,EACfc,mBAAmB,EACnBP,MAAM,CACT;;UACJ,4CAEwBJ,WAAW;YAAA;UAAA;YAApC,uDAAsC;cAAA,IAA3BS,WAAU;cACjB,IACIA,WAAU,CAAC,CAAC,CAAC,KAAKE,mBAAmB,KACpCP,MAAM,KAAKS,SAAS,IAAIJ,WAAU,CAAC,CAAC,CAAC,KAAKL,MAAM,CAAC,KACjDC,KAAK,KAAKQ,SAAS,IAAIJ,WAAU,CAAC,CAAC,CAAC,KAAKJ,KAAK,CAAC,EAClD;gBACEL,WAAW,CAACgB,MAAM,CAACP,WAAU,CAAC;;;UAErC;YAAA;UAAA;YAAA;UAAA;;QAGL,IAAMQ,cAAc,GAAGjB,WAAW,CAACO,IAAI,KAAK,CAAC;QAE7C,IAAIK,YAAY,IAAIK,cAAc,EAAE;UAChClB,gBAAgB,EAAE;;MAE1B,CAAC;IACL,CAAC,CAAEF,eAAe,CAACa,UAAU,CAAC;IAE9B,OAAOb,eAAe;EAC1B,CAAC;AACL,CAAC","names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","undefined","apply","clear","delete","isDisconnected"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\monitor-connections.ts"],"sourcesContent":["import { TMonitorConnectionsFactory, TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const createMonitorConnections: TMonitorConnectionsFactory = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set<[TNativeAudioNode, number, number] | [TNativeAudioParam, number]>();\n\n        nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n                const wasDisconnected = connections.size === 0;\n\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    (<(destination: TNativeAudioNode, output?: number, input?: number) => TNativeAudioNode>connect).call(\n                        nativeAudioNode,\n                        destination,\n                        output,\n                        input\n                    );\n\n                    insertElementInSet(\n                        connections,\n                        [destination, output, input],\n                        (connection) => connection[0] === destination && connection[1] === output && connection[2] === input,\n                        true\n                    );\n\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n\n                    return destination;\n                }\n\n                connect.call(nativeAudioNode, destination, output);\n\n                insertElementInSet(\n                    connections,\n                    [destination, output],\n                    (connection) => connection[0] === destination && connection[1] === output,\n                    true\n                );\n\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n\n                return;\n            };\n        })(nativeAudioNode.connect);\n\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n                const wasConnected = connections.size > 0;\n\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n\n                    connections.clear();\n                } else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    (<(output: number) => void>disconnect).call(nativeAudioNode, destinationOrOutput);\n\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                } else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        (<(destination: TNativeAudioNode, output?: number, input?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output,\n                            input\n                        );\n                    } else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        (<(destination: TNativeAudioParam, output?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output\n                        );\n                    }\n\n                    for (const connection of connections) {\n                        if (\n                            connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)\n                        ) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n\n                const isDisconnected = connections.size === 0;\n\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n\n        return nativeAudioNode;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}