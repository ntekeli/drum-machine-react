{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport var OnePoleFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OnePoleFilter, _ToneAudioNode);\n  var _super = _createSuper(OnePoleFilter);\n  function OnePoleFilter() {\n    var _this;\n    _classCallCheck(this, OnePoleFilter);\n    _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"OnePoleFilter\";\n    var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._frequency = options.frequency;\n    _this._type = options.type;\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._createFilter();\n    return _this;\n  }\n  _createClass(OnePoleFilter, [{\n    key: \"_createFilter\",\n    value:\n    /**\n     * Create a filter and dispose the old one\n     */\n    function _createFilter() {\n      var _this2 = this;\n      var oldFilter = this._filter;\n      var freq = this.toFrequency(this._frequency);\n      var t = 1 / (2 * Math.PI * freq);\n      if (this._type === \"lowpass\") {\n        var a0 = 1 / (t * this.context.sampleRate);\n        var b1 = a0 - 1;\n        this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n      } else {\n        var _b = 1 / (t * this.context.sampleRate) - 1;\n        this._filter = this.context.createIIRFilter([1, -1], [1, _b]);\n      }\n      this.input.chain(this._filter, this.output);\n      if (oldFilter) {\n        // dispose it on the next block\n        this.context.setTimeout(function () {\n          if (!_this2.disposed) {\n            _this2.input.disconnect(oldFilter);\n            oldFilter.disconnect();\n          }\n        }, this.blockTime);\n      }\n    }\n    /**\n     * The frequency value.\n     */\n  }, {\n    key: \"frequency\",\n    get: function get() {\n      return this._frequency;\n    },\n    set: function set(fq) {\n      this._frequency = fq;\n      this._createFilter();\n    }\n    /**\n     * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(t) {\n      this._type = t;\n      this._createFilter();\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var freqValues = new Float32Array(len);\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n      this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OnePoleFilter.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this.output.dispose();\n      this._filter.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        frequency: 880,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n  return OnePoleFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Gain","OnePoleFilter","getDefaults","arguments","options","_frequency","frequency","_type","type","input","context","output","_createFilter","oldFilter","_filter","freq","toFrequency","t","Math","PI","a0","sampleRate","b1","createIIRFilter","chain","setTimeout","disposed","disconnect","blockTime","fq","len","freqValues","Float32Array","i","norm","pow","magValues","phaseValues","getFrequencyResponse","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\filter\\OnePoleFilter.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}