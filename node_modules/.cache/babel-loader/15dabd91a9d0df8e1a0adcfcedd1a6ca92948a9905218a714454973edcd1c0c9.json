{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createAudioDestinationNodeConstructor = function createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioDestinationNode, _audioNodeConstructor);\n    var _super = _createSuper(AudioDestinationNode);\n    function AudioDestinationNode(context, channelCount) {\n      var _this;\n      _classCallCheck(this, AudioDestinationNode);\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      var audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      _this = _super.call(this, context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      _this._isNodeOfNativeOfflineAudioContext = isOffline;\n      _this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n      return _this;\n    }\n    _createClass(AudioDestinationNode, [{\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCount;\n      },\n      set: function set(value) {\n        // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n        // Bug #54: Firefox does throw an IndexSizeError.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        }\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n          throw createIndexSizeError();\n        }\n        this._nativeAudioDestinationNode.channelCount = value;\n      }\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.channelCountMode;\n      },\n      set: function set(value) {\n        // Bug #53: No browser does throw an exception yet.\n        if (this._isNodeOfNativeOfflineAudioContext) {\n          throw createInvalidStateError();\n        }\n        this._nativeAudioDestinationNode.channelCountMode = value;\n      }\n    }, {\n      key: \"maxChannelCount\",\n      get: function get() {\n        return this._nativeAudioDestinationNode.maxChannelCount;\n      }\n    }]);\n    return AudioDestinationNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;AASA,OAAO,IAAMA,qCAAqC,GAA4C,SAAjFA,qCAAqC,CAC9CC,oBAAoB,EACpBC,kCAAkC,EAClCC,oBAAoB,EACpBC,uBAAuB,EACvBC,gCAAgC,EAChCC,gBAAgB,EAChBC,2BAA2B,EAC3BC,uBAAuB,EACvB;EACA;IAAA;IAAA;IAKI,8BAAYC,OAAU,EAAEC,YAAoB;MAAA;MAAA;MACxC,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,SAAS,GAAGL,2BAA2B,CAACI,aAAa,CAAC;MAC5D,IAAME,0BAA0B,GAAGR,gCAAgC,CAACM,aAAa,EAAED,YAAY,EAAEE,SAAS,CAAC;MAC3G,IAAME,4BAA4B,GAC7BF,SAAS,GAAGV,kCAAkC,CAACM,uBAAuB,CAAC,GAAG,IAC9E;MAED,0BAAMC,OAAO,EAAE,KAAK,EAAEI,0BAA0B,EAAEC,4BAA4B;MAE9E,MAAKC,kCAAkC,GAAGH,SAAS;MACnD,MAAKI,2BAA2B,GAAGH,0BAA0B;MAAC;IAClE;IAAC;MAAA;MAAA,KAED,eAAgB;QACZ,OAAO,IAAI,CAACG,2BAA2B,CAACN,YAAY;MACxD,CAAC;MAAA,KAED,aAAiBO,KAAK;QAClB;QACA;QACA,IAAI,IAAI,CAACF,kCAAkC,EAAE;UACzC,MAAMX,uBAAuB,EAAE;;QAGnC;QACA,IAAIa,KAAK,GAAG,IAAI,CAACD,2BAA2B,CAACE,eAAe,EAAE;UAC1D,MAAMf,oBAAoB,EAAE;;QAGhC,IAAI,CAACa,2BAA2B,CAACN,YAAY,GAAGO,KAAK;MACzD;IAAC;MAAA;MAAA,KAED,eAAoB;QAChB,OAAO,IAAI,CAACD,2BAA2B,CAACG,gBAAgB;MAC5D,CAAC;MAAA,KAED,aAAqBF,KAAK;QACtB;QACA,IAAI,IAAI,CAACF,kCAAkC,EAAE;UACzC,MAAMX,uBAAuB,EAAE;;QAGnC,IAAI,CAACY,2BAA2B,CAACG,gBAAgB,GAAGF,KAAK;MAC7D;IAAC;MAAA;MAAA,KAED,eAAmB;QACf,OAAO,IAAI,CAACD,2BAA2B,CAACE,eAAe;MAC3D;IAAC;IAAA;EAAA,EArDyDjB,oBAAuB;AAuDzF,CAAC","names":["createAudioDestinationNodeConstructor","audioNodeConstructor","createAudioDestinationNodeRenderer","createIndexSizeError","createInvalidStateError","createNativeAudioDestinationNode","getNativeContext","isNativeOfflineAudioContext","renderInputsOfAudioNode","context","channelCount","nativeContext","isOffline","nativeAudioDestinationNode","audioDestinationNodeRenderer","_isNodeOfNativeOfflineAudioContext","_nativeAudioDestinationNode","value","maxChannelCount","channelCountMode"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\audio-destination-node-constructor.ts"],"sourcesContent":["import { IAudioDestinationNode } from '../interfaces';\nimport {\n    TAudioDestinationNodeConstructorFactory,\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TNativeAudioDestinationNode\n} from '../types';\n\nexport const createAudioDestinationNodeConstructor: TAudioDestinationNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n) => {\n    return class AudioDestinationNode<T extends TContext> extends audioNodeConstructor<T> implements IAudioDestinationNode<T> {\n        private _isNodeOfNativeOfflineAudioContext: boolean;\n\n        private _nativeAudioDestinationNode: TNativeAudioDestinationNode;\n\n        constructor(context: T, channelCount: number) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null)\n            );\n\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n\n        get channelCount(): number {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n\n        get maxChannelCount(): number {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}