{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\nvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\nvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\nvar allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\nexport var JCReverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(JCReverb, _StereoEffect);\n  var _super = _createSuper(JCReverb);\n  function JCReverb() {\n    var _this;\n    _classCallCheck(this, JCReverb);\n    _this = _super.call(this, optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    _this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n    _this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n    _this._feedbackCombFilters = [];\n    var options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    _this._scaleRoomSize = new Scale({\n      context: _this.context,\n      min: -0.733,\n      max: 0.197\n    });\n    // make the allpass filters\n    _this._allpassFilters = allpassFilterFreqs.map(function (freq) {\n      var allpass = _this.context.createBiquadFilter();\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    });\n    // and the comb filters\n    _this._feedbackCombFilters = combFilterDelayTimes.map(function (delayTime, index) {\n      var fbcf = new FeedbackCombFilter({\n        context: _this.context,\n        delayTime: delayTime\n      });\n      _this._scaleRoomSize.connect(fbcf.resonance);\n      fbcf.resonance.value = combFilterResonances[index];\n      if (index < combFilterDelayTimes.length / 2) {\n        var _this2;\n        (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      } else {\n        var _this3;\n        (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      }\n      return fbcf;\n    });\n    // chain the allpass filters together\n    _this.roomSize.connect(_this._scaleRoomSize);\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n  _createClass(JCReverb, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(JCReverb.prototype), \"dispose\", this).call(this);\n      this._allpassFilters.forEach(function (apf) {\n        return apf.disconnect();\n      });\n      this._feedbackCombFilters.forEach(function (fbcf) {\n        return fbcf.dispose();\n      });\n      this.roomSize.dispose();\n      this._scaleRoomSize.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.5\n      });\n    }\n  }]);\n  return JCReverb;\n}(StereoEffect);","map":{"version":3,"mappings":";;;;;;;;AACA,SAASA,YAAY,QAA6B,gBAAgB;AAClE,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,kBAAkB,QAAQ,wCAAwC;AAC3E,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD;;;AAGA,IAAMC,oBAAoB,GAAG,CAAC,IAAI,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,GAAG,KAAK,CAAC;AAErF;;;AAGA,IAAMC,oBAAoB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAEzD;;;AAGA,IAAMC,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;AAEzC;;;;;;;;;;;;;;AAcA,WAAaC,QAAS;EAAA;EAAA;EA6BrB;IAAA;IAAA;IAEC,0BAAMR,oBAAoB,CAACQ,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IA7BnE,UAAI,GAAW,UAAU;IAYlC;;;IAGQ,qBAAe,GAAuB,EAAE;IAEhD;;;IAGQ,0BAAoB,GAAyB,EAAE;IAUtD,IAAMC,OAAO,GAAGX,oBAAoB,CAACQ,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAErF,MAAKE,QAAQ,GAAG,IAAIV,MAAM,CAAC;MAC1BW,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAEH,OAAO,CAACC,QAAQ;MACvBG,KAAK,EAAE;KACP,CAAC;IACF,MAAKC,cAAc,GAAG,IAAIf,KAAK,CAAC;MAC/BY,OAAO,EAAE,MAAKA,OAAO;MACrBI,GAAG,EAAE,CAAC,KAAK;MACXC,GAAG,EAAE;KACL,CAAC;IAEF;IACA,MAAKC,eAAe,GAAGZ,kBAAkB,CAACa,GAAG,CAAC,cAAI,EAAG;MACpD,IAAMC,OAAO,GAAG,MAAKR,OAAO,CAACS,kBAAkB,EAAE;MACjDD,OAAO,CAACE,IAAI,GAAG,SAAS;MACxBF,OAAO,CAACG,SAAS,CAACV,KAAK,GAAGW,IAAI;MAC9B,OAAOJ,OAAO;IACf,CAAC,CAAC;IAEF;IACA,MAAKK,oBAAoB,GAAGrB,oBAAoB,CAACe,GAAG,CAAC,UAACO,SAAS,EAAEC,KAAK,EAAI;MACzE,IAAMC,IAAI,GAAG,IAAI1B,kBAAkB,CAAC;QACnCU,OAAO,EAAE,MAAKA,OAAO;QACrBc,SAAS,EAATA;OACA,CAAC;MACF,MAAKX,cAAc,CAACc,OAAO,CAACD,IAAI,CAACE,SAAS,CAAC;MAC3CF,IAAI,CAACE,SAAS,CAACjB,KAAK,GAAGR,oBAAoB,CAACsB,KAAK,CAAC;MAClD,IAAIA,KAAK,GAAGvB,oBAAoB,CAAC2B,MAAM,GAAG,CAAC,EAAE;QAAA;QAC5C,iBAAKC,iBAAiB,kCAAI,MAAKd,eAAe,UAAEU,IAAI,GAAC;OACrD,MAAM;QAAA;QACN,iBAAKK,kBAAkB,kCAAI,MAAKf,eAAe,UAAEU,IAAI,GAAC;;MAEvD,OAAOA,IAAI;IACZ,CAAC,CAAC;IAEF;IACA,MAAKjB,QAAQ,CAACkB,OAAO,CAAC,MAAKd,cAAc,CAAC;IAC1CZ,QAAQ,gCAAO,CAAC,UAAU,CAAC,CAAC;IAAC;EAC9B;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACe,eAAe,CAACgB,OAAO,CAAC,aAAG;QAAA,OAAIC,GAAG,CAACC,UAAU,EAAE;MAAA,EAAC;MACrD,IAAI,CAACX,oBAAoB,CAACS,OAAO,CAAC,cAAI;QAAA,OAAIN,IAAI,CAACS,OAAO,EAAE;MAAA,EAAC;MACzD,IAAI,CAAC1B,QAAQ,CAAC0B,OAAO,EAAE;MACvB,IAAI,CAACtB,cAAc,CAACsB,OAAO,EAAE;MAC7B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAbD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACzC,YAAY,CAACU,WAAW,EAAE,EAAE;QAChDG,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EA9E4Bb,YAA6B","names":["StereoEffect","optionsFromArguments","Scale","Signal","FeedbackCombFilter","readOnly","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","getDefaults","arguments","options","roomSize","context","value","units","_scaleRoomSize","min","max","_allpassFilters","map","allpass","createBiquadFilter","type","frequency","freq","_feedbackCombFilters","delayTime","index","fbcf","connect","resonance","length","connectEffectLeft","connectEffectRight","forEach","apf","disconnect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\JCReverb.ts"],"sourcesContent":["import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733,\n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}