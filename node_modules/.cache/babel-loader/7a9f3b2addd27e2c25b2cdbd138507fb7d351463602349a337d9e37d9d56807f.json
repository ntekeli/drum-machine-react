{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { createAudioContext, createAudioWorkletNode as _createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport var Context = /*#__PURE__*/function (_BaseContext) {\n  _inherits(Context, _BaseContext);\n  var _super = _createSuper(Context);\n  function Context() {\n    var _this;\n    _classCallCheck(this, Context);\n    _this = _super.call(this);\n    _this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n    _this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n    _this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n    _this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n    _this._initialized = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n    _this.isOffline = false;\n    //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n    _this._workletModules = new Map();\n    var options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n    if (options.context) {\n      _this._context = options.context;\n    } else {\n      _this._context = createAudioContext({\n        latencyHint: options.latencyHint\n      });\n    }\n    _this._ticker = new Ticker(_this.emit.bind(_assertThisInitialized(_this), \"tick\"), options.clockSource, options.updateInterval);\n    _this.on(\"tick\", _this._timeoutLoop.bind(_assertThisInitialized(_this)));\n    // fwd events from the context\n    _this._context.onstatechange = function () {\n      _this.emit(\"statechange\", _this.state);\n    };\n    _this._setLatencyHint(options.latencyHint);\n    _this.lookAhead = options.lookAhead;\n    return _this;\n  }\n  _createClass(Context, [{\n    key: \"initialize\",\n    value:\n    /**\n     * Finish setting up the context. **You usually do not need to do this manually.**\n     */\n    function initialize() {\n      if (!this._initialized) {\n        // add any additional modules\n        initializeContext(this);\n        this._initialized = true;\n      }\n      return this;\n    }\n    //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n  }, {\n    key: \"createAnalyser\",\n    value: function createAnalyser() {\n      return this._context.createAnalyser();\n    }\n  }, {\n    key: \"createOscillator\",\n    value: function createOscillator() {\n      return this._context.createOscillator();\n    }\n  }, {\n    key: \"createBufferSource\",\n    value: function createBufferSource() {\n      return this._context.createBufferSource();\n    }\n  }, {\n    key: \"createBiquadFilter\",\n    value: function createBiquadFilter() {\n      return this._context.createBiquadFilter();\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(numberOfChannels, length, sampleRate) {\n      return this._context.createBuffer(numberOfChannels, length, sampleRate);\n    }\n  }, {\n    key: \"createChannelMerger\",\n    value: function createChannelMerger(numberOfInputs) {\n      return this._context.createChannelMerger(numberOfInputs);\n    }\n  }, {\n    key: \"createChannelSplitter\",\n    value: function createChannelSplitter(numberOfOutputs) {\n      return this._context.createChannelSplitter(numberOfOutputs);\n    }\n  }, {\n    key: \"createConstantSource\",\n    value: function createConstantSource() {\n      return this._context.createConstantSource();\n    }\n  }, {\n    key: \"createConvolver\",\n    value: function createConvolver() {\n      return this._context.createConvolver();\n    }\n  }, {\n    key: \"createDelay\",\n    value: function createDelay(maxDelayTime) {\n      return this._context.createDelay(maxDelayTime);\n    }\n  }, {\n    key: \"createDynamicsCompressor\",\n    value: function createDynamicsCompressor() {\n      return this._context.createDynamicsCompressor();\n    }\n  }, {\n    key: \"createGain\",\n    value: function createGain() {\n      return this._context.createGain();\n    }\n  }, {\n    key: \"createIIRFilter\",\n    value: function createIIRFilter(feedForward, feedback) {\n      // @ts-ignore\n      return this._context.createIIRFilter(feedForward, feedback);\n    }\n  }, {\n    key: \"createPanner\",\n    value: function createPanner() {\n      return this._context.createPanner();\n    }\n  }, {\n    key: \"createPeriodicWave\",\n    value: function createPeriodicWave(real, imag, constraints) {\n      return this._context.createPeriodicWave(real, imag, constraints);\n    }\n  }, {\n    key: \"createStereoPanner\",\n    value: function createStereoPanner() {\n      return this._context.createStereoPanner();\n    }\n  }, {\n    key: \"createWaveShaper\",\n    value: function createWaveShaper() {\n      return this._context.createWaveShaper();\n    }\n  }, {\n    key: \"createMediaStreamSource\",\n    value: function createMediaStreamSource(stream) {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaStreamSource(stream);\n    }\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(element) {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaElementSource(element);\n    }\n  }, {\n    key: \"createMediaStreamDestination\",\n    value: function createMediaStreamDestination() {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaStreamDestination();\n    }\n  }, {\n    key: \"decodeAudioData\",\n    value: function decodeAudioData(audioData) {\n      return this._context.decodeAudioData(audioData);\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return this._context.currentTime;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._context.state;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n  }, {\n    key: \"sampleRate\",\n    get: function get() {\n      return this._context.sampleRate;\n    }\n    /**\n     * The listener\n     */\n  }, {\n    key: \"listener\",\n    get: function get() {\n      this.initialize();\n      return this._listener;\n    },\n    set: function set(l) {\n      assert(!this._initialized, \"The listener cannot be set after initialization.\");\n      this._listener = l;\n    }\n    /**\n     * There is only one Transport per Context. It is created on initialization.\n     */\n  }, {\n    key: \"transport\",\n    get: function get() {\n      this.initialize();\n      return this._transport;\n    },\n    set: function set(t) {\n      assert(!this._initialized, \"The transport cannot be set after initialization.\");\n      this._transport = t;\n    }\n    /**\n     * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n     */\n  }, {\n    key: \"draw\",\n    get: function get() {\n      this.initialize();\n      return this._draw;\n    },\n    set: function set(d) {\n      assert(!this._initialized, \"Draw cannot be set after initialization.\");\n      this._draw = d;\n    }\n    /**\n     * A reference to the Context's destination node.\n     */\n  }, {\n    key: \"destination\",\n    get: function get() {\n      this.initialize();\n      return this._destination;\n    },\n    set: function set(d) {\n      assert(!this._initialized, \"The destination cannot be set after initialization.\");\n      this._destination = d;\n    }\n    /**\n     * Create an audio worklet node from a name and options. The module\n     * must first be loaded using [[addAudioWorkletModule]].\n     */\n  }, {\n    key: \"createAudioWorkletNode\",\n    value: function createAudioWorkletNode(name, options) {\n      return _createAudioWorkletNode(this.rawContext, name, options);\n    }\n    /**\n     * Add an AudioWorkletProcessor module\n     * @param url The url of the module\n     * @param name The name of the module\n     */\n  }, {\n    key: \"addAudioWorkletModule\",\n    value: function addAudioWorkletModule(url, name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n              if (!this._workletModules.has(name)) {\n                this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n              }\n              _context.next = 4;\n              return this._workletModules.get(name);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Returns a promise which resolves when all of the worklets have been loaded on this context\n     */\n  }, {\n    key: \"workletsAreReady\",\n    value: function workletsAreReady() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var promises;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              promises = [];\n              this._workletModules.forEach(function (promise) {\n                return promises.push(promise);\n              });\n              _context2.next = 4;\n              return Promise.all(promises);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    //---------------------------\n    // TICKER\n    //---------------------------\n    /**\n     * How often the interval callback is invoked.\n     * This number corresponds to how responsive the scheduling\n     * can be. context.updateInterval + context.lookAhead gives you the\n     * total latency between scheduling an event and hearing it.\n     */\n  }, {\n    key: \"updateInterval\",\n    get: function get() {\n      return this._ticker.updateInterval;\n    },\n    set: function set(interval) {\n      this._ticker.updateInterval = interval;\n    }\n    /**\n     * What the source of the clock is, either \"worker\" (default),\n     * \"timeout\", or \"offline\" (none).\n     */\n  }, {\n    key: \"clockSource\",\n    get: function get() {\n      return this._ticker.type;\n    },\n    set: function set(type) {\n      this._ticker.type = type;\n    }\n    /**\n     * The type of playback, which affects tradeoffs between audio\n     * output latency and responsiveness.\n     * In addition to setting the value in seconds, the latencyHint also\n     * accepts the strings \"interactive\" (prioritizes low latency),\n     * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n     * latency and performance).\n     * @example\n     * // prioritize sustained playback\n     * const context = new Tone.Context({ latencyHint: \"playback\" });\n     * // set this context as the global Context\n     * Tone.setContext(context);\n     * // the global context is gettable with Tone.getContext()\n     * console.log(Tone.getContext().latencyHint);\n     */\n  }, {\n    key: \"latencyHint\",\n    get: function get() {\n      return this._latencyHint;\n    }\n    /**\n     * Update the lookAhead and updateInterval based on the latencyHint\n     */\n  }, {\n    key: \"_setLatencyHint\",\n    value: function _setLatencyHint(hint) {\n      var lookAheadValue = 0;\n      this._latencyHint = hint;\n      if (isString(hint)) {\n        switch (hint) {\n          case \"interactive\":\n            lookAheadValue = 0.1;\n            break;\n          case \"playback\":\n            lookAheadValue = 0.5;\n            break;\n          case \"balanced\":\n            lookAheadValue = 0.25;\n            break;\n        }\n      }\n      this.lookAhead = lookAheadValue;\n      this.updateInterval = lookAheadValue / 2;\n    }\n    /**\n     * The unwrapped AudioContext or OfflineAudioContext\n     */\n  }, {\n    key: \"rawContext\",\n    get: function get() {\n      return this._context;\n    }\n    /**\n     * The current audio context time plus a short [[lookAhead]].\n     */\n  }, {\n    key: \"now\",\n    value: function now() {\n      return this._context.currentTime + this.lookAhead;\n    }\n    /**\n     * The current audio context time without the [[lookAhead]].\n     * In most cases it is better to use [[now]] instead of [[immediate]] since\n     * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n     * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n     * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n     */\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return this._context.currentTime;\n    }\n    /**\n     * Starts the audio context from a suspended state. This is required\n     * to initially start the AudioContext. See [[Tone.start]]\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (isAudioContext(this._context)) {\n        return this._context.resume();\n      } else {\n        return Promise.resolve();\n      }\n    }\n    /**\n     * Close the context. Once closed, the context can no longer be used and\n     * any AudioNodes created from the context will be silent.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!isAudioContext(this._context)) {\n                _context3.next = 3;\n                break;\n              }\n              _context3.next = 3;\n              return this._context.close();\n            case 3:\n              if (this._initialized) {\n                closeContext(this);\n              }\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * **Internal** Generate a looped buffer at some constant value.\n     */\n  }, {\n    key: \"getConstant\",\n    value: function getConstant(val) {\n      if (this._constants.has(val)) {\n        return this._constants.get(val);\n      } else {\n        var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n        var arr = buffer.getChannelData(0);\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = val;\n        }\n        var constant = this._context.createBufferSource();\n        constant.channelCount = 1;\n        constant.channelCountMode = \"explicit\";\n        constant.buffer = buffer;\n        constant.loop = true;\n        constant.start(0);\n        this._constants.set(val, constant);\n        return constant;\n      }\n    }\n    /**\n     * Clean up. Also closes the audio context.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this2 = this;\n      _get(_getPrototypeOf(Context.prototype), \"dispose\", this).call(this);\n      this._ticker.dispose();\n      this._timeouts.dispose();\n      Object.keys(this._constants).map(function (val) {\n        return _this2._constants[val].disconnect();\n      });\n      return this;\n    }\n    //---------------------------\n    // TIMEOUTS\n    //---------------------------\n    /**\n     * The private loop which keeps track of the context scheduled timeouts\n     * Is invoked from the clock source\n     */\n  }, {\n    key: \"_timeoutLoop\",\n    value: function _timeoutLoop() {\n      var now = this.now();\n      var firstEvent = this._timeouts.peek();\n      while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n        // invoke the callback\n        firstEvent.callback();\n        // shift the first event off\n        this._timeouts.shift();\n        // get the next one\n        firstEvent = this._timeouts.peek();\n      }\n    }\n    /**\n     * A setTimeout which is guaranteed by the clock source.\n     * Also runs in the offline context.\n     * @param  fn       The callback to invoke\n     * @param  timeout  The timeout in seconds\n     * @returns ID to use when invoking Context.clearTimeout\n     */\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(fn, timeout) {\n      this._timeoutIds++;\n      var now = this.now();\n      this._timeouts.add({\n        callback: fn,\n        id: this._timeoutIds,\n        time: now + timeout\n      });\n      return this._timeoutIds;\n    }\n    /**\n     * Clears a previously scheduled timeout with Tone.context.setTimeout\n     * @param  id  The ID returned from setTimeout\n     */\n  }, {\n    key: \"clearTimeout\",\n    value: function clearTimeout(id) {\n      var _this3 = this;\n      this._timeouts.forEach(function (event) {\n        if (event.id === id) {\n          _this3._timeouts.remove(event);\n        }\n      });\n      return this;\n    }\n    /**\n     * Clear the function scheduled by [[setInterval]]\n     */\n  }, {\n    key: \"clearInterval\",\n    value: function clearInterval(id) {\n      return this.clearTimeout(id);\n    }\n    /**\n     * Adds a repeating event to the context's callback clock\n     */\n  }, {\n    key: \"setInterval\",\n    value: function setInterval(fn, interval) {\n      var _this4 = this;\n      var id = ++this._timeoutIds;\n      var intervalFn = function intervalFn() {\n        var now = _this4.now();\n        _this4._timeouts.add({\n          callback: function callback() {\n            // invoke the callback\n            fn();\n            // invoke the event to repeat it\n            intervalFn();\n          },\n          id: id,\n          time: now + interval\n        });\n      };\n      // kick it off\n      intervalFn();\n      return id;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        clockSource: \"worker\",\n        latencyHint: \"interactive\",\n        lookAhead: 0.1,\n        updateInterval: 0.05\n      };\n    }\n  }]);\n  return Context;\n}(BaseContext);","map":{"version":3,"mappings":"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","names":["Ticker","isAudioContext","optionsFromArguments","Timeline","isDefined","isString","createAudioContext","createAudioWorkletNode","closeContext","initializeContext","BaseContext","assert","Context","Map","options","getDefaults","arguments","context","_context","latencyHint","_ticker","emit","bind","clockSource","updateInterval","on","_timeoutLoop","onstatechange","state","_setLatencyHint","lookAhead","_initialized","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","numberOfChannels","length","sampleRate","createBuffer","numberOfInputs","createChannelMerger","numberOfOutputs","createChannelSplitter","createConstantSource","createConvolver","maxDelayTime","createDelay","createDynamicsCompressor","createGain","feedForward","feedback","createIIRFilter","createPanner","real","imag","constraints","createPeriodicWave","createStereoPanner","createWaveShaper","stream","createMediaStreamSource","element","createMediaElementSource","createMediaStreamDestination","audioData","decodeAudioData","currentTime","initialize","_listener","l","_transport","t","_draw","d","_destination","name","rawContext","url","audioWorklet","_workletModules","has","set","addModule","get","promises","forEach","promise","push","Promise","all","interval","type","_latencyHint","hint","lookAheadValue","resume","resolve","close","val","_constants","buffer","arr","getChannelData","i","constant","channelCount","channelCountMode","loop","start","dispose","_timeouts","Object","keys","map","disconnect","now","firstEvent","peek","time","callback","shift","fn","timeout","_timeoutIds","add","id","event","remove","clearTimeout","intervalFn"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\context\\Context.ts"],"sourcesContent":["import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport {\n\tAnyAudioContext,\n\tcreateAudioContext,\n\tcreateAudioWorkletNode,\n} from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Listener = import(\"./Listener\").Listener;\ntype Draw = import(\"../util/Draw\").Draw;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint!: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Listener singleton belonging to this context\n\t */\n\tprivate _listener!: Listener;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\n\t\t\t\"context\",\n\t\t]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext({\n\t\t\t\tlatencyHint: options.latencyHint,\n\t\t\t});\n\t\t}\n\n\t\tthis._ticker = new Ticker(\n\t\t\tthis.emit.bind(this, \"tick\"),\n\t\t\toptions.clockSource,\n\t\t\toptions.updateInterval\n\t\t);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\n\t\tthis._setLatencyHint(options.latencyHint);\n\t\tthis.lookAhead = options.lookAhead;\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(\n\t\tnumberOfChannels: number,\n\t\tlength: number,\n\t\tsampleRate: number\n\t): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(\n\t\tnumberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(\n\t\tnumberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(\n\t\tfeedForward: number[] | Float32Array,\n\t\tfeedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamSource(stream);\n\t}\n\tcreateMediaElementSource(\n\t\telement: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaElementSource(element);\n\t}\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamDestination();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\n\t/**\n\t * The listener\n\t */\n\tget listener(): Listener {\n\t\tthis.initialize();\n\t\treturn this._listener;\n\t}\n\tset listener(l) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The listener cannot be set after initialization.\"\n\t\t);\n\t\tthis._listener = l;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The transport cannot be set after initialization.\"\n\t\t);\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tassert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The destination cannot be set after initialization.\"\n\t\t);\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map();\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]].\n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string,\n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tassert(\n\t\t\tisDefined(this.rawContext.audioWorklet),\n\t\t\t\"AudioWorkletNode is only available in a secure context (https or localhost)\"\n\t\t);\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(\n\t\t\t\tname,\n\t\t\t\tthis.rawContext.audioWorklet.addModule(url)\n\t\t\t);\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach((promise) => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance).\n\t * @example\n\t * // prioritize sustained playback\n\t * const context = new Tone.Context({ latencyHint: \"playback\" });\n\t * // set this context as the global Context\n\t * Tone.setContext(context);\n\t * // the global context is gettable with Tone.getContext()\n\t * console.log(Tone.getContext().latencyHint);\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\n\t/**\n\t * Update the lookAhead and updateInterval based on the latencyHint\n\t */\n\tprivate _setLatencyHint(hint: ContextLatencyHint | Seconds): void {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext or OfflineAudioContext\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]].\n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext. See [[Tone.start]]\n\t */\n\tresume(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Close the context. Once closed, the context can no longer be used and\n\t * any AudioNodes created from the context will be silent.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * **Internal** Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(\n\t\t\t\t1,\n\t\t\t\t128,\n\t\t\t\tthis._context.sampleRate\n\t\t\t);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map((val) =>\n\t\t\tthis._constants[val].disconnect()\n\t\t);\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach((event) => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}