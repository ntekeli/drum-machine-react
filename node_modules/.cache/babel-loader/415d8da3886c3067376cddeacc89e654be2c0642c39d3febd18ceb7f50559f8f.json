{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport var PulseOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PulseOscillator, _Source);\n  var _super = _createSuper(PulseOscillator);\n  function PulseOscillator() {\n    var _this;\n    _classCallCheck(this, PulseOscillator);\n    _this = _super.call(this, optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    _this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n    _this._widthGate = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n    _this._thresh = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(val) {\n        return val <= 0 ? -1 : 1;\n      }\n    });\n    var options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    _this._triangle = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    _this.frequency = _this._triangle.frequency;\n    _this.detune = _this._triangle.detune;\n    // connections\n    _this._triangle.chain(_this._thresh, _this.output);\n    _this.width.chain(_this._widthGate, _this._thresh);\n    readOnly(_assertThisInitialized(_this), [\"width\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n  _createClass(PulseOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      time = this.toSeconds(time);\n      this._triangle.start(time);\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * stop the oscillator\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n      this._triangle.stop(time);\n      // the width is still connected to the output.\n      // that needs to be stopped also\n      this._widthGate.gain.cancelScheduledValues(time);\n      this._widthGate.gain.setValueAtTime(0, time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._triangle.restart(time);\n      this._widthGate.gain.cancelScheduledValues(time);\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._triangle.phase;\n    },\n    set: function set(phase) {\n      this._triangle.phase = phase;\n    }\n    /**\n     * The type of the oscillator. Always returns \"pulse\".\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pulse\".\n     */\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * *Internal use* The carrier oscillator type is fed through the\n     * waveshaper node to create the pulse. Using different carrier oscillators\n     * changes oscillator's behavior.\n     */\n  }, {\n    key: \"carrierType\",\n    set: function set(type) {\n      this._triangle.type = type;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", generateWaveform(this, length));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up method.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PulseOscillator.prototype), \"dispose\", this).call(this);\n      this._triangle.dispose();\n      this.width.dispose();\n      this._widthGate.dispose();\n      this._thresh.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        phase: 0,\n        type: \"pulse\",\n        width: 0.2\n      });\n    }\n  }]);\n  return PulseOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","Signal","WaveShaper","Source","Oscillator","generateWaveform","PulseOscillator","getDefaults","arguments","context","gain","mapping","val","options","width","units","value","_triangle","detune","frequency","onstop","phase","type","chain","_thresh","output","_widthGate","time","toSeconds","start","setValueAtTime","stop","cancelScheduledValues","restart","length","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\source\\oscillator\\PulseOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst pulse = new Tone.PulseOscillator(20, 0.8).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly width: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _triangle: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._triangle = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"triangle\",\n\t\t});\n\t\tthis.frequency = this._triangle.frequency;\n\t\tthis.detune = this._triangle.detune;\n\n\t\t// connections\n\t\tthis._triangle.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._triangle.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._triangle.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._triangle.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * *Internal use* The carrier oscillator type is fed through the \n\t * waveshaper node to create the pulse. Using different carrier oscillators\n\t * changes oscillator's behavior. \n\t */\n\tset carrierType(type: \"triangle\" | \"sine\") {\n\t\tthis._triangle.type = type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._triangle.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}