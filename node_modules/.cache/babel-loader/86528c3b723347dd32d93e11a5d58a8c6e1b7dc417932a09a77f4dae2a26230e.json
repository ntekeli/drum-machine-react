{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport var Solo = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Solo, _ToneAudioNode);\n  var _super = _createSuper(Solo);\n  function Solo() {\n    var _this;\n    _classCallCheck(this, Solo);\n    _this = _super.call(this, optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n    _this.name = \"Solo\";\n    var options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context\n    });\n    if (!Solo._allSolos.has(_this.context)) {\n      Solo._allSolos.set(_this.context, new Set());\n    }\n    Solo._allSolos.get(_this.context).add(_assertThisInitialized(_this));\n    // set initially\n    _this.solo = options.solo;\n    return _this;\n  }\n  _createClass(Solo, [{\n    key: \"solo\",\n    get:\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    function get() {\n      return this._isSoloed();\n    },\n    set: function set(solo) {\n      if (solo) {\n        this._addSolo();\n      } else {\n        this._removeSolo();\n      }\n      Solo._allSolos.get(this.context).forEach(function (instance) {\n        return instance._updateSolo();\n      });\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this.input.gain.value === 0;\n    }\n    /**\n     * Add this to the soloed array\n     */\n  }, {\n    key: \"_addSolo\",\n    value: function _addSolo() {\n      if (!Solo._soloed.has(this.context)) {\n        Solo._soloed.set(this.context, new Set());\n      }\n      Solo._soloed.get(this.context).add(this);\n    }\n    /**\n     * Remove this from the soloed array\n     */\n  }, {\n    key: \"_removeSolo\",\n    value: function _removeSolo() {\n      if (Solo._soloed.has(this.context)) {\n        Solo._soloed.get(this.context).delete(this);\n      }\n    }\n    /**\n     * Is this on the soloed array\n     */\n  }, {\n    key: \"_isSoloed\",\n    value: function _isSoloed() {\n      return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n    }\n    /**\n     * Returns true if no one is soloed\n     */\n  }, {\n    key: \"_noSolos\",\n    value: function _noSolos() {\n      // either does not have any soloed added\n      return !Solo._soloed.has(this.context) ||\n      // or has a solo set but doesn't include any items\n      Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n    }\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n  }, {\n    key: \"_updateSolo\",\n    value: function _updateSolo() {\n      if (this._isSoloed()) {\n        this.input.gain.value = 1;\n      } else if (this._noSolos()) {\n        // no one is soloed\n        this.input.gain.value = 1;\n      } else {\n        this.input.gain.value = 0;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Solo.prototype), \"dispose\", this).call(this);\n      Solo._allSolos.get(this.context).delete(this);\n      this._removeSolo();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        solo: false\n      });\n    }\n  }]);\n  return Solo;\n}(ToneAudioNode);\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\nSolo._soloed = new Map();","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","Solo","getDefaults","arguments","options","input","output","context","_allSolos","has","set","Set","get","add","solo","_isSoloed","_addSolo","_removeSolo","forEach","instance","_updateSolo","gain","value","_soloed","delete","size","_noSolos","Object","assign","Map"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Solo.ts"],"sourcesContent":["import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}