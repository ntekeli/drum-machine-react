{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport var MidSideSplit = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideSplit, _ToneAudioNode);\n  var _super = _createSuper(MidSideSplit);\n  function MidSideSplit() {\n    var _this;\n    _classCallCheck(this, MidSideSplit);\n    _this = _super.call(this, optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n    _this.name = \"MidSideSplit\";\n    _this._split = _this.input = new Split({\n      channels: 2,\n      context: _this.context\n    });\n    _this._midAdd = new Add({\n      context: _this.context\n    });\n    _this.mid = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._sideSubtract = new Subtract({\n      context: _this.context\n    });\n    _this.side = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._split.connect(_this._midAdd, 0);\n    _this._split.connect(_this._midAdd.addend, 1);\n    _this._split.connect(_this._sideSubtract, 0);\n    _this._split.connect(_this._sideSubtract.subtrahend, 1);\n    _this._midAdd.connect(_this.mid);\n    _this._sideSubtract.connect(_this.side);\n    return _this;\n  }\n  _createClass(MidSideSplit, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideSplit.prototype), \"dispose\", this).call(this);\n      this.mid.dispose();\n      this.side.dispose();\n      this._midAdd.dispose();\n      this._sideSubtract.dispose();\n      this._split.dispose();\n      return this;\n    }\n  }]);\n  return MidSideSplit;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAA8B,kCAAkC;AACtF,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,oBAAoB,QAAQ,0BAA0B;AAI/D;;;;;;;;;AASA,WAAaC,YAAa;EAAA;EAAA;EAoCzB;IAAA;IAAA;IACC,0BAAMD,oBAAoB,CAACC,YAAY,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAnCzD,UAAI,GAAW,cAAc;IAqCrC,MAAKC,MAAM,GAAG,MAAKC,KAAK,GAAG,IAAIT,KAAK,CAAC;MACpCU,QAAQ,EAAE,CAAC;MACXC,OAAO,EAAE,MAAKA;KACd,CAAC;IACF,MAAKC,OAAO,GAAG,IAAIX,GAAG,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACjD,MAAKE,GAAG,GAAG,IAAIX,QAAQ,CAAC;MACvBS,OAAO,EAAE,MAAKA,OAAO;MACrBG,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IACF,MAAKC,aAAa,GAAG,IAAId,QAAQ,CAAC;MAAEQ,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC5D,MAAKO,IAAI,GAAG,IAAIhB,QAAQ,CAAC;MACxBS,OAAO,EAAE,MAAKA,OAAO;MACrBG,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IAEF,MAAKR,MAAM,CAACW,OAAO,CAAC,MAAKP,OAAO,EAAE,CAAC,CAAC;IACpC,MAAKJ,MAAM,CAACW,OAAO,CAAC,MAAKP,OAAO,CAACQ,MAAM,EAAE,CAAC,CAAC;IAC3C,MAAKZ,MAAM,CAACW,OAAO,CAAC,MAAKF,aAAa,EAAE,CAAC,CAAC;IAC1C,MAAKT,MAAM,CAACW,OAAO,CAAC,MAAKF,aAAa,CAACI,UAAU,EAAE,CAAC,CAAC;IACrD,MAAKT,OAAO,CAACO,OAAO,CAAC,MAAKN,GAAG,CAAC;IAC9B,MAAKI,aAAa,CAACE,OAAO,CAAC,MAAKD,IAAI,CAAC;IAAC;EACvC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACL,GAAG,CAACS,OAAO,EAAE;MAClB,IAAI,CAACJ,IAAI,CAACI,OAAO,EAAE;MACnB,IAAI,CAACV,OAAO,CAACU,OAAO,EAAE;MACtB,IAAI,CAACL,aAAa,CAACK,OAAO,EAAE;MAC5B,IAAI,CAACd,MAAM,CAACc,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EAtEgCvB,aAAkC","names":["ToneAudioNode","Split","Add","Multiply","Subtract","optionsFromArguments","MidSideSplit","getDefaults","arguments","_split","input","channels","context","_midAdd","mid","value","Math","SQRT1_2","_sideSubtract","side","connect","addend","subtrahend","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\MidSideSplit.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}