{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport var MidSideMerge = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideMerge, _ToneAudioNode);\n  var _super = _createSuper(MidSideMerge);\n  function MidSideMerge() {\n    var _this;\n    _classCallCheck(this, MidSideMerge);\n    _this = _super.call(this, optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    _this.name = \"MidSideMerge\";\n    _this.mid = new Gain({\n      context: _this.context\n    });\n    _this.side = new Gain({\n      context: _this.context\n    });\n    _this._left = new Add({\n      context: _this.context\n    });\n    _this._leftMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._right = new Subtract({\n      context: _this.context\n    });\n    _this._rightMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._merge = _this.output = new Merge({\n      context: _this.context\n    });\n    _this.mid.fan(_this._left);\n    _this.side.connect(_this._left.addend);\n    _this.mid.connect(_this._right);\n    _this.side.connect(_this._right.subtrahend);\n    _this._left.connect(_this._leftMult);\n    _this._right.connect(_this._rightMult);\n    _this._leftMult.connect(_this._merge, 0, 0);\n    _this._rightMult.connect(_this._merge, 0, 1);\n    return _this;\n  }\n  _createClass(MidSideMerge, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideMerge.prototype), \"dispose\", this).call(this);\n      this.mid.dispose();\n      this.side.dispose();\n      this._leftMult.dispose();\n      this._rightMult.dispose();\n      this._left.dispose();\n      this._right.dispose();\n      return this;\n    }\n  }]);\n  return MidSideMerge;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAA8B,kCAAkC;AACtF,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAI/D;;;;;;;;AAQA,WAAaC,YAAa;EAAA;EAAA;EAkDzB;IAAA;IAAA;IACC,0BAAMD,oBAAoB,CAACC,YAAY,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAjDzD,UAAI,GAAW,cAAc;IAkDrC,MAAKC,GAAG,GAAG,IAAIL,IAAI,CAAC;MAAEM,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC9C,MAAKC,IAAI,GAAG,IAAIP,IAAI,CAAC;MAAEM,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC/C,MAAKE,KAAK,GAAG,IAAIX,GAAG,CAAC;MAAES,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC/C,MAAKG,SAAS,GAAG,IAAIX,QAAQ,CAAC;MAC7BQ,OAAO,EAAE,MAAKA,OAAO;MACrBI,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IACF,MAAKC,MAAM,GAAG,IAAId,QAAQ,CAAC;MAAEO,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACrD,MAAKQ,UAAU,GAAG,IAAIhB,QAAQ,CAAC;MAC9BQ,OAAO,EAAE,MAAKA,OAAO;MACrBI,KAAK,EAAEC,IAAI,CAACC;KACZ,CAAC;IACF,MAAKG,MAAM,GAAG,MAAKC,MAAM,GAAG,IAAIpB,KAAK,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAEhE,MAAKD,GAAG,CAACY,GAAG,CAAC,MAAKT,KAAK,CAAC;IACxB,MAAKD,IAAI,CAACW,OAAO,CAAC,MAAKV,KAAK,CAACW,MAAM,CAAC;IACpC,MAAKd,GAAG,CAACa,OAAO,CAAC,MAAKL,MAAM,CAAC;IAC7B,MAAKN,IAAI,CAACW,OAAO,CAAC,MAAKL,MAAM,CAACO,UAAU,CAAC;IACzC,MAAKZ,KAAK,CAACU,OAAO,CAAC,MAAKT,SAAS,CAAC;IAClC,MAAKI,MAAM,CAACK,OAAO,CAAC,MAAKJ,UAAU,CAAC;IACpC,MAAKL,SAAS,CAACS,OAAO,CAAC,MAAKH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACzC,MAAKD,UAAU,CAACI,OAAO,CAAC,MAAKH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAAC;EAC5C;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACV,GAAG,CAACgB,OAAO,EAAE;MAClB,IAAI,CAACd,IAAI,CAACc,OAAO,EAAE;MACnB,IAAI,CAACZ,SAAS,CAACY,OAAO,EAAE;MACxB,IAAI,CAACP,UAAU,CAACO,OAAO,EAAE;MACzB,IAAI,CAACb,KAAK,CAACa,OAAO,EAAE;MACpB,IAAI,CAACR,MAAM,CAACQ,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EArFgC1B,aAAkC","names":["ToneAudioNode","Merge","Add","Multiply","Subtract","Gain","optionsFromArguments","MidSideMerge","getDefaults","arguments","mid","context","side","_left","_leftMult","value","Math","SQRT1_2","_right","_rightMult","_merge","output","fan","connect","addend","subtrahend","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\MidSideMerge.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}