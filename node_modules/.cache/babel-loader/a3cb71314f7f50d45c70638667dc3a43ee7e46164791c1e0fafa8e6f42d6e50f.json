{"ast":null,"code":"import { createInvalidStateError } from '../factories/invalid-state-error';\nexport var wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = function wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode) {\n  nativeAudioBufferSourceNode.start = function (start) {\n    var isScheduled = false;\n    return function () {\n      var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var duration = arguments.length > 2 ? arguments[2] : undefined;\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  }(nativeAudioBufferSourceNode.start);\n};","map":{"version":3,"mappings":"AAAA,SAASA,uBAAuB,QAAQ,kCAAkC;AAG1E,OAAO,IAAMC,oDAAoD,GAAG,SAAvDA,oDAAoD,CAAIC,2BAAyD,EAAU;EACpIA,2BAA2B,CAACC,KAAK,GAAI,UAACA,KAAK,EAAI;IAC3C,IAAIC,WAAW,GAAG,KAAK;IAEvB,OAAO,YAA4C;MAAA,IAA3CC,IAAI,uEAAG,CAAC;MAAA,IAAEC,MAAM,uEAAG,CAAC;MAAA,IAAEC,QAAiB;MAC3C,IAAIH,WAAW,EAAE;QACb,MAAMJ,uBAAuB,EAAE;;MAGnCG,KAAK,CAACK,IAAI,CAACN,2BAA2B,EAAEG,IAAI,EAAEC,MAAM,EAAEC,QAAQ,CAAC;MAE/DH,WAAW,GAAG,IAAI;IACtB,CAAC;EACL,CAAC,CAAEF,2BAA2B,CAACC,KAAK,CAAC;AACzC,CAAC","names":["createInvalidStateError","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","nativeAudioBufferSourceNode","start","isScheduled","when","offset","duration","call"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\helpers\\wrap-audio-buffer-source-node-start-method-consecutive-calls.ts"],"sourcesContent":["import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { TNativeAudioBufferSourceNode } from '../types';\n\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode): void => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n\n        return (when = 0, offset = 0, duration?: number) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}