{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport var ToneEvent = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(ToneEvent, _ToneWithContext);\n  var _super = _createSuper(ToneEvent);\n  function ToneEvent() {\n    var _this;\n    _classCallCheck(this, ToneEvent);\n    _this = _super.call(this, optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    _this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n    _this._startOffset = 0;\n    var options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    _this._loop = options.loop;\n    _this.callback = options.callback;\n    _this.value = options.value;\n    _this._loopStart = _this.toTicks(options.loopStart);\n    _this._loopEnd = _this.toTicks(options.loopEnd);\n    _this._playbackRate = options.playbackRate;\n    _this._probability = options.probability;\n    _this._humanize = options.humanize;\n    _this.mute = options.mute;\n    _this._playbackRate = options.playbackRate;\n    _this._state.increasing = true;\n    // schedule the events for the first time\n    _this._rescheduleEvents();\n    return _this;\n  }\n  _createClass(ToneEvent, [{\n    key: \"_rescheduleEvents\",\n    value:\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    function _rescheduleEvents() {\n      var _this2 = this;\n      var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      // if no argument is given, schedules all of the events\n      this._state.forEachFrom(after, function (event) {\n        var duration;\n        if (event.state === \"started\") {\n          if (event.id !== -1) {\n            _this2.context.transport.clear(event.id);\n          }\n          var startTick = event.time + Math.round(_this2.startOffset / _this2._playbackRate);\n          if (_this2._loop === true || isNumber(_this2._loop) && _this2._loop > 1) {\n            duration = Infinity;\n            if (isNumber(_this2._loop)) {\n              duration = _this2._loop * _this2._getLoopDuration();\n            }\n            var nextEvent = _this2._state.getAfter(startTick);\n            if (nextEvent !== null) {\n              duration = Math.min(duration, nextEvent.time - startTick);\n            }\n            if (duration !== Infinity) {\n              // schedule a stop since it's finite duration\n              _this2._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n                id: -1\n              });\n              duration = new TicksClass(_this2.context, duration);\n            }\n            var interval = new TicksClass(_this2.context, _this2._getLoopDuration());\n            event.id = _this2.context.transport.scheduleRepeat(_this2._tick.bind(_this2), interval, new TicksClass(_this2.context, startTick), duration);\n          } else {\n            event.id = _this2.context.transport.schedule(_this2._tick.bind(_this2), new TicksClass(_this2.context, startTick));\n          }\n        }\n      });\n    }\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state.getValueAtTime(this.context.transport.ticks);\n    }\n    /**\n     * The start from the scheduled start time.\n     */\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._startOffset;\n    },\n    set: function set(offset) {\n      this._startOffset = offset;\n    }\n    /**\n     * The probability of the notes being triggered.\n     */\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._probability;\n    },\n    set: function set(prob) {\n      this._probability = prob;\n    }\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * const event = new Tone.ToneEvent();\n     * event.humanize = true;\n     */\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._humanize;\n    },\n    set: function set(variation) {\n      this._humanize = variation;\n    }\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n  }, {\n    key: \"start\",\n    value: function start(time) {\n      var ticks = this.toTicks(time);\n      if (this._state.getValueAtTime(ticks) === \"stopped\") {\n        this._state.add({\n          id: -1,\n          state: \"started\",\n          time: ticks\n        });\n        this._rescheduleEvents(ticks);\n      }\n      return this;\n    }\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.cancel(time);\n      var ticks = this.toTicks(time);\n      if (this._state.getValueAtTime(ticks) === \"started\") {\n        this._state.setStateAtTime(\"stopped\", ticks, {\n          id: -1\n        });\n        var previousEvent = this._state.getBefore(ticks);\n        var reschedulTime = ticks;\n        if (previousEvent !== null) {\n          reschedulTime = previousEvent.time;\n        }\n        this._rescheduleEvents(reschedulTime);\n      }\n      return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel(time) {\n      var _this3 = this;\n      time = defaultArg(time, -Infinity);\n      var ticks = this.toTicks(time);\n      this._state.forEachFrom(ticks, function (event) {\n        _this3.context.transport.clear(event.id);\n      });\n      this._state.cancel(ticks);\n      return this;\n    }\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var ticks = this.context.transport.getTicksAtTime(time);\n      if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n        if (this.probability < 1 && Math.random() > this.probability) {\n          return;\n        }\n        if (this.humanize) {\n          var variation = 0.02;\n          if (!isBoolean(this.humanize)) {\n            variation = this.toSeconds(this.humanize);\n          }\n          time += (Math.random() * 2 - 1) * variation;\n        }\n        this.callback(time, this.value);\n      }\n    }\n    /**\n     * Get the duration of the loop.\n     */\n  }, {\n    key: \"_getLoopDuration\",\n    value: function _getLoopDuration() {\n      return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    }\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      this._loop = loop;\n      this._rescheduleEvents();\n    }\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * const note = new Tone.ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n      this._rescheduleEvents();\n    }\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = this.toTicks(loopEnd);\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The time when the loop should start.\n     */\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function set(loopStart) {\n      this._loopStart = this.toTicks(loopStart);\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n  }, {\n    key: \"progress\",\n    get: function get() {\n      if (this._loop) {\n        var ticks = this.context.transport.ticks;\n        var lastEvent = this._state.get(ticks);\n        if (lastEvent !== null && lastEvent.state === \"started\") {\n          var loopDuration = this._getLoopDuration();\n          var progress = (ticks - lastEvent.time) % loopDuration;\n          return progress / loopDuration;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneEvent.prototype), \"dispose\", this).call(this);\n      this.cancel();\n      this._state.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneWithContext.getDefaults(), {\n        callback: noOp,\n        humanize: false,\n        loop: false,\n        loopEnd: \"1m\",\n        loopStart: 0,\n        mute: false,\n        playbackRate: 1,\n        probability: 1,\n        value: null\n      });\n    }\n  }]);\n  return ToneEvent;\n}(ToneWithContext);","map":{"version":3,"mappings":"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","names":["ToneWithContext","TicksClass","defaultArg","optionsFromArguments","noOp","StateTimeline","isBoolean","isNumber","ToneEvent","getDefaults","arguments","options","_loop","loop","callback","value","_loopStart","toTicks","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","_probability","probability","_humanize","humanize","mute","_state","increasing","_rescheduleEvents","after","forEachFrom","duration","event","state","id","context","transport","clear","startTick","time","Math","round","startOffset","Infinity","_getLoopDuration","nextEvent","getAfter","min","setStateAtTime","interval","scheduleRepeat","_tick","bind","schedule","getValueAtTime","ticks","_startOffset","offset","prob","variation","add","cancel","previousEvent","getBefore","reschedulTime","getTicksAtTime","random","toSeconds","rate","lastEvent","get","loopDuration","progress","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\event\\ToneEvent.ts"],"sourcesContent":["import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._state.increasing = true;\n\t\t// schedule the events for the first time\n\t\tthis._rescheduleEvents();\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * const event = new Tone.ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * const note = new Tone.ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}