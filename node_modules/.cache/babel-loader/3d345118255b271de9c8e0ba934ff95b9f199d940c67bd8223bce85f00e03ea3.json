{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\nexport var LFOEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(LFOEffect, _Effect);\n  var _super = _createSuper(LFOEffect);\n  function LFOEffect(options) {\n    var _this;\n    _classCallCheck(this, LFOEffect);\n    _this = _super.call(this, options);\n    _this.name = \"LFOEffect\";\n    _this._lfo = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    _this.depth = _this._lfo.amplitude;\n    _this.frequency = _this._lfo.frequency;\n    _this.type = options.type;\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n    return _this;\n  }\n  _createClass(LFOEffect, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the effect.\n     */\n    function start(time) {\n      this._lfo.start(time);\n      return this;\n    }\n    /**\n     * Stop the lfo\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfo.stop(time);\n      return this;\n    }\n    /**\n     * Sync the filter to the transport. See [[LFO.sync]]\n     */\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfo.sync();\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport.\n     */\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfo.unsync();\n      return this;\n    }\n    /**\n     * The type of the LFO's oscillator: See [[Oscillator.type]]\n     * @example\n     * const autoFilter = new Tone.AutoFilter().start().toDestination();\n     * const noise = new Tone.Noise().start().connect(autoFilter);\n     * autoFilter.type = \"square\";\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfo.type;\n    },\n    set: function set(type) {\n      this._lfo.type = type;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LFOEffect.prototype), \"dispose\", this).call(this);\n      this._lfo.dispose();\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        frequency: 1,\n        type: \"sine\",\n        depth: 1\n      });\n    }\n  }]);\n  return LFOEffect;\n}(Effect);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,MAAM,QAAuB,kBAAkB;AAExD,SAASC,GAAG,QAAQ,0BAA0B;AAG9C,SAASC,QAAQ,QAAQ,wBAAwB;AASjD;;;AAGA,WAAsBC,SAA4C;EAAA;EAAA;EAoBjE,mBAAYC,OAAyB;IAAA;IAAA;IAEpC,0BAAMA,OAAO;IApBL,UAAI,GAAW,WAAW;IAsBlC,MAAKC,IAAI,GAAG,IAAIJ,GAAG,CAAC;MACnBK,OAAO,EAAE,MAAKA,OAAO;MACrBC,SAAS,EAAEH,OAAO,CAACG,SAAS;MAC5BC,SAAS,EAAEJ,OAAO,CAACK;KACnB,CAAC;IACF,MAAKA,KAAK,GAAG,MAAKJ,IAAI,CAACG,SAAS;IAChC,MAAKD,SAAS,GAAG,MAAKF,IAAI,CAACE,SAAS;IAEpC,MAAKG,IAAI,GAAGN,OAAO,CAACM,IAAI;IACxBR,QAAQ,gCAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAAC;EACxC;EAAC;IAAA;IAAA;IAUD;;;IAGA,eAAMS,IAAW;MAChB,IAAI,CAACN,IAAI,CAACO,KAAK,CAACD,IAAI,CAAC;MACrB,OAAO,IAAI;IACZ;IAEA;;;EAAA;IAAA;IAAA,OAGA,cAAKA,IAAW;MACf,IAAI,CAACN,IAAI,CAACQ,IAAI,CAACF,IAAI,CAAC;MACpB,OAAO,IAAI;IACZ;IAEA;;;EAAA;IAAA;IAAA,OAGA,gBAAI;MACH,IAAI,CAACN,IAAI,CAACS,IAAI,EAAE;MAChB,OAAO,IAAI;IACZ;IAEA;;;EAAA;IAAA;IAAA,OAGA,kBAAM;MACL,IAAI,CAACT,IAAI,CAACU,MAAM,EAAE;MAClB,OAAO,IAAI;IACZ;IAEA;;;;;;;EAAA;IAAA;IAAA,KAOA,eAAQ;MACP,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI;IACtB,CAAC;IAAA,KACD,aAASA,IAAI;MACZ,IAAI,CAACL,IAAI,CAACK,IAAI,GAAGA,IAAI;IACtB;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACL,IAAI,CAACW,OAAO,EAAE;MACnB,IAAI,CAACT,SAAS,CAACS,OAAO,EAAE;MACxB,IAAI,CAACP,KAAK,CAACO,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OA5DD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAClB,MAAM,CAACmB,WAAW,EAAE,EAAE;QAC1CZ,SAAS,EAAE,CAAC;QACZG,IAAI,EAAE,MAA4B;QAClCD,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EA1CwET,MAAe","names":["Effect","LFO","readOnly","LFOEffect","options","_lfo","context","frequency","amplitude","depth","type","time","start","stop","sync","unsync","dispose","Object","assign","getDefaults"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\LFOEffect.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * const autoFilter = new Tone.AutoFilter().start().toDestination();\n\t * const noise = new Tone.Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}