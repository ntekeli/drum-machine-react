{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport var createGainNodeConstructor = function createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(GainNode, _audioNodeConstructor);\n    var _super = _createSuper(GainNode);\n    function GainNode(context, options) {\n      var _this;\n      _classCallCheck(this, GainNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeGainNode, gainNodeRenderer);\n      // Bug #74: Safari does not export the correct values for maxValue and minValue.\n      _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      return _this;\n    }\n    _createClass(GainNode, [{\n      key: \"gain\",\n      get: function get() {\n        return this._gain;\n      }\n    }]);\n    return GainNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,0BAA0B,EAAEC,0BAA0B,QAAQ,cAAc;AAIrF,IAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,IAAI,EAAE;CACA;AAEV,OAAO,IAAMC,yBAAyB,GAAgC,SAAzDA,yBAAyB,CAClCC,oBAAoB,EACpBC,gBAAgB,EAChBC,sBAAsB,EACtBC,oBAAoB,EACpBC,gBAAgB,EAChBC,2BAA2B,EAC3B;EACA;IAAA;IAAA;IAGI,kBAAYC,OAAU,EAAEC,OAA+B;MAAA;MAAA;MACnD,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAO,CAAC;MAC/C,IAAMG,aAAa,mCAAQf,eAAe,GAAKa,OAAO,CAAE;MACxD,IAAMG,cAAc,GAAGP,oBAAoB,CAACK,aAAa,EAAEC,aAAa,CAAC;MACzE,IAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAa,CAAC;MAC5D,IAAMI,gBAAgB,GAAiCD,SAAS,GAAGT,sBAAsB,EAAE,GAAG,IAAK;MAEnG,0BAAMI,OAAO,EAAE,KAAK,EAAEI,cAAc,EAAEE,gBAAgB;MAEtD;MACA,MAAKC,KAAK,GAAGZ,gBAAgB,gCAAOU,SAAS,EAAED,cAAc,CAACZ,IAAI,EAAEL,0BAA0B,EAAED,0BAA0B,CAAC;MAAC;IAChI;IAAC;MAAA;MAAA,KAED,eAAQ;QACJ,OAAO,IAAI,CAACqB,KAAK;MACrB;IAAC;IAAA;EAAA,EAlB6Cb,oBAAuB;AAoB7E,CAAC","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","gain","createGainNodeConstructor","audioNodeConstructor","createAudioParam","createGainNodeRenderer","createNativeGainNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeGainNode","isOffline","gainNodeRenderer","_gain"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\gain-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IGainNode, IGainOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TGainNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n} as const;\n\nexport const createGainNodeConstructor: TGainNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class GainNode<T extends TContext> extends audioNodeConstructor<T> implements IGainNode<T> {\n        private _gain: IAudioParam;\n\n        constructor(context: T, options?: Partial<IGainOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createGainNodeRenderer() : null);\n\n            super(context, false, nativeGainNode, gainNodeRenderer);\n\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}