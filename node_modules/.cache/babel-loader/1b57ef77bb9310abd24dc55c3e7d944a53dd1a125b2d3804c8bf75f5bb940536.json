{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\nexport var MultibandCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandCompressor, _ToneAudioNode);\n  var _super = _createSuper(MultibandCompressor);\n  function MultibandCompressor() {\n    var _this;\n    _classCallCheck(this, MultibandCompressor);\n    _this = _super.call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n    _this.name = \"MultibandCompressor\";\n    var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    _this._splitter = _this.input = new MultibandSplit({\n      context: _this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    _this.lowFrequency = _this._splitter.lowFrequency;\n    _this.highFrequency = _this._splitter.highFrequency;\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.low = new Compressor(Object.assign(options.low, {\n      context: _this.context\n    }));\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.high = new Compressor(Object.assign(options.high, {\n      context: _this.context\n    }));\n    // connect the compressor\n    _this._splitter.low.chain(_this.low, _this.output);\n    _this._splitter.mid.chain(_this.mid, _this.output);\n    _this._splitter.high.chain(_this.high, _this.output);\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n  _createClass(MultibandCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandCompressor.prototype), \"dispose\", this).call(this);\n      this._splitter.dispose();\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.output.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        lowFrequency: 250,\n        highFrequency: 2000,\n        low: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        },\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        high: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        }\n      });\n    }\n  }]);\n  return MultibandCompressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","Compressor","optionsFromArguments","readOnly","MultibandSplit","Gain","MultibandCompressor","Object","assign","getDefaults","arguments","options","_splitter","input","context","lowFrequency","highFrequency","output","low","mid","high","chain","dispose","ratio","threshold","release","attack","knee"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\dynamics\\MultibandCompressor.ts"],"sourcesContent":["import { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface MultibandCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlow: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\thigh: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\nexport class MultibandCompressor extends ToneAudioNode<MultibandCompressorOptions> {\n\n\treadonly name: string = \"MultibandCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Split the incoming signal into high/mid/low\n\t */\n\tprivate _splitter: MultibandSplit;\n\n\t/**\n\t * low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The compressor applied to the low frequencies\n\t */\n\treadonly low: Compressor;\n\n\t/**\n\t * The compressor applied to the mid frequencies\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compressor applied to the high frequencies\n\t */\n\treadonly high: Compressor;\n\n\tconstructor(options?: RecursivePartial<MultibandCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n\n\t\tthis._splitter = this.input = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t\thighFrequency: options.highFrequency\n\t\t});\n\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\t\tthis.highFrequency = this._splitter.highFrequency;\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis.low = new Compressor(Object.assign(options.low, { context: this.context }));\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.high = new Compressor(Object.assign(options.high, { context: this.context }));\n\n\t\t// connect the compressor\n\t\tthis._splitter.low.chain(this.low, this.output);\n\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\tthis._splitter.high.chain(this.high, this.output);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tlowFrequency: 250,\n\t\t\thighFrequency: 2000,\n\t\t\tlow: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t},\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\thigh: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.output.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}