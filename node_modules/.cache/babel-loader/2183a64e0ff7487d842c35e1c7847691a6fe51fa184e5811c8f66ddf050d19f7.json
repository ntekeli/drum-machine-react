{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof as _mtof } from \"./Conversions\";\nimport { ftom as _ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport var FrequencyClass = /*#__PURE__*/function (_TimeClass) {\n  _inherits(FrequencyClass, _TimeClass);\n  var _super = _createSuper(FrequencyClass);\n  function FrequencyClass() {\n    var _this;\n    _classCallCheck(this, FrequencyClass);\n    _this = _super.apply(this, arguments);\n    _this.name = \"Frequency\";\n    _this.defaultUnits = \"hz\";\n    return _this;\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n  _createClass(FrequencyClass, [{\n    key: \"_getExpressions\",\n    value:\n    //-------------------------------------\n    // \tAUGMENT BASE EXPRESSIONS\n    //-------------------------------------\n    function _getExpressions() {\n      return Object.assign({}, _get(_getPrototypeOf(FrequencyClass.prototype), \"_getExpressions\", this).call(this), {\n        midi: {\n          regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n          method: function method(value) {\n            if (this.defaultUnits === \"midi\") {\n              return value;\n            } else {\n              return FrequencyClass.mtof(value);\n            }\n          }\n        },\n        note: {\n          regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n          method: function method(pitch, octave) {\n            var index = noteToScaleIndex[pitch.toLowerCase()];\n            var noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n            if (this.defaultUnits === \"midi\") {\n              return noteNumber;\n            } else {\n              return FrequencyClass.mtof(noteNumber);\n            }\n          }\n        },\n        tr: {\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n          method: function method(m, q, s) {\n            var total = 1;\n            if (m && m !== \"0\") {\n              total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n            }\n            if (q && q !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(q));\n            }\n            if (s && s !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(s) / 4);\n            }\n            return total;\n          }\n        }\n      });\n    }\n    //-------------------------------------\n    // \tEXPRESSIONS\n    //-------------------------------------\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return  A new transposed frequency\n     * @example\n     * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n     */\n  }, {\n    key: \"transpose\",\n    value: function transpose(interval) {\n      return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n    }\n    /**\n     * Takes an array of semitone intervals and returns\n     * an array of frequencies transposed by those intervals.\n     * @return  Returns an array of Frequencies\n     * @example\n     * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n     */\n  }, {\n    key: \"harmonize\",\n    value: function harmonize(intervals) {\n      var _this2 = this;\n      return intervals.map(function (interval) {\n        return _this2.transpose(interval);\n      });\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Frequency(\"C4\").toMidi(); // 60\n     */\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return _ftom(this.valueOf());\n    }\n    /**\n     * Return the value of the frequency in Scientific Pitch Notation\n     * @example\n     * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n     */\n  }, {\n    key: \"toNote\",\n    value: function toNote() {\n      var freq = this.toFrequency();\n      var log = Math.log2(freq / FrequencyClass.A4);\n      var noteNumber = Math.round(12 * log) + 57;\n      var octave = Math.floor(noteNumber / 12);\n      if (octave < 0) {\n        noteNumber += -12 * octave;\n      }\n      var noteName = scaleIndexToNote[noteNumber % 12];\n      return noteName + octave.toString();\n    }\n    /**\n     * Return the duration of one cycle in seconds.\n     */\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds() {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"toSeconds\", this).call(this);\n    }\n    /**\n     * Return the duration of one cycle in ticks\n     */\n  }, {\n    key: \"toTicks\",\n    value: function toTicks() {\n      var quarterTime = this._beatsToUnits(1);\n      var quarters = this.valueOf() / quarterTime;\n      return Math.floor(quarters * this._getPPQ());\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS HELPERS\n    //-------------------------------------\n    /**\n     * With no arguments, return 0\n     */\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return 0;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return freq;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"_beatsToUnits\", this).call(this, beats);\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return 1 / seconds;\n    }\n    /**\n     * Convert a MIDI note to frequency value.\n     * @param  midi The midi number to convert.\n     * @return The corresponding frequency value\n     */\n  }], [{\n    key: \"A4\",\n    get: function get() {\n      return getA4();\n    },\n    set: function set(freq) {\n      setA4(freq);\n    }\n  }, {\n    key: \"mtof\",\n    value: function mtof(midi) {\n      return _mtof(midi);\n    }\n    /**\n     * Convert a frequency value to a MIDI note.\n     * @param frequency The value to frequency value to convert.\n     */\n  }, {\n    key: \"ftom\",\n    value: function ftom(frequency) {\n      return _ftom(frequency);\n    }\n  }]);\n  return FrequencyClass;\n}(TimeClass);\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n/**\n * Note to scale index.\n * @hidden\n */\nvar noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\nvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":{"version":3,"mappings":"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","names":["getContext","intervalToFrequencyRatio","mtof","ftom","getA4","setA4","TimeClass","FrequencyClass","Object","assign","midi","regexp","method","value","defaultUnits","note","pitch","octave","index","noteToScaleIndex","toLowerCase","noteNumber","parseInt","tr","m","q","s","total","_beatsToUnits","_getTimeSignature","parseFloat","interval","context","valueOf","intervals","map","transpose","freq","toFrequency","log","Math","log2","A4","round","floor","noteName","scaleIndexToNote","toString","quarterTime","quarters","_getPPQ","ticks","_getBpm","beats","seconds","frequency","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","e","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","a","ax","bbb","bb","b","bx","Frequency","units"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\type\\Frequency.ts"],"sourcesContent":["import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}