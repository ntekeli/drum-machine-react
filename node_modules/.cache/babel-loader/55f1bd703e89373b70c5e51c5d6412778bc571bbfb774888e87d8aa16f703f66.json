{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport var PWMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PWMOscillator, _Source);\n  var _super = _createSuper(PWMOscillator);\n  function PWMOscillator() {\n    var _this;\n    _classCallCheck(this, PWMOscillator);\n    _this = _super.call(this, optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    _this.name = \"PWMOscillator\";\n    _this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n    _this._scale = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    var options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    _this._pulse = new PulseOscillator({\n      context: _this.context,\n      frequency: options.modulationFrequency\n    });\n    // change the pulse oscillator type\n    _this._pulse.carrierType = \"sine\";\n    _this.modulationFrequency = _this._pulse.frequency;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase\n    });\n    _this.frequency = _this._modulator.frequency;\n    _this.detune = _this._modulator.detune;\n    // connections\n    _this._modulator.chain(_this._scale, _this._pulse.width);\n    _this._pulse.connect(_this.output);\n    readOnly(_assertThisInitialized(_this), [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n  _createClass(PWMOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      time = this.toSeconds(time);\n      this._modulator.start(time);\n      this._pulse.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n      this._modulator.stop(time);\n      this._pulse.stop(time);\n    }\n    /**\n     * restart the oscillator\n     */\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n      this._pulse.restart(time);\n    }\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._modulator.phase;\n    },\n    set: function set(phase) {\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", generateWaveform(this, length));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PWMOscillator.prototype), \"dispose\", this).call(this);\n      this._pulse.dispose();\n      this._scale.dispose();\n      this._modulator.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        modulationFrequency: 0.4,\n        phase: 0,\n        type: \"pwm\"\n      });\n    }\n  }]);\n  return PWMOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","readOnly","Multiply","Source","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","getDefaults","arguments","context","value","options","_pulse","frequency","modulationFrequency","carrierType","_modulator","detune","onstop","phase","chain","_scale","width","connect","output","time","toSeconds","start","stop","restart","length","dispose","Object","assign","type"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\source\\oscillator\\PWMOscillator.ts"],"sourcesContent":["import { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The width modulation rate of the oscillator.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.PWMOscillator(20, 2).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\tthis._pulse.carrierType = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}