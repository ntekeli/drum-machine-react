{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport var MetalSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(MetalSynth, _Monophonic);\n  var _super = _createSuper(MetalSynth);\n  function MetalSynth() {\n    var _this;\n    _classCallCheck(this, MetalSynth);\n    _this = _super.call(this, optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    _this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n    _this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n    _this._freqMultipliers = [];\n    var options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this._amplitude = new Gain({\n      context: _this.context,\n      gain: 0\n    }).connect(_this.output);\n    _this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: _this.context,\n      type: \"highpass\"\n    }).connect(_this._amplitude);\n    for (var i = 0; i < inharmRatios.length; i++) {\n      var osc = new FMOscillator({\n        context: _this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? function () {\n          return _this.onsilence(_assertThisInitialized(_this));\n        } : noOp,\n        type: \"square\"\n      });\n      osc.connect(_this._highpass);\n      _this._oscillators[i] = osc;\n      var mult = new Multiply({\n        context: _this.context,\n        value: inharmRatios[i]\n      });\n      _this._freqMultipliers[i] = mult;\n      _this.frequency.chain(mult, osc.frequency);\n      _this.detune.connect(osc.detune);\n    }\n    _this._filterFreqScaler = new Scale({\n      context: _this.context,\n      max: 7000,\n      min: _this.toFrequency(options.resonance)\n    });\n    _this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: _this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n    _this.envelope.chain(_this._filterFreqScaler, _this._highpass.frequency);\n    _this.envelope.connect(_this._amplitude.gain);\n    // set the octaves\n    _this._octaves = options.octaves;\n    _this.octaves = options.octaves;\n    return _this;\n  }\n  _createClass(MetalSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity that the envelope should be triggered at.\n     */\n    function _triggerEnvelopeAttack(time) {\n      var _this2 = this;\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.envelope.triggerAttack(time, velocity);\n      this._oscillators.forEach(function (osc) {\n        return osc.start(time);\n      });\n      if (this.envelope.sustain === 0) {\n        this._oscillators.forEach(function (osc) {\n          osc.stop(time + _this2.toSeconds(_this2.envelope.attack) + _this2.toSeconds(_this2.envelope.decay));\n        });\n      }\n      return this;\n    }\n    /**\n     * Trigger the release of the envelope.\n     * @param time When the release should be triggered.\n     */\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      var _this3 = this;\n      this.envelope.triggerRelease(time);\n      this._oscillators.forEach(function (osc) {\n        return osc.stop(time + _this3.toSeconds(_this3.envelope.release));\n      });\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * The modulationIndex of the oscillators which make up the source.\n     * see [[FMOscillator.modulationIndex]]\n     * @min 1\n     * @max 100\n     */\n  }, {\n    key: \"modulationIndex\",\n    get: function get() {\n      return this._oscillators[0].modulationIndex.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.modulationIndex.value = val;\n      });\n    }\n    /**\n     * The harmonicity of the oscillators which make up the source.\n     * see Tone.FMOscillator.harmonicity\n     * @min 0.1\n     * @max 10\n     */\n  }, {\n    key: \"harmonicity\",\n    get: function get() {\n      return this._oscillators[0].harmonicity.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.harmonicity.value = val;\n      });\n    }\n    /**\n     * The lower level of the highpass filter which is attached to the envelope.\n     * This value should be between [0, 7000]\n     * @min 0\n     * @max 7000\n     */\n  }, {\n    key: \"resonance\",\n    get: function get() {\n      return this._filterFreqScaler.min;\n    },\n    set: function set(val) {\n      this._filterFreqScaler.min = this.toFrequency(val);\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the \"resonance\" frequency\n     * that the filter ramps during the attack/decay envelope\n     * @min 0\n     * @max 8\n     */\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(val) {\n      this._octaves = val;\n      this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MetalSynth.prototype), \"dispose\", this).call(this);\n      this._oscillators.forEach(function (osc) {\n        return osc.dispose();\n      });\n      this._freqMultipliers.forEach(function (freqMult) {\n        return freqMult.dispose();\n      });\n      this.frequency.dispose();\n      this.detune.dispose();\n      this._filterFreqScaler.dispose();\n      this._amplitude.dispose();\n      this.envelope.dispose();\n      this._highpass.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.001,\n          decay: 1.4,\n          release: 0.2\n        }),\n        harmonicity: 5.1,\n        modulationIndex: 32,\n        octaves: 1.5,\n        resonance: 4000\n      });\n    }\n  }]);\n  return MetalSynth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["Envelope","Filter","Gain","ToneAudioNode","deepMerge","omitFromObject","optionsFromArguments","noOp","Multiply","Scale","Signal","FMOscillator","Monophonic","inharmRatios","MetalSynth","getDefaults","arguments","options","detune","context","units","value","frequency","_amplitude","gain","connect","output","_highpass","Q","type","i","length","osc","harmonicity","modulationIndex","modulationType","onstop","onsilence","_oscillators","mult","_freqMultipliers","chain","_filterFreqScaler","max","min","toFrequency","resonance","envelope","attack","attackCurve","decay","release","sustain","_octaves","octaves","time","velocity","triggerAttack","forEach","start","stop","toSeconds","triggerRelease","getValueAtTime","val","Math","pow","dispose","freqMult","Object","assign","keys"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\MetalSynth.ts"],"sourcesContent":["import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\t// Q: -3.0102999566398125,\n\t\t\tQ: 0,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}