{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ntekeli\\\\Desktop\\\\drum-machine\\\\drum-machine\\\\src\\\\store\\\\ControlProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport VolumeContext from \"./VolumeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  instrumentLevels: [0, 0, 0, 0, 0],\n  instrumentMute: [false, false, false, false, false]\n};\nconst instrumentReducer = (state, action) => {\n  const instrumentIndex = state.instrumentLevels.findIndex((instrument, index) => index === action.id);\n  if (action.type === \"VOLUME\") {\n    const newLevel = action.level;\n    const newInstrumentLevels = state.instrumentLevels;\n    newInstrumentLevels[instrumentIndex] = newLevel;\n    return {\n      instrumentLevels: newInstrumentLevels,\n      instrumentMute: state.instrumentMute\n    };\n  }\n  if (action.type === \"MUTE\") {\n    const newMuteState = state.instrumentMute;\n    newMuteState[instrumentIndex] = false;\n    return {\n      instrumentLevels: state.instrumentLevels,\n      instrumentMute: newMuteState\n    };\n  }\n  if (action.type === \"UNMUTE\") {\n    const newMuteState = state.instrumentMute;\n    newMuteState[instrumentIndex] = true;\n    return {\n      instrumentLevels: state.instrumentLevels,\n      instrumentMute: newMuteState\n    };\n  }\n  if (action.type === \"SOLO\") {\n    let newSoloState = state.instrumentMute;\n    newSoloState.forEach((element, index) => {\n      newSoloState[index] = true;\n    });\n    newSoloState[instrumentIndex] = false;\n    return {\n      instrumentLevels: state.instrumentLevels,\n      instrumentMute: newSoloState\n    };\n  }\n  if (action.type === \"UNSOLO\") {\n    const newSoloState = [false, false, false, false, false];\n    return {\n      instrumentLevels: state.instrumentLevels,\n      instrumentMute: newSoloState\n    };\n  }\n  return {\n    defaultState\n  };\n};\nfunction ControlProvider(props) {\n  _s();\n  const [volumeState, dispatchControl] = useReducer(instrumentReducer, defaultState);\n  const volumeHandler = (level, id) => {\n    dispatchControl({\n      type: \"VOLUME\",\n      level: level,\n      id: id\n    });\n  };\n  const muteHandler = id => {\n    dispatchControl({\n      type: \"MUTE\",\n      id: id\n    });\n  };\n  const unmuteHandler = id => {\n    dispatchControl({\n      type: \"UNMUTE\",\n      id: id\n    });\n  };\n  const soloHandler = id => {\n    dispatchControl({\n      type: \"SOLO\",\n      id: id\n    });\n  };\n  const unsoloHandler = id => {\n    dispatchControl({\n      type: \"UNSOLO\",\n      id: id\n    });\n  };\n  const controlContext = {\n    instrumentLevels: volumeState.instrumentLevels,\n    instrumentMute: volumeState.instrumentMute,\n    volumeHandler: volumeHandler,\n    muteHandler: muteHandler,\n    unmuteHandler: unmuteHandler,\n    soloHandler: soloHandler,\n    unsoloHandler: unsoloHandler\n  };\n  return /*#__PURE__*/_jsxDEV(VolumeContext.Provider, {\n    value: controlContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(ControlProvider, \"H3nHEC3R9Gt+Fr345rKpeWKhpEE=\");\n_c = ControlProvider;\nexport default ControlProvider;\nvar _c;\n$RefreshReg$(_c, \"ControlProvider\");","map":{"version":3,"names":["useReducer","VolumeContext","defaultState","instrumentLevels","instrumentMute","instrumentReducer","state","action","instrumentIndex","findIndex","instrument","index","id","type","newLevel","level","newInstrumentLevels","newMuteState","newSoloState","forEach","element","ControlProvider","props","volumeState","dispatchControl","volumeHandler","muteHandler","unmuteHandler","soloHandler","unsoloHandler","controlContext","children"],"sources":["C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/src/store/ControlProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\r\nimport VolumeContext from \"./VolumeContext\";\r\n\r\nconst defaultState = {\r\n  instrumentLevels: [0, 0, 0, 0, 0],\r\n  instrumentMute: [false, false, false, false, false],\r\n};\r\n\r\nconst instrumentReducer = (state, action) => {\r\n  const instrumentIndex = state.instrumentLevels.findIndex(\r\n    (instrument, index) => index === action.id\r\n  );\r\n\r\n  if (action.type === \"VOLUME\") {\r\n    const newLevel = action.level;\r\n    const newInstrumentLevels = state.instrumentLevels;\r\n    newInstrumentLevels[instrumentIndex] = newLevel;\r\n    return {\r\n      instrumentLevels: newInstrumentLevels,\r\n      instrumentMute: state.instrumentMute,\r\n    };\r\n  }\r\n  if (action.type === \"MUTE\") {\r\n    const newMuteState = state.instrumentMute;\r\n    newMuteState[instrumentIndex] = false;\r\n    return {\r\n      instrumentLevels: state.instrumentLevels,\r\n      instrumentMute: newMuteState,\r\n    };\r\n  }\r\n  if (action.type === \"UNMUTE\") {\r\n    const newMuteState = state.instrumentMute;\r\n    newMuteState[instrumentIndex] = true;\r\n    return {\r\n      instrumentLevels: state.instrumentLevels,\r\n      instrumentMute: newMuteState,\r\n    };\r\n  }\r\n  if (action.type === \"SOLO\") {\r\n    let newSoloState = state.instrumentMute;\r\n    newSoloState.forEach((element, index) => {\r\n      newSoloState[index] = true;\r\n    })\r\n    \r\n    newSoloState[instrumentIndex] = false;\r\n   \r\n    return {\r\n      instrumentLevels: state.instrumentLevels,\r\n      instrumentMute: newSoloState,\r\n    }\r\n  }\r\n  if (action.type === \"UNSOLO\") {\r\n    \r\n    const newSoloState = [false, false, false, false, false];\r\n    return {\r\n      instrumentLevels: state.instrumentLevels,\r\n      instrumentMute: newSoloState\r\n    }\r\n  }\r\n  return { defaultState };\r\n};\r\n\r\nfunction ControlProvider(props) {\r\n  const [volumeState, dispatchControl] = useReducer(\r\n    instrumentReducer,\r\n    defaultState\r\n  );\r\n\r\n  const volumeHandler = (level, id) => {\r\n    dispatchControl({ type: \"VOLUME\", level: level, id: id });\r\n  };\r\n  const muteHandler = (id) => {\r\n    dispatchControl({ type: \"MUTE\", id: id });\r\n  };\r\n  const unmuteHandler = (id) => {\r\n    dispatchControl({ type: \"UNMUTE\", id: id });\r\n  };\r\n  const soloHandler = (id) => {\r\n    dispatchControl({ type: \"SOLO\", id: id })\r\n  }\r\n  const unsoloHandler = (id) => {\r\n    dispatchControl({ type: \"UNSOLO\", id: id })\r\n  }\r\n  const controlContext = {\r\n    instrumentLevels: volumeState.instrumentLevels,\r\n    instrumentMute: volumeState.instrumentMute,\r\n    volumeHandler: volumeHandler,\r\n    muteHandler: muteHandler,\r\n    unmuteHandler: unmuteHandler,\r\n    soloHandler: soloHandler,\r\n    unsoloHandler: unsoloHandler,\r\n  };\r\n  return (\r\n    <VolumeContext.Provider value={controlContext}>\r\n      {props.children}\r\n    </VolumeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ControlProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}