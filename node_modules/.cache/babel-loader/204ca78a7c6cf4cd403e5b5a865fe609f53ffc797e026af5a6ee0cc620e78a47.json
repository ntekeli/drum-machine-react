{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\nexport var ModulationSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(ModulationSynth, _Monophonic);\n  var _super = _createSuper(ModulationSynth);\n  function ModulationSynth() {\n    var _this;\n    _classCallCheck(this, ModulationSynth);\n    _this = _super.call(this, optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    _this.name = \"ModulationSynth\";\n    var options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    _this._carrier = new Synth({\n      context: _this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: function onsilence() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      },\n      volume: -10\n    });\n    _this._modulator = new Synth({\n      context: _this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    _this.oscillator = _this._carrier.oscillator;\n    _this.envelope = _this._carrier.envelope;\n    _this.modulation = _this._modulator.oscillator;\n    _this.modulationEnvelope = _this._modulator.envelope;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    _this._modulationNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    return _this;\n  }\n  _createClass(ModulationSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack portion of the note\n     */\n    function _triggerEnvelopeAttack(time, velocity) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeAttack(time, velocity);\n      // @ts-ignore\n      this._modulator._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeRelease(time);\n      // @ts-ignore\n      this._modulator._triggerEnvelopeRelease(time);\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ModulationSynth.prototype), \"dispose\", this).call(this);\n      this._carrier.dispose();\n      this._modulator.dispose();\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n      this._modulationNode.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Monophonic.getDefaults(), {\n        harmonicity: 3,\n        oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"sine\"\n        }),\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.01,\n          decay: 0.01,\n          sustain: 1,\n          release: 0.5\n        }),\n        modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"square\"\n        }),\n        modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.5,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        })\n      });\n    }\n  }]);\n  return ModulationSynth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["Signal","Multiply","Gain","Envelope","ToneAudioNode","Monophonic","OmniOscillator","Source","Synth","readOnly","omitFromObject","optionsFromArguments","ModulationSynth","getDefaults","arguments","options","_carrier","context","oscillator","envelope","onsilence","volume","_modulator","modulation","modulationEnvelope","frequency","units","detune","value","harmonicity","minValue","_modulationNode","gain","time","velocity","_triggerEnvelopeAttack","_triggerEnvelopeRelease","toSeconds","getValueAtTime","dispose","Object","assign","keys","type","attack","decay","sustain","release"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\ModulationSynth.ts"],"sourcesContent":["import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t\tminValue: 0,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}