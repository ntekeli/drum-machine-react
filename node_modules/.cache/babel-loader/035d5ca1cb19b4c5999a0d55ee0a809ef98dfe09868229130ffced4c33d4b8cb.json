{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport var createPannerNodeConstructor = function createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(PannerNode, _audioNodeConstructor);\n    var _super = _createSuper(PannerNode);\n    function PannerNode(context, options) {\n      var _this;\n      _classCallCheck(this, PannerNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativePannerNode, pannerNodeRenderer);\n      _this._nativePannerNode = nativePannerNode;\n      // Bug #74: Safari does not export the correct values for maxValue and minValue.\n      _this._orientationX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n    _createClass(PannerNode, [{\n      key: \"coneInnerAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneInnerAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneInnerAngle = value;\n      }\n    }, {\n      key: \"coneOuterAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterAngle = value;\n      }\n    }, {\n      key: \"coneOuterGain\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterGain;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterGain = value;\n      }\n    }, {\n      key: \"distanceModel\",\n      get: function get() {\n        return this._nativePannerNode.distanceModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.distanceModel = value;\n      }\n    }, {\n      key: \"maxDistance\",\n      get: function get() {\n        return this._nativePannerNode.maxDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.maxDistance = value;\n      }\n    }, {\n      key: \"orientationX\",\n      get: function get() {\n        return this._orientationX;\n      }\n    }, {\n      key: \"orientationY\",\n      get: function get() {\n        return this._orientationY;\n      }\n    }, {\n      key: \"orientationZ\",\n      get: function get() {\n        return this._orientationZ;\n      }\n    }, {\n      key: \"panningModel\",\n      get: function get() {\n        return this._nativePannerNode.panningModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.panningModel = value;\n      }\n    }, {\n      key: \"positionX\",\n      get: function get() {\n        return this._positionX;\n      }\n    }, {\n      key: \"positionY\",\n      get: function get() {\n        return this._positionY;\n      }\n    }, {\n      key: \"positionZ\",\n      get: function get() {\n        return this._positionZ;\n      }\n    }, {\n      key: \"refDistance\",\n      get: function get() {\n        return this._nativePannerNode.refDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.refDistance = value;\n      }\n    }, {\n      key: \"rolloffFactor\",\n      get: function get() {\n        return this._nativePannerNode.rolloffFactor;\n      },\n      set: function set(value) {\n        this._nativePannerNode.rolloffFactor = value;\n      }\n    }]);\n    return PannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\panner-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IPannerNode, IPannerOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TContext,\n    TDistanceModelType,\n    TNativePannerNode,\n    TPannerNodeConstructorFactory,\n    TPanningModelType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n} as const;\n\nexport const createPannerNodeConstructor: TPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class PannerNode<T extends TContext> extends audioNodeConstructor<T> implements IPannerNode<T> {\n        private _nativePannerNode: TNativePannerNode;\n\n        private _orientationX: IAudioParam;\n\n        private _orientationY: IAudioParam;\n\n        private _orientationZ: IAudioParam;\n\n        private _positionX: IAudioParam;\n\n        private _positionY: IAudioParam;\n\n        private _positionZ: IAudioParam;\n\n        constructor(context: T, options?: Partial<IPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createPannerNodeRenderer() : null);\n\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get coneInnerAngle(): number {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n\n        get coneOuterAngle(): number {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n\n        get coneOuterGain(): number {\n            return this._nativePannerNode.coneOuterGain;\n        }\n\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n\n        get distanceModel(): TDistanceModelType {\n            return this._nativePannerNode.distanceModel;\n        }\n\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n\n        get maxDistance(): number {\n            return this._nativePannerNode.maxDistance;\n        }\n\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n\n        get orientationX(): IAudioParam {\n            return this._orientationX;\n        }\n\n        get orientationY(): IAudioParam {\n            return this._orientationY;\n        }\n\n        get orientationZ(): IAudioParam {\n            return this._orientationZ;\n        }\n\n        get panningModel(): TPanningModelType {\n            return this._nativePannerNode.panningModel;\n        }\n\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n\n        get positionX(): IAudioParam {\n            return this._positionX;\n        }\n\n        get positionY(): IAudioParam {\n            return this._positionY;\n        }\n\n        get positionZ(): IAudioParam {\n            return this._positionZ;\n        }\n\n        get refDistance(): number {\n            return this._nativePannerNode.refDistance;\n        }\n\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n\n        get rolloffFactor(): number {\n            return this._nativePannerNode.rolloffFactor;\n        }\n\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}