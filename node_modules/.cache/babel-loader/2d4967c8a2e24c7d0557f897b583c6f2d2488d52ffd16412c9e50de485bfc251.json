{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport var AMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(AMOscillator, _Source);\n  var _super = _createSuper(AMOscillator);\n  function AMOscillator() {\n    var _this;\n    _classCallCheck(this, AMOscillator);\n    _this = _super.call(this, optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    _this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n    _this._modulationNode = new Gain({\n      context: _this.context\n    });\n    var options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    _this._carrier = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: options.type\n    });\n    _this.frequency = _this._carrier.frequency, _this.detune = _this._carrier.detune;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    // connections\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n    _this._carrier.chain(_this._modulationNode, _this.output);\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\", \"harmonicity\"]);\n    return _this;\n  }\n  _createClass(AMOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      this._modulator.start(time);\n      this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._modulator.stop(time);\n      this._carrier.stop(time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n      this._carrier.restart(time);\n    }\n    /**\n     * The type of the carrier oscillator\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._carrier.type;\n    },\n    set: function set(type) {\n      this._carrier.type = type;\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._carrier.baseType;\n    },\n    set: function set(baseType) {\n      this._carrier.baseType = baseType;\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._carrier.partialCount;\n    },\n    set: function set(partialCount) {\n      this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n  }, {\n    key: \"modulationType\",\n    get: function get() {\n      return this._modulator.type;\n    },\n    set: function set(type) {\n      this._modulator.type = type;\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._carrier.phase;\n    },\n    set: function set(phase) {\n      this._carrier.phase = phase;\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._carrier.partials;\n    },\n    set: function set(partials) {\n      this._carrier.partials = partials;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", generateWaveform(this, length));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AMOscillator.prototype), \"dispose\", this).call(this);\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n      this._carrier.dispose();\n      this._modulator.dispose();\n      this._modulationNode.dispose();\n      this._modulationScale.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        harmonicity: 1,\n        modulationType: \"square\"\n      });\n    }\n  }]);\n  return AMOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","AudioToGain","Multiply","Source","Oscillator","generateWaveform","AMOscillator","getDefaults","arguments","context","options","_carrier","detune","frequency","onstop","phase","type","_modulator","modulationType","harmonicity","units","value","chain","_modulationScale","_modulationNode","gain","output","time","start","stop","restart","baseType","partialCount","partials","length","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\source\\oscillator\\AMOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tAMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface,\n\tToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amOsc = new Tone.AMOscillator(\"D2\").toDestination().start();\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Tone.Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}