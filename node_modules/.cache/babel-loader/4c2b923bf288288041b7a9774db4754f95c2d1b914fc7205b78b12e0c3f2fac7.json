{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport var Waveform = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Waveform, _MeterBase);\n  var _super = _createSuper(Waveform);\n  function Waveform() {\n    var _this;\n    _classCallCheck(this, Waveform);\n    _this = _super.call(this, optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n    _this.name = \"Waveform\";\n    var options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    _this._analyser.type = \"waveform\";\n    _this.size = options.size;\n    return _this;\n  }\n  _createClass(Waveform, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    function getValue() {\n      return this._analyser.getValue();\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]].\n     */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analyser.size;\n    },\n    set: function set(size) {\n      this._analyser.size = size;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        size: 1024\n      });\n    }\n  }]);\n  return Waveform;\n}(MeterBase);","map":{"version":3,"mappings":";;;;AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AASzD;;;;AAIA,WAAaC,QAAS;EAAA;EAAA;EASrB;IAAA;IAAA;IACC,0BAAMF,oBAAoB,CAACE,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;IAR/D,UAAI,GAAW,UAAU;IASjC,IAAMC,OAAO,GAAGL,oBAAoB,CAACE,QAAQ,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;IAEjF,MAAKE,SAAS,CAACC,IAAI,GAAG,UAAU;IAChC,MAAKC,IAAI,GAAGH,OAAO,CAACG,IAAI;IAAC;EAC1B;EAAC;IAAA;IAAA;IAQD;;;;IAIA,oBAAQ;MACP,OAAO,IAAI,CAACF,SAAS,CAACG,QAAQ,EAAkB;IACjD;IAEA;;;;EAAA;IAAA;IAAA,KAIA,eAAQ;MACP,OAAO,IAAI,CAACH,SAAS,CAACE,IAAI;IAC3B,CAAC;IAAA,KACD,aAASA,IAAI;MACZ,IAAI,CAACF,SAAS,CAACE,IAAI,GAAGA,IAAI;IAC3B;EAAC;IAAA;IAAA,OAvBD,uBAAkB;MACjB,OAAOE,MAAM,CAACC,MAAM,CAACV,SAAS,CAACE,WAAW,EAAE,EAAE;QAC7CK,IAAI,EAAE;OACN,CAAC;IACH;EAAC;EAAA;AAAA,EArB4BP,SAA0B","names":["optionsFromArguments","MeterBase","Waveform","getDefaults","arguments","options","_analyser","type","size","getValue","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\analysis\\Waveform.ts"],"sourcesContent":["import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue() as Float32Array;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}