{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  /*\n   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n   * behavior.\n   */\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  pan: 0\n};\nexport var createStereoPannerNodeConstructor = function createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(StereoPannerNode, _audioNodeConstructor);\n    var _super = _createSuper(StereoPannerNode);\n    function StereoPannerNode(context, options) {\n      var _this;\n      _classCallCheck(this, StereoPannerNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n      _this._pan = createAudioParam(_assertThisInitialized(_this), isOffline, nativeStereoPannerNode.pan);\n      return _this;\n    }\n    _createClass(StereoPannerNode, [{\n      key: \"pan\",\n      get: function get() {\n        return this._pan;\n      }\n    }]);\n    return StereoPannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACf;;;;EAIAC,gBAAgB,EAAE,UAAU;EAC5BC,qBAAqB,EAAE,UAAU;EACjCC,GAAG,EAAE;CACC;AAEV,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAiC,CAC1CC,oBAAoB,EACpBC,gBAAgB,EAChBC,4BAA4B,EAC5BC,8BAA8B,EAC9BC,gBAAgB,EAChBC,2BAA2B,EAC3B;EACA;IAAA;IAAA;IAGI,0BAAYC,OAAU,EAAEC,OAAuC;MAAA;MAAA;MAC3D,IAAMC,aAAa,GAAGJ,gBAAgB,CAACE,OAAO,CAAC;MAC/C,IAAMG,aAAa,mCAAQf,eAAe,GAAKa,OAAO,CAAE;MACxD,IAAMG,sBAAsB,GAAGR,4BAA4B,CAACM,aAAa,EAAEC,aAAa,CAAC;MACzF,IAAME,SAAS,GAAGN,2BAA2B,CAACG,aAAa,CAAC;MAC5D,IAAMI,wBAAwB,GAAiCD,SAAS,GAAGR,8BAA8B,EAAE,GAAG,IAAK;MAEnH,0BAAMG,OAAO,EAAE,KAAK,EAAEI,sBAAsB,EAAEE,wBAAwB;MAEtE,MAAKC,IAAI,GAAGZ,gBAAgB,gCAAOU,SAAS,EAAED,sBAAsB,CAACZ,GAAG,CAAC;MAAC;IAC9E;IAAC;MAAA;MAAA,KAED,eAAO;QACH,OAAO,IAAI,CAACe,IAAI;MACpB;IAAC;IAAA;EAAA,EAjBqDb,oBAAuB;AAmBrF,CAAC","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","pan","createStereoPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativeStereoPannerNode","createStereoPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeStereoPannerNode","isOffline","stereoPannerNodeRenderer","_pan"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\stereo-panner-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IStereoPannerNode, IStereoPannerOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TStereoPannerNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n} as const;\n\nexport const createStereoPannerNodeConstructor: TStereoPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class StereoPannerNode<T extends TContext> extends audioNodeConstructor<T> implements IStereoPannerNode<T> {\n        private _pan: IAudioParam;\n\n        constructor(context: T, options?: Partial<IStereoPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createStereoPannerNodeRenderer() : null);\n\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);\n        }\n\n        get pan(): IAudioParam {\n            return this._pan;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}