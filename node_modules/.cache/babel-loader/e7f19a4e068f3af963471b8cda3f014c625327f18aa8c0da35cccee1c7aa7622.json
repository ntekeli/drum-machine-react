{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport var BiquadFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(BiquadFilter, _ToneAudioNode);\n  var _super = _createSuper(BiquadFilter);\n  function BiquadFilter() {\n    var _this;\n    _classCallCheck(this, BiquadFilter);\n    _this = _super.call(this, optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"BiquadFilter\";\n    var options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._filter = _this.context.createBiquadFilter();\n    _this.input = _this.output = _this._filter;\n    _this.Q = new Param({\n      context: _this.context,\n      units: \"number\",\n      value: options.Q,\n      param: _this._filter.Q\n    });\n    _this.frequency = new Param({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: _this._filter.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: _this._filter.detune\n    });\n    _this.gain = new Param({\n      context: _this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: _this._filter.gain\n    });\n    _this.type = options.type;\n    return _this;\n  }\n  _createClass(BiquadFilter, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n     * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n     */\n    function get() {\n      return this._filter.type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._filter.type = type;\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      // start with all 1s\n      var freqValues = new Float32Array(len);\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n      // clone the filter to remove any connections which may be changing the value\n      var filterClone = this.context.createBiquadFilter();\n      filterClone.type = this.type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BiquadFilter.prototype), \"dispose\", this).call(this);\n      this._filter.disconnect();\n      this.Q.dispose();\n      this.frequency.dispose();\n      this.gain.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        type: \"lowpass\",\n        frequency: 350,\n        detune: 0,\n        gain: 0\n      });\n    }\n  }]);\n  return BiquadFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Param","assert","BiquadFilter","getDefaults","arguments","options","_filter","context","createBiquadFilter","input","output","Q","units","value","param","frequency","detune","gain","convert","type","types","indexOf","len","freqValues","Float32Array","i","norm","Math","pow","freq","magValues","phaseValues","filterClone","getFrequencyResponse","disconnect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\filter\\BiquadFilter.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n\nexport interface BiquadFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tQ: number;\n\ttype: BiquadFilterType;\n\tgain: GainFactor;\n}\n\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode). \n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value. \n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode<BiquadFilterOptions> {\n\treadonly name: string = \"BiquadFilter\";\n\n\treadonly input: BiquadFilterNode;\n\treadonly output: BiquadFilterNode;\n\n\t/**\n\t * The frequency of the filter\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * A detune value, in cents, for the frequency.\n\t */\n\treadonly detune: Param<\"cents\">;\n\t\n\t/**\n\t * The Q factor of the filter.\n\t * For lowpass and highpass filters the Q value is interpreted to be in dB. \n\t * For these filters the nominal range is [−𝑄𝑙𝑖𝑚,𝑄𝑙𝑖𝑚] where 𝑄𝑙𝑖𝑚 is the largest value for which 10𝑄/20 does not overflow. This is approximately 770.63678.\n\t * For the bandpass, notch, allpass, and peaking filters, this value is a linear value. \n\t * The value is related to the bandwidth of the filter and hence should be a positive value. The nominal range is \n\t * [0,3.4028235𝑒38], the upper limit being the most-positive-single-float.\n\t * This is not used for the lowshelf and highshelf filters.\n\t */\n\treadonly Q: Param<\"number\">;\n\n\t/**\n\t * The gain of the filter. Its value is in dB units. The gain is only used for lowshelf, highshelf, and peaking filters.\n\t */\n\treadonly gain: Param<\"decibels\">;\n\n\tprivate readonly _filter: BiquadFilterNode;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType);\n\tconstructor(options?: Partial<BiquadFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._filter = this.context.createBiquadFilter();\n\t\tthis.input = this.output = this._filter;\n\n\t\tthis.Q = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"number\",\n\t\t\tvalue: options.Q,\n\t\t\tparam: this._filter.Q,\n\t\t});\n\t\t\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tparam: this._filter.frequency,\n\t\t});\n\t\t\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t\tparam: this._filter.detune,\n\t\t});\n\t\t\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t\tparam: this._filter.gain,\n\t\t});\n\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): BiquadFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\ttype: \"lowpass\" as const,\n\t\t\tfrequency: 350,\n\t\t\tdetune: 0,\n\t\t\tgain: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n\t * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._filter.type;\n\t}\n\tset type(type) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._filter.type = type;\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\t// clone the filter to remove any connections which may be changing the value\n\t\tconst filterClone = this.context.createBiquadFilter();\n\t\tfilterClone.type = this.type;\n\t\tfilterClone.Q.value = this.Q.value;\n\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\tfilterClone.gain.value = this.gain.value as number;\n\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filter.disconnect();\n\t\tthis.Q.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.gain.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}