{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport var Panner3D = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Panner3D, _ToneAudioNode);\n  var _super = _createSuper(Panner3D);\n  function Panner3D() {\n    var _this;\n    _classCallCheck(this, Panner3D);\n    _this = _super.call(this, optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    _this.name = \"Panner3D\";\n    var options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    _this._panner = _this.input = _this.output = _this.context.createPanner();\n    // set some values\n    _this.panningModel = options.panningModel;\n    _this.maxDistance = options.maxDistance;\n    _this.distanceModel = options.distanceModel;\n    _this.coneOuterGain = options.coneOuterGain;\n    _this.coneOuterAngle = options.coneOuterAngle;\n    _this.coneInnerAngle = options.coneInnerAngle;\n    _this.refDistance = options.refDistance;\n    _this.rolloffFactor = options.rolloffFactor;\n    _this.positionX = new Param({\n      context: _this.context,\n      param: _this._panner.positionX,\n      value: options.positionX\n    });\n    _this.positionY = new Param({\n      context: _this.context,\n      param: _this._panner.positionY,\n      value: options.positionY\n    });\n    _this.positionZ = new Param({\n      context: _this.context,\n      param: _this._panner.positionZ,\n      value: options.positionZ\n    });\n    _this.orientationX = new Param({\n      context: _this.context,\n      param: _this._panner.orientationX,\n      value: options.orientationX\n    });\n    _this.orientationY = new Param({\n      context: _this.context,\n      param: _this._panner.orientationY,\n      value: options.orientationY\n    });\n    _this.orientationZ = new Param({\n      context: _this.context,\n      param: _this._panner.orientationZ,\n      value: options.orientationZ\n    });\n    return _this;\n  }\n  _createClass(Panner3D, [{\n    key: \"setPosition\",\n    value:\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    function setPosition(x, y, z) {\n      this.positionX.value = x;\n      this.positionY.value = y;\n      this.positionZ.value = z;\n      return this;\n    }\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n  }, {\n    key: \"setOrientation\",\n    value: function setOrientation(x, y, z) {\n      this.orientationX.value = x;\n      this.orientationY.value = y;\n      this.orientationZ.value = z;\n      return this;\n    }\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n  }, {\n    key: \"panningModel\",\n    get: function get() {\n      return this._panner.panningModel;\n    },\n    set: function set(val) {\n      this._panner.panningModel = val;\n    }\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n  }, {\n    key: \"refDistance\",\n    get: function get() {\n      return this._panner.refDistance;\n    },\n    set: function set(val) {\n      this._panner.refDistance = val;\n    }\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n  }, {\n    key: \"rolloffFactor\",\n    get: function get() {\n      return this._panner.rolloffFactor;\n    },\n    set: function set(val) {\n      this._panner.rolloffFactor = val;\n    }\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n  }, {\n    key: \"distanceModel\",\n    get: function get() {\n      return this._panner.distanceModel;\n    },\n    set: function set(val) {\n      this._panner.distanceModel = val;\n    }\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n  }, {\n    key: \"coneInnerAngle\",\n    get: function get() {\n      return this._panner.coneInnerAngle;\n    },\n    set: function set(val) {\n      this._panner.coneInnerAngle = val;\n    }\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n  }, {\n    key: \"coneOuterAngle\",\n    get: function get() {\n      return this._panner.coneOuterAngle;\n    },\n    set: function set(val) {\n      this._panner.coneOuterAngle = val;\n    }\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n  }, {\n    key: \"coneOuterGain\",\n    get: function get() {\n      return this._panner.coneOuterGain;\n    },\n    set: function set(val) {\n      this._panner.coneOuterGain = val;\n    }\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n  }, {\n    key: \"maxDistance\",\n    get: function get() {\n      return this._panner.maxDistance;\n    },\n    set: function set(val) {\n      this._panner.maxDistance = val;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Panner3D.prototype), \"dispose\", this).call(this);\n      this._panner.disconnect();\n      this.orientationX.dispose();\n      this.orientationY.dispose();\n      this.orientationZ.dispose();\n      this.positionX.dispose();\n      this.positionY.dispose();\n      this.positionZ.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        coneInnerAngle: 360,\n        coneOuterAngle: 360,\n        coneOuterGain: 0,\n        distanceModel: \"inverse\",\n        maxDistance: 10000,\n        orientationX: 0,\n        orientationY: 0,\n        orientationZ: 0,\n        panningModel: \"equalpower\",\n        positionX: 0,\n        positionY: 0,\n        positionZ: 0,\n        refDistance: 1,\n        rolloffFactor: 1\n      });\n    }\n  }]);\n  return Panner3D;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","optionsFromArguments","Panner3D","getDefaults","arguments","options","_panner","input","output","context","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","positionX","param","value","positionY","positionZ","orientationX","orientationY","orientationZ","x","y","z","val","disconnect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Panner3D.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n\nexport interface Panner3DOptions extends ToneAudioNodeOptions {\n\tconeInnerAngle: Degrees;\n\tconeOuterAngle: Degrees;\n\tconeOuterGain: GainFactor;\n\tdistanceModel: DistanceModelType;\n\tmaxDistance: number;\n\torientationX: number;\n\torientationY: number;\n\torientationZ: number;\n\tpanningModel: PanningModelType;\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\trefDistance: number;\n\trolloffFactor: number;\n}\n\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode<Panner3DOptions> {\n\n\treadonly name: string = \"Panner3D\";\n\n\t/**\n\t * The panning object\n\t */\n\tprivate _panner: PannerNode;\n\treadonly input: PannerNode;\n\treadonly output: PannerNode;\n\n\treadonly positionX: Param<\"number\">;\n\treadonly positionY: Param<\"number\">;\n\treadonly positionZ: Param<\"number\">;\n\n\treadonly orientationX: Param<\"number\">;\n\treadonly orientationY: Param<\"number\">;\n\treadonly orientationZ: Param<\"number\">;\n\n\t/**\n\t * @param positionX The initial x position.\n\t * @param positionY The initial y position.\n\t * @param positionZ The initial z position.\n\t */\n\tconstructor(positionX: number, positionY: number, positionZ: number);\n\tconstructor(options?: Partial<Panner3DOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n\t\tconst options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t// set some values\n\t\tthis.panningModel = options.panningModel;\n\t\tthis.maxDistance = options.maxDistance;\n\t\tthis.distanceModel = options.distanceModel;\n\t\tthis.coneOuterGain = options.coneOuterGain;\n\t\tthis.coneOuterAngle = options.coneOuterAngle;\n\t\tthis.coneInnerAngle = options.coneInnerAngle;\n\t\tthis.refDistance = options.refDistance;\n\t\tthis.rolloffFactor = options.rolloffFactor;\n\n\t\tthis.positionX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionX,\n\t\t\tvalue: options.positionX,\n\t\t});\n\t\tthis.positionY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionY,\n\t\t\tvalue: options.positionY,\n\t\t});\n\t\tthis.positionZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionZ,\n\t\t\tvalue: options.positionZ,\n\t\t});\n\t\tthis.orientationX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationX,\n\t\t\tvalue: options.orientationX,\n\t\t});\n\t\tthis.orientationY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationY,\n\t\t\tvalue: options.orientationY,\n\t\t});\n\t\tthis.orientationZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationZ,\n\t\t\tvalue: options.orientationZ,\n\t\t});\n\t}\n\n\tstatic getDefaults(): Panner3DOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconeInnerAngle: 360,\n\t\t\tconeOuterAngle: 360,\n\t\t\tconeOuterGain: 0,\n\t\t\tdistanceModel: \"inverse\" as DistanceModelType,\n\t\t\tmaxDistance: 10000,\n\t\t\torientationX: 0,\n\t\t\torientationY: 0,\n\t\t\torientationZ: 0,\n\t\t\tpanningModel: \"equalpower\" as PanningModelType,\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\trefDistance: 1,\n\t\t\trolloffFactor: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Sets the position of the source in 3d space.\n\t */\n\tsetPosition(x: number, y: number, z: number): this {\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the orientation of the source in 3d space.\n\t */\n\tsetOrientation(x: number, y: number, z: number): this {\n\t\tthis.orientationX.value = x;\n\t\tthis.orientationY.value = y;\n\t\tthis.orientationZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The panning model. Either \"equalpower\" or \"HRTF\".\n\t */\n\tget panningModel(): PanningModelType {\n\t\treturn this._panner.panningModel;\n\t}\n\tset panningModel(val) {\n\t\tthis._panner.panningModel = val;\n\t}\n\n\t/**\n\t * A reference distance for reducing volume as source move further from the listener\n\t */\n\tget refDistance(): number {\n\t\treturn this._panner.refDistance;\n\t}\n\tset refDistance(val) {\n\t\tthis._panner.refDistance = val;\n\t}\n\n\t/**\n\t * Describes how quickly the volume is reduced as source moves away from listener.\n\t */\n\tget rolloffFactor(): number {\n\t\treturn this._panner.rolloffFactor;\n\t}\n\tset rolloffFactor(val) {\n\t\tthis._panner.rolloffFactor = val;\n\t}\n\n\t/**\n\t * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t */\n\tget distanceModel(): DistanceModelType {\n\t\treturn this._panner.distanceModel;\n\t}\n\tset distanceModel(val) {\n\t\tthis._panner.distanceModel = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, inside of which there will be no volume reduction\n\t */\n\tget coneInnerAngle(): Degrees {\n\t\treturn this._panner.coneInnerAngle;\n\t}\n\tset coneInnerAngle(val) {\n\t\tthis._panner.coneInnerAngle = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, outside of which the volume will be reduced\n\t * to a constant value of coneOuterGain\n\t */\n\tget coneOuterAngle(): Degrees {\n\t\treturn this._panner.coneOuterAngle;\n\t}\n\tset coneOuterAngle(val) {\n\t\tthis._panner.coneOuterAngle = val;\n\t}\n\n\t/**\n\t * The gain outside of the coneOuterAngle\n\t */\n\tget coneOuterGain(): GainFactor {\n\t\treturn this._panner.coneOuterGain;\n\t}\n\tset coneOuterGain(val) {\n\t\tthis._panner.coneOuterGain = val;\n\t}\n\n\t/**\n\t * The maximum distance between source and listener,\n\t * after which the volume will not be reduced any further.\n\t */\n\tget maxDistance(): number {\n\t\treturn this._panner.maxDistance;\n\t}\n\tset maxDistance(val) {\n\t\tthis._panner.maxDistance = val;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.orientationX.dispose();\n\t\tthis.orientationY.dispose();\n\t\tthis.orientationZ.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}