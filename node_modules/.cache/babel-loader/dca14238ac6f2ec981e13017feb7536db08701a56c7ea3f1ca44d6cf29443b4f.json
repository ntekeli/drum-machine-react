{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport var createConstantSourceNodeConstructor = function createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ConstantSourceNode, _audioNodeConstructor);\n    var _super = _createSuper(ConstantSourceNode);\n    function ConstantSourceNode(context, options) {\n      var _this;\n      _classCallCheck(this, ConstantSourceNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      _this = _super.call(this, context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      _this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      _this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n      _this._offset = createAudioParam(_assertThisInitialized(_this), isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._onended = null;\n      return _this;\n    }\n    _createClass(ConstantSourceNode, [{\n      key: \"offset\",\n      get: function get() {\n        return this._offset;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeConstantSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeConstantSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this._nativeConstantSourceNode.start(when);\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.start = when;\n        }\n        if (this.context.state !== 'closed') {\n          setInternalStateToActive(this);\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n            if (isActiveAudioNode(_this2)) {\n              setInternalStateToPassive(_this2);\n            }\n          };\n          this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this._nativeConstantSourceNode.stop(when);\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.stop = when;\n        }\n      }\n    }]);\n    return ConstantSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","value","wrappedListener","onended","nativeOnEnded","when","start","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\constant-source-node-constructor.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioParam, IAudioScheduledSourceNodeEventMap, IConstantSourceNode, IConstantSourceOptions } from '../interfaces';\nimport {\n    TConstantSourceNodeConstructorFactory,\n    TConstantSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeConstantSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n} as const;\n\nexport const createConstantSourceNodeConstructor: TConstantSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRendererFactory,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class ConstantSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IConstantSourceNode<T>\n    {\n        private _constantSourceNodeRenderer: TConstantSourceNodeRenderer<T>;\n\n        private _nativeConstantSourceNode: TNativeConstantSourceNode;\n\n        private _offset: IAudioParam;\n\n        private _onended: null | TEventHandler<this>;\n\n        constructor(context: T, options?: Partial<IConstantSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = <TConstantSourceNodeRenderer<T>>(\n                (isOffline ? createConstantSourceNodeRendererFactory() : null)\n            );\n\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(\n                this,\n                isOffline,\n                nativeConstantSourceNode.offset,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._onended = null;\n        }\n\n        get offset(): IAudioParam {\n            return this._offset;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeConstantSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        public start(when = 0): void {\n            this._nativeConstantSourceNode.start(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeConstantSourceNode.stop(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}