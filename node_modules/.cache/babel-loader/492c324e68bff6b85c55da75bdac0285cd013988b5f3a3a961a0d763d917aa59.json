{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethodsOutOfBounds = function createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (copyFromChannel) {\n      return function (destination, channelNumberAsNumber) {\n        var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    }(audioBuffer.copyFromChannel);\n    audioBuffer.copyToChannel = function (copyToChannel) {\n      return function (source, channelNumberAsNumber) {\n        var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    }(audioBuffer.copyToChannel);\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,kDAAkD,GAAyD,SAA3GA,kDAAkD,CAC3DC,2BAA2B,EAC3B;EACA,OAAO,UAACC,WAA+B,EAAU;IAC7CA,WAAW,CAACC,eAAe,GAAI,UAACA,eAAe,EAAI;MAC/C,OAAO,UAACC,WAAyB,EAAEC,qBAA6B,EAA8B;QAAA,IAA5BC,oBAAoB,uEAAG,CAAC;QACtF,IAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,IAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAAM,EAAE;UACnC,OAAON,eAAe,CAACO,IAAI,CAACR,WAAW,EAAEE,WAAW,EAAEI,aAAa,EAAED,YAAY,CAAC;;MAE1F,CAAC;IACL,CAAC,CAAEL,WAAW,CAACC,eAAe,CAAC;IAE/BD,WAAW,CAACS,aAAa,GAAI,UAACA,aAAa,EAAI;MAC3C,OAAO,UAACC,MAAoB,EAAEP,qBAA6B,EAA8B;QAAA,IAA5BC,oBAAoB,uEAAG,CAAC;QACjF,IAAMC,YAAY,GAAGN,2BAA2B,CAACK,oBAAoB,CAAC;QACtE,IAAME,aAAa,GAAGP,2BAA2B,CAACI,qBAAqB,CAAC;QAExE,IAAIE,YAAY,GAAGL,WAAW,CAACO,MAAM,EAAE;UACnC,OAAOE,aAAa,CAACD,IAAI,CAACR,WAAW,EAAEU,MAAM,EAAEJ,aAAa,EAAED,YAAY,CAAC;;MAEnF,CAAC;IACL,CAAC,CAAEL,WAAW,CAACS,aAAa,CAAC;EACjC,CAAC;AACL,CAAC","names":["createWrapAudioBufferCopyChannelMethodsOutOfBounds","convertNumberToUnsignedLong","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","length","call","copyToChannel","source"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\wrap-audio-buffer-copy-channel-methods-out-of-bounds.ts"],"sourcesContent":["import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = (\n    convertNumberToUnsignedLong\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}