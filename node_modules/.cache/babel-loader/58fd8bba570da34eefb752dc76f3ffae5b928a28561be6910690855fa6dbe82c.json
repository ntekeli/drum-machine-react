{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport var Signal = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Signal, _ToneAudioNode);\n  var _super = _createSuper(Signal);\n  function Signal() {\n    var _this;\n    _classCallCheck(this, Signal);\n    _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    _this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n    _this.override = true;\n    var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    _this.output = _this._constantSource = new ToneConstantSource({\n      context: _this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    _this._constantSource.start(0);\n    _this.input = _this._param = _this._constantSource.offset;\n    return _this;\n  }\n  _createClass(Signal, [{\n    key: \"connect\",\n    value: function connect(destination) {\n      var outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // start it only when connected to something\n      connectSignal(this, destination, outputNum, inputNum);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Signal.prototype), \"dispose\", this).call(this);\n      this._param.dispose();\n      this._constantSource.dispose();\n      return this;\n    }\n    //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n  }, {\n    key: \"setValueAtTime\",\n    value: function setValueAtTime(value, time) {\n      this._param.setValueAtTime(value, time);\n      return this;\n    }\n  }, {\n    key: \"getValueAtTime\",\n    value: function getValueAtTime(time) {\n      return this._param.getValueAtTime(time);\n    }\n  }, {\n    key: \"setRampPoint\",\n    value: function setRampPoint(time) {\n      this._param.setRampPoint(time);\n      return this;\n    }\n  }, {\n    key: \"linearRampToValueAtTime\",\n    value: function linearRampToValueAtTime(value, time) {\n      this._param.linearRampToValueAtTime(value, time);\n      return this;\n    }\n  }, {\n    key: \"exponentialRampToValueAtTime\",\n    value: function exponentialRampToValueAtTime(value, time) {\n      this._param.exponentialRampToValueAtTime(value, time);\n      return this;\n    }\n  }, {\n    key: \"exponentialRampTo\",\n    value: function exponentialRampTo(value, rampTime, startTime) {\n      this._param.exponentialRampTo(value, rampTime, startTime);\n      return this;\n    }\n  }, {\n    key: \"linearRampTo\",\n    value: function linearRampTo(value, rampTime, startTime) {\n      this._param.linearRampTo(value, rampTime, startTime);\n      return this;\n    }\n  }, {\n    key: \"targetRampTo\",\n    value: function targetRampTo(value, rampTime, startTime) {\n      this._param.targetRampTo(value, rampTime, startTime);\n      return this;\n    }\n  }, {\n    key: \"exponentialApproachValueAtTime\",\n    value: function exponentialApproachValueAtTime(value, time, rampTime) {\n      this._param.exponentialApproachValueAtTime(value, time, rampTime);\n      return this;\n    }\n  }, {\n    key: \"setTargetAtTime\",\n    value: function setTargetAtTime(value, startTime, timeConstant) {\n      this._param.setTargetAtTime(value, startTime, timeConstant);\n      return this;\n    }\n  }, {\n    key: \"setValueCurveAtTime\",\n    value: function setValueCurveAtTime(values, startTime, duration, scaling) {\n      this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n      return this;\n    }\n  }, {\n    key: \"cancelScheduledValues\",\n    value: function cancelScheduledValues(time) {\n      this._param.cancelScheduledValues(time);\n      return this;\n    }\n  }, {\n    key: \"cancelAndHoldAtTime\",\n    value: function cancelAndHoldAtTime(time) {\n      this._param.cancelAndHoldAtTime(time);\n      return this;\n    }\n  }, {\n    key: \"rampTo\",\n    value: function rampTo(value, rampTime, startTime) {\n      this._param.rampTo(value, rampTime, startTime);\n      return this;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._param.value;\n    },\n    set: function set(value) {\n      this._param.value = value;\n    }\n  }, {\n    key: \"convert\",\n    get: function get() {\n      return this._param.convert;\n    },\n    set: function set(convert) {\n      this._param.convert = convert;\n    }\n  }, {\n    key: \"units\",\n    get: function get() {\n      return this._param.units;\n    }\n  }, {\n    key: \"overridden\",\n    get: function get() {\n      return this._param.overridden;\n    },\n    set: function set(overridden) {\n      this._param.overridden = overridden;\n    }\n  }, {\n    key: \"maxValue\",\n    get: function get() {\n      return this._param.maxValue;\n    }\n  }, {\n    key: \"minValue\",\n    get: function get() {\n      return this._param.minValue;\n    }\n    /**\n     * See [[Param.apply]].\n     */\n  }, {\n    key: \"apply\",\n    value: function apply(param) {\n      this._param.apply(param);\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        convert: true,\n        units: \"number\",\n        value: 0\n      });\n    }\n  }]);\n  return Signal;\n}(ToneAudioNode);\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0);\n    // reset the value\n    destination.setValueAtTime(0, 0);\n    // mark the value as overridden\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","connect","isAudioParam","optionsFromArguments","ToneConstantSource","Signal","getDefaults","arguments","options","output","_constantSource","context","convert","offset","value","units","minValue","maxValue","start","input","_param","destination","outputNum","inputNum","connectSignal","dispose","time","setValueAtTime","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","rampTime","startTime","exponentialRampTo","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","values","duration","scaling","setValueCurveAtTime","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","param","apply","Object","assign","signal","override"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\Signal.ts"],"sourcesContent":["import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}