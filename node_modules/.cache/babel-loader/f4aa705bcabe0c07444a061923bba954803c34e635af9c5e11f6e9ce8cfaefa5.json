{"ast":null,"code":"export var createGetAudioParamRenderer = function createGetAudioParamRenderer(getAudioParamConnections) {\n  return function (audioParam) {\n    var audioParamConnections = getAudioParamConnections(audioParam);\n    if (audioParamConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,2BAA2B,GAAkC,SAA7DA,2BAA2B,CAAmCC,wBAAwB,EAAI;EACnG,OAAO,UAACC,UAAU,EAAI;IAClB,IAAMC,qBAAqB,GAAGF,wBAAwB,CAA8BC,UAAU,CAAC;IAE/F,IAAIC,qBAAqB,CAACC,QAAQ,KAAK,IAAI,EAAE;MACzC,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;;IAGvF,OAAOF,qBAAqB,CAACC,QAAQ;EACzC,CAAC;AACL,CAAC","names":["createGetAudioParamRenderer","getAudioParamConnections","audioParam","audioParamConnections","renderer","Error"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\get-audio-param-renderer.ts"],"sourcesContent":["import { IMinimalOfflineAudioContext } from '../interfaces';\nimport { TGetAudioParamRendererFactory } from '../types';\n\nexport const createGetAudioParamRenderer: TGetAudioParamRendererFactory = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections<IMinimalOfflineAudioContext>(audioParam);\n\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n\n        return audioParamConnections.renderer;\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}