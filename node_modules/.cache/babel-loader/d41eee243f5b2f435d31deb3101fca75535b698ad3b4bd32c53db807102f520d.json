{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport var Destination = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Destination, _ToneAudioNode);\n  var _super = _createSuper(Destination);\n  function Destination() {\n    var _this;\n    _classCallCheck(this, Destination);\n    _this = _super.call(this, optionsFromArguments(Destination.getDefaults(), arguments));\n    _this.name = \"Destination\";\n    _this.input = new Volume({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n    _this.volume = _this.input.volume;\n    var options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(_this.input, _this.output, _this.context.rawContext.destination);\n    _this.mute = options.mute;\n    _this._internalChannels = [_this.input, _this.context.rawContext.destination, _this.output];\n    return _this;\n  }\n  _createClass(Destination, [{\n    key: \"mute\",\n    get:\n    /**\n     * Mute the output.\n     * @example\n     * const oscillator = new Tone.Oscillator().start().toDestination();\n     * setTimeout(() => {\n     * \t// mute the output\n     * \tTone.Destination.mute = true;\n     * }, 1000);\n     */\n    function get() {\n      return this.input.mute;\n    },\n    set: function set(mute) {\n      this.input.mute = mute;\n    }\n    /**\n     * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n     * chained in the master effects chain.\n     * @param args All arguments will be connected in a row and the Master will be routed through it.\n     * @example\n     * // route all audio through a filter and compressor\n     * const lowpass = new Tone.Filter(800, \"lowpass\");\n     * const compressor = new Tone.Compressor(-18);\n     * Tone.Destination.chain(lowpass, compressor);\n     */\n  }, {\n    key: \"chain\",\n    value: function chain() {\n      this.input.disconnect();\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(this.input);\n      args.push(this.output);\n      connectSeries.apply(void 0, args);\n      return this;\n    }\n    /**\n     * The maximum number of channels the system can output\n     * @example\n     * console.log(Tone.Destination.maxChannelCount);\n     */\n  }, {\n    key: \"maxChannelCount\",\n    get: function get() {\n      return this.context.rawContext.destination.maxChannelCount;\n    }\n    /**\n     * Clean up\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Destination.prototype), \"dispose\", this).call(this);\n      this.volume.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mute: false,\n        volume: 0\n      });\n    }\n  }]);\n  return Destination;\n}(ToneAudioNode);\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(function (context) {\n  context.destination = new Destination({\n    context: context\n  });\n});\nonContextClose(function (context) {\n  context.destination.dispose();\n});","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAM,QAAQ,gCAAgC;AAEvD,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,cAAc,EAAEC,aAAa,QAAQ,yBAAyB;AACvE,SAASC,IAAI,QAAQ,QAAQ;AAE7B,SAASC,aAAa,EAAEC,aAAa,QAA8B,iBAAiB;AAOpF;;;;;;;;;;;;;;;AAeA,WAAaC,WAAY;EAAA;EAAA;EAkBxB;IAAA;IAAA;IAEC,0BAAMN,oBAAoB,CAACM,WAAW,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAlBxD,UAAI,GAAW,aAAa;IAErC,WAAK,GAAW,IAAIT,MAAM,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACrD,YAAM,GAAS,IAAIN,IAAI,CAAC;MAAEM,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAElD;;;;;;;;IAQA,YAAM,GAAsB,MAAKC,KAAK,CAACC,MAAM;IAM5C,IAAMC,OAAO,GAAGZ,oBAAoB,CAACM,WAAW,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAE1EJ,aAAa,CAAC,MAAKM,KAAK,EAAE,MAAKG,MAAM,EAAE,MAAKJ,OAAO,CAACK,UAAU,CAACC,WAAW,CAAC;IAE3E,MAAKC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACxB,MAAKC,iBAAiB,GAAG,CAAC,MAAKP,KAAK,EAAE,MAAKD,OAAO,CAACK,UAAU,CAACC,WAAW,EAAE,MAAKF,MAAM,CAAC;IAAC;EACzF;EAAC;IAAA;IAAA;IASD;;;;;;;;;IASA,eAAQ;MACP,OAAO,IAAI,CAACH,KAAK,CAACM,IAAI;IACvB,CAAC;IAAA,KACD,aAASA,IAAa;MACrB,IAAI,CAACN,KAAK,CAACM,IAAI,GAAGA,IAAI;IACvB;IAEA;;;;;;;;;;EAAA;IAAA;IAAA,OAUA,iBAA+C;MAC9C,IAAI,CAACN,KAAK,CAACQ,UAAU,EAAE;MAAC,kCADhBC,IAAsC;QAAtCA,IAAsC;MAAA;MAE9CA,IAAI,CAACC,OAAO,CAAC,IAAI,CAACV,KAAK,CAAC;MACxBS,IAAI,CAACE,IAAI,CAAC,IAAI,CAACR,MAAM,CAAC;MACtBT,aAAa,eAAIe,IAAI,CAAC;MACtB,OAAO,IAAI;IACZ;IAEA;;;;;EAAA;IAAA;IAAA,KAKA,eAAmB;MAClB,OAAO,IAAI,CAACV,OAAO,CAACK,UAAU,CAACC,WAAW,CAACO,eAAe;IAC3D;IAEA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACX,MAAM,CAACY,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAzDD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACpB,aAAa,CAACE,WAAW,EAAE,EAAE;QACjDS,IAAI,EAAE,KAAK;QACXL,MAAM,EAAE;OACR,CAAC;IACH;EAAC;EAAA;AAAA,EAlC+BN,aAAiC;AAyFlE;AACA;AACA;AAEAH,aAAa,CAAC,iBAAO,EAAG;EACvBO,OAAO,CAACM,WAAW,GAAG,IAAIT,WAAW,CAAC;IAAEG,OAAO,EAAPA;EAAO,CAAE,CAAC;AACnD,CAAC,CAAC;AAEFR,cAAc,CAAC,iBAAO,EAAG;EACxBQ,OAAO,CAACM,WAAW,CAACQ,OAAO,EAAE;AAC9B,CAAC,CAAC","names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","Destination","getDefaults","arguments","context","input","volume","options","output","rawContext","destination","mute","_internalChannels","disconnect","args","unshift","push","maxChannelCount","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\context\\Destination.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output in decibels. -Infinity is silent, and 0 is no change. \n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * osc.start();\n\t * // ramp the volume down to silent over 10 seconds\n\t * Tone.getDestination().volume.rampTo(-Infinity, 10);\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const oscillator = new Tone.Oscillator().start().toDestination();\n\t * setTimeout(() => {\n\t * \t// mute the output\n\t * \tTone.Destination.mute = true;\n\t * }, 1000);\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @example\n\t * // route all audio through a filter and compressor\n\t * const lowpass = new Tone.Filter(800, \"lowpass\");\n\t * const compressor = new Tone.Compressor(-18);\n\t * Tone.Destination.chain(lowpass, compressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t * @example\n\t * console.log(Tone.Destination.maxChannelCount);\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}