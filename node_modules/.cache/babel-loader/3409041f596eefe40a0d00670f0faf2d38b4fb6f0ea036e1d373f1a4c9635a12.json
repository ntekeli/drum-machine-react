{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport var createAudioListenerFactory = function createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) {\n  return function (context, nativeContext) {\n    var nativeListener = nativeContext.listener;\n    // Bug #117: Only Chrome & Edge support the new interface already.\n    var createFakeAudioParams = function createFakeAudioParams() {\n      var buffer = new Float32Array(1);\n      var channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var isScriptProcessorNodeCreated = false;\n      var lastOrientation = [0, 0, -1, 0, 1, 0];\n      var lastPosition = [0, 0, 0];\n      var createScriptProcessorNode = function createScriptProcessorNode() {\n        if (isScriptProcessorNodeCreated) {\n          return;\n        }\n        isScriptProcessorNodeCreated = true;\n        var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = function (_ref) {\n          var inputBuffer = _ref.inputBuffer;\n          var orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n          if (orientation.some(function (value, index) {\n            return value !== lastOrientation[index];\n          })) {\n            nativeListener.setOrientation.apply(nativeListener, orientation); // tslint:disable-line:deprecation\n            lastOrientation = orientation;\n          }\n          var positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n          if (positon.some(function (value, index) {\n            return value !== lastPosition[index];\n          })) {\n            nativeListener.setPosition.apply(nativeListener, positon); // tslint:disable-line:deprecation\n            lastPosition = positon;\n          }\n        };\n        channelMergerNode.connect(scriptProcessorNode);\n      };\n      var createSetOrientation = function createSetOrientation(index) {\n        return function (value) {\n          if (value !== lastOrientation[index]) {\n            lastOrientation[index] = value;\n            nativeListener.setOrientation.apply(nativeListener, _toConsumableArray(lastOrientation)); // tslint:disable-line:deprecation\n          }\n        };\n      };\n\n      var createSetPosition = function createSetPosition(index) {\n        return function (value) {\n          if (value !== lastPosition[index]) {\n            lastPosition[index] = value;\n            nativeListener.setPosition.apply(nativeListener, _toConsumableArray(lastPosition)); // tslint:disable-line:deprecation\n          }\n        };\n      };\n\n      var createFakeAudioParam = function createFakeAudioParam(input, initialValue, setValue) {\n        var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: initialValue\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input);\n        // @todo This should be stopped when the context is closed.\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get: function get() {\n            return initialValue;\n          }\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n        var audioParam = createAudioParam({\n          context: context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        overwriteAccessors(audioParam, 'value', function (get) {\n          return function () {\n            return get.call(audioParam);\n          };\n        }, function (set) {\n          return function (value) {\n            try {\n              set.call(audioParam, value);\n            } catch (err) {\n              if (err.code !== 9) {\n                throw err;\n              }\n            }\n            createScriptProcessorNode();\n            if (isOffline) {\n              // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n              setValue(value);\n            }\n          };\n        });\n        audioParam.cancelAndHoldAtTime = function (cancelAndHoldAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            var value = cancelAndHoldAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.cancelAndHoldAtTime);\n        audioParam.cancelScheduledValues = function (cancelScheduledValues) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            var value = cancelScheduledValues.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.cancelScheduledValues);\n        audioParam.exponentialRampToValueAtTime = function (exponentialRampToValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n            var value = exponentialRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.exponentialRampToValueAtTime);\n        audioParam.linearRampToValueAtTime = function (linearRampToValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n            var value = linearRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.linearRampToValueAtTime);\n        audioParam.setTargetAtTime = function (setTargetAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n            var value = setTargetAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setTargetAtTime);\n        audioParam.setValueAtTime = function (setValueAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n              args[_key6] = arguments[_key6];\n            }\n            var value = setValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setValueAtTime);\n        audioParam.setValueCurveAtTime = function (setValueCurveAtTime) {\n          if (isOffline) {\n            return function () {\n              throw createNotSupportedError();\n            };\n          }\n          return function () {\n            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n              args[_key7] = arguments[_key7];\n            }\n            var value = setValueCurveAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        }(audioParam.setValueCurveAtTime);\n        return audioParam;\n      };\n      return {\n        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n      };\n    };\n    var _ref2 = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener,\n      forwardX = _ref2.forwardX,\n      forwardY = _ref2.forwardY,\n      forwardZ = _ref2.forwardZ,\n      positionX = _ref2.positionX,\n      positionY = _ref2.positionY,\n      positionZ = _ref2.positionZ,\n      upX = _ref2.upX,\n      upY = _ref2.upY,\n      upZ = _ref2.upZ;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n      get forwardY() {\n        return forwardY;\n      },\n      get forwardZ() {\n        return forwardZ;\n      },\n      get positionX() {\n        return positionX;\n      },\n      get positionY() {\n        return positionY;\n      },\n      get positionZ() {\n        return positionZ;\n      },\n      get upX() {\n        return upX;\n      },\n      get upY() {\n        return upY;\n      },\n      get upZ() {\n        return upZ;\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,0BAA0B,EAAEC,0BAA0B,QAAQ,cAAc;AAIrF,OAAO,IAAMC,0BAA0B,GAAiC,SAA3DA,0BAA0B,CACnCC,gBAAgB,EAChBC,6BAA6B,EAC7BC,8BAA8B,EAC9BC,+BAA+B,EAC/BC,uBAAuB,EACvBC,cAAc,EACdC,2BAA2B,EAC3BC,kBAAkB,EAClB;EACA,OAAO,UAACC,OAAO,EAAEC,aAAa,EAAI;IAC9B,IAAMC,cAAc,GAAGD,aAAa,CAACE,QAAQ;IAE7C;IACA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,GAAQ;MAC/B,IAAMC,MAAM,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC;MAClC,IAAMC,iBAAiB,GAAGd,6BAA6B,CAACQ,aAAa,EAAE;QACnEO,YAAY,EAAE,CAAC;QACfC,gBAAgB,EAAE,UAAU;QAC5BC,qBAAqB,EAAE,UAAU;QACjCC,cAAc,EAAE;OACnB,CAAC;MACF,IAAMC,SAAS,GAAGd,2BAA2B,CAACG,aAAa,CAAC;MAE5D,IAAIY,4BAA4B,GAAG,KAAK;MACxC,IAAIC,eAAe,GAAqD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC3F,IAAIC,YAAY,GAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAEtD,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyB,GAAQ;QACnC,IAAIH,4BAA4B,EAAE;UAC9B;;QAGJA,4BAA4B,GAAG,IAAI;QAEnC,IAAMI,mBAAmB,GAAGtB,+BAA+B,CAACM,aAAa,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAErF;QACAgB,mBAAmB,CAACC,cAAc,GAAG,gBAAoB;UAAA,IAAjBC,WAAW,QAAXA,WAAW;UAC/C,IAAMC,WAAW,GAAqD,CAClEvB,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,CACzC;UAED,IAAIe,WAAW,CAACC,IAAI,CAAC,UAACC,KAAK,EAAEC,KAAK;YAAA,OAAKD,KAAK,KAAKR,eAAe,CAACS,KAAK,CAAC;UAAA,EAAC,EAAE;YACtErB,cAAc,CAACsB,cAAc,OAA7BtB,cAAc,EAAmBkB,WAAW,CAAC,CAAC,CAAC;YAE/CN,eAAe,GAAGM,WAAW;;UAGjC,IAAMK,OAAO,GAA6B,CACtC5B,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,EACtCR,cAAc,CAACsB,WAAW,EAAEd,MAAM,EAAE,CAAC,CAAC,CACzC;UAED,IAAIoB,OAAO,CAACJ,IAAI,CAAC,UAACC,KAAK,EAAEC,KAAK;YAAA,OAAKD,KAAK,KAAKP,YAAY,CAACQ,KAAK,CAAC;UAAA,EAAC,EAAE;YAC/DrB,cAAc,CAACwB,WAAW,OAA1BxB,cAAc,EAAgBuB,OAAO,CAAC,CAAC,CAAC;YAExCV,YAAY,GAAGU,OAAO;;QAE9B,CAAC;QAEDlB,iBAAiB,CAACoB,OAAO,CAACV,mBAAmB,CAAC;MAClD,CAAC;MACD,IAAMW,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIL,KAAa;QAAA,OAAK,UAACD,KAAa,EAAI;UAC9D,IAAIA,KAAK,KAAKR,eAAe,CAACS,KAAK,CAAC,EAAE;YAClCT,eAAe,CAACS,KAAK,CAAC,GAAGD,KAAK;YAE9BpB,cAAc,CAACsB,cAAc,OAA7BtB,cAAc,qBAAmBY,eAAe,EAAC,CAAC,CAAC;;QAE3D,CAAC;MAAA;;MACD,IAAMe,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIN,KAAa;QAAA,OAAK,UAACD,KAAa,EAAI;UAC3D,IAAIA,KAAK,KAAKP,YAAY,CAACQ,KAAK,CAAC,EAAE;YAC/BR,YAAY,CAACQ,KAAK,CAAC,GAAGD,KAAK;YAE3BpB,cAAc,CAACwB,WAAW,OAA1BxB,cAAc,qBAAgBa,YAAY,EAAC,CAAC,CAAC;;QAErD,CAAC;MAAA;;MACD,IAAMe,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,KAAa,EAAEC,YAAoB,EAAEC,QAAiC,EAAI;QACpG,IAAMC,kBAAkB,GAAGxC,8BAA8B,CAACO,aAAa,EAAE;UACrEO,YAAY,EAAE,CAAC;UACfC,gBAAgB,EAAE,UAAU;UAC5BC,qBAAqB,EAAE,UAAU;UACjCyB,MAAM,EAAEH;SACX,CAAC;QAEFE,kBAAkB,CAACP,OAAO,CAACpB,iBAAiB,EAAE,CAAC,EAAEwB,KAAK,CAAC;QAEvD;QACAG,kBAAkB,CAACE,KAAK,EAAE;QAE1BC,MAAM,CAACC,cAAc,CAACJ,kBAAkB,CAACC,MAAM,EAAE,cAAc,EAAE;UAC7DI,GAAG;YACC,OAAOP,YAAY;UACvB;SACH,CAAC;QAEF;;;;QAIA,IAAMQ,UAAU,GAAGhD,gBAAgB,CAC1B;UAAEQ,OAAO,EAAPA;QAAO,CAAE,EAChBY,SAAS,EACTsB,kBAAkB,CAACC,MAAM,EACzB7C,0BAA0B,EAC1BD,0BAA0B,CAC7B;QAEDU,kBAAkB,CACdyC,UAAU,EACV,OAAO,EACP,UAACD,GAAG;UAAA,OAAK;YAAA,OAAMA,GAAG,CAACE,IAAI,CAACD,UAAU,CAAC;UAAA;QAAA,GACnC,UAACE,GAAG;UAAA,OAAK,UAACpB,KAAK,EAAI;YACf,IAAI;cACAoB,GAAG,CAACD,IAAI,CAACD,UAAU,EAAElB,KAAK,CAAC;aAC9B,CAAC,OAAOqB,GAAG,EAAE;cACV,IAAIA,GAAG,CAACC,IAAI,KAAK,CAAC,EAAE;gBAChB,MAAMD,GAAG;;;YAIjB3B,yBAAyB,EAAE;YAE3B,IAAIJ,SAAS,EAAE;cACX;cACAqB,QAAQ,CAACX,KAAK,CAAC;;UAEvB,CAAC;QAAA,EACJ;QAEDkB,UAAU,CAACK,mBAAmB,GAAI,UAACA,mBAAmB,EAAI;UACtD,IAAIjC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAA4D;YAAA,kCAAxDkD,IAAoD;cAApDA,IAAoD;YAAA;YAC3D,IAAMxB,KAAK,GAAGuB,mBAAmB,CAACE,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAEzD9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACK,mBAAmB,CAAC;QAClCL,UAAU,CAACQ,qBAAqB,GAAI,UAACA,qBAAqB,EAAI;UAC1D,IAAIpC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAA8D;YAAA,mCAA1DkD,IAAsD;cAAtDA,IAAsD;YAAA;YAC7D,IAAMxB,KAAK,GAAG0B,qBAAqB,CAACD,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAE3D9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACQ,qBAAqB,CAAC;QACpCR,UAAU,CAACS,4BAA4B,GAAI,UAACA,4BAA4B,EAAI;UACxE,IAAIrC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAAqE;YAAA,mCAAjEkD,IAA6D;cAA7DA,IAA6D;YAAA;YACpE,IAAMxB,KAAK,GAAG2B,4BAA4B,CAACF,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAElE9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACS,4BAA4B,CAAC;QAC3CT,UAAU,CAACU,uBAAuB,GAAI,UAACA,uBAAuB,EAAI;UAC9D,IAAItC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAAgE;YAAA,mCAA5DkD,IAAwD;cAAxDA,IAAwD;YAAA;YAC/D,IAAMxB,KAAK,GAAG4B,uBAAuB,CAACH,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAE7D9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACU,uBAAuB,CAAC;QACtCV,UAAU,CAACW,eAAe,GAAI,UAACA,eAAe,EAAI;UAC9C,IAAIvC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAAwD;YAAA,mCAApDkD,IAAgD;cAAhDA,IAAgD;YAAA;YACvD,IAAMxB,KAAK,GAAG6B,eAAe,CAACJ,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAErD9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACW,eAAe,CAAC;QAC9BX,UAAU,CAACY,cAAc,GAAI,UAACA,cAAc,EAAI;UAC5C,IAAIxC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAAuD;YAAA,mCAAnDkD,IAA+C;cAA/CA,IAA+C;YAAA;YACtD,IAAMxB,KAAK,GAAG8B,cAAc,CAACL,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAEpD9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACY,cAAc,CAAC;QAC7BZ,UAAU,CAACa,mBAAmB,GAAI,UAACA,mBAAmB,EAAI;UACtD,IAAIzC,SAAS,EAAE;YACX,OAAO,YAAK;cACR,MAAMhB,uBAAuB,EAAE;YACnC,CAAC;;UAGL,OAAO,YAA4D;YAAA,mCAAxDkD,IAAoD;cAApDA,IAAoD;YAAA;YAC3D,IAAMxB,KAAK,GAAG+B,mBAAmB,CAACN,KAAK,CAACP,UAAU,EAAEM,IAAI,CAAC;YAEzD9B,yBAAyB,EAAE;YAE3B,OAAOM,KAAK;UAChB,CAAC;QACL,CAAC,CAAEkB,UAAU,CAACa,mBAAmB,CAAC;QAElC,OAAOb,UAAU;MACrB,CAAC;MAED,OAAO;QACHc,QAAQ,EAAExB,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC7D2B,QAAQ,EAAEzB,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC7D4B,QAAQ,EAAE1B,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC9D6B,SAAS,EAAE3B,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAED,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC3D6B,SAAS,EAAE5B,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAED,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC3D8B,SAAS,EAAE7B,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAED,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC3D+B,GAAG,EAAE9B,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC,CAAC;QACxDiC,GAAG,EAAE/B,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC,CAAC;QACxDkC,GAAG,EAAEhC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEF,oBAAoB,CAAC,CAAC,CAAC;OAC1D;IACL,CAAC;IAED,YACI1B,cAAc,CAACoD,QAAQ,KAAKS,SAAS,GAAG3D,qBAAqB,EAAE,GAAGF,cAAc;MAD5EoD,QAAQ,SAARA,QAAQ;MAAEC,QAAQ,SAARA,QAAQ;MAAEC,QAAQ,SAARA,QAAQ;MAAEC,SAAS,SAATA,SAAS;MAAEC,SAAS,SAATA,SAAS;MAAEC,SAAS,SAATA,SAAS;MAAEC,GAAG,SAAHA,GAAG;MAAEC,GAAG,SAAHA,GAAG;MAAEC,GAAG,SAAHA,GAAG;IAGpF,OAAO;MACH,IAAIR,QAAQ;QACR,OAAOA,QAAQ;MACnB,CAAC;MACD,IAAIC,QAAQ;QACR,OAAOA,QAAQ;MACnB,CAAC;MACD,IAAIC,QAAQ;QACR,OAAOA,QAAQ;MACnB,CAAC;MACD,IAAIC,SAAS;QACT,OAAOA,SAAS;MACpB,CAAC;MACD,IAAIC,SAAS;QACT,OAAOA,SAAS;MACpB,CAAC;MACD,IAAIC,SAAS;QACT,OAAOA,SAAS;MACpB,CAAC;MACD,IAAIC,GAAG;QACH,OAAOA,GAAG;MACd,CAAC;MACD,IAAIC,GAAG;QACH,OAAOA,GAAG;MACd,CAAC;MACD,IAAIC,GAAG;QACH,OAAOA,GAAG;MACd;KACH;EACL,CAAC;AACL,CAAC","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioListenerFactory","createAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","createNotSupportedError","getFirstSample","isNativeOfflineAudioContext","overwriteAccessors","context","nativeContext","nativeListener","listener","createFakeAudioParams","buffer","Float32Array","channelMergerNode","channelCount","channelCountMode","channelInterpretation","numberOfInputs","isOffline","isScriptProcessorNodeCreated","lastOrientation","lastPosition","createScriptProcessorNode","scriptProcessorNode","onaudioprocess","inputBuffer","orientation","some","value","index","setOrientation","positon","setPosition","connect","createSetOrientation","createSetPosition","createFakeAudioParam","input","initialValue","setValue","constantSourceNode","offset","start","Object","defineProperty","get","audioParam","call","set","err","code","cancelAndHoldAtTime","args","apply","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setTargetAtTime","setValueAtTime","setValueCurveAtTime","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","undefined"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\audio-listener-factory.ts"],"sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam } from '../interfaces';\nimport { TAudioListenerFactoryFactory } from '../types';\n\nexport const createAudioListenerFactory: TAudioListenerFactoryFactory = (\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation: [number, number, number, number, number, number] = [0, 0, -1, 0, 1, 0];\n            let lastPosition: [number, number, number] = [0, 0, 0];\n\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n\n                isScriptProcessorNodeCreated = true;\n\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation: [number, number, number, number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                        lastOrientation = orientation;\n                    }\n\n                    const positon: [number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n                        lastPosition = positon;\n                    }\n                };\n\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index: number) => (value: number) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index: number) => (value: number) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input: number, initialValue: number, setValue: (value: number) => void) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n\n                constantSourceNode.connect(channelMergerNode, 0, input);\n\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get(): number {\n                        return initialValue;\n                    }\n                });\n\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam(\n                    <any>{ context },\n                    isOffline,\n                    constantSourceNode.offset,\n                    MOST_POSITIVE_SINGLE_FLOAT,\n                    MOST_NEGATIVE_SINGLE_FLOAT\n                );\n\n                overwriteAccessors(\n                    audioParam,\n                    'value',\n                    (get) => () => get.call(audioParam),\n                    (set) => (value) => {\n                        try {\n                            set.call(audioParam, value);\n                        } catch (err) {\n                            if (err.code !== 9) {\n                                throw err;\n                            }\n                        }\n\n                        createScriptProcessorNode();\n\n                        if (isOffline) {\n                            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                            setValue(value);\n                        }\n                    }\n                );\n\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelAndHoldAtTime']>) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelScheduledValues']>) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['exponentialRampToValueAtTime']>) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['linearRampToValueAtTime']>) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setTargetAtTime']>) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueAtTime']>) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueCurveAtTime']>) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n\n                return audioParam;\n            };\n\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } =\n            nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n\n        return {\n            get forwardX(): IAudioParam {\n                return forwardX;\n            },\n            get forwardY(): IAudioParam {\n                return forwardY;\n            },\n            get forwardZ(): IAudioParam {\n                return forwardZ;\n            },\n            get positionX(): IAudioParam {\n                return positionX;\n            },\n            get positionY(): IAudioParam {\n                return positionY;\n            },\n            get positionZ(): IAudioParam {\n                return positionZ;\n            },\n            get upX(): IAudioParam {\n                return upX;\n            },\n            get upY(): IAudioParam {\n                return upY;\n            },\n            get upZ(): IAudioParam {\n                return upZ;\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}