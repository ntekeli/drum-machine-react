{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport var Add = /*#__PURE__*/function (_Signal) {\n  _inherits(Add, _Signal);\n  var _super = _createSuper(Add);\n  function Add() {\n    var _this;\n    _classCallCheck(this, Add);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n    _this.override = false;\n    _this.name = \"Add\";\n    /**\n     * the summing node\n     */\n    _this._sum = new Gain({\n      context: _this.context\n    });\n    _this.input = _this._sum;\n    _this.output = _this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n    _this.addend = _this._param;\n    connectSeries(_this._constantSource, _this._sum);\n    return _this;\n  }\n  _createClass(Add, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Add.prototype), \"dispose\", this).call(this);\n      this._sum.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n  return Add;\n}(Signal);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,IAAI,QAAQ,sBAAsB;AAE3C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,MAAM,QAAuB,UAAU;AAEhD;;;;;;;;;;;;;;;;AAgBA,WAAaC,GAAI;EAAA;EAAA;EAuBhB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACJ,oBAAoB,CAACE,GAAG,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAtBnF,cAAQ,GAAG,KAAK;IAEP,UAAI,GAAW,KAAK;IAE7B;;;IAGQ,UAAI,GAAS,IAAIP,IAAI,CAAC;MAAEQ,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC/C,WAAK,GAAG,MAAKC,IAAI;IACjB,YAAM,GAAG,MAAKA,IAAI;IAE3B;;;IAGS,YAAM,GAAoB,MAAKC,MAAM;IAU7CX,aAAa,CAAC,MAAKY,eAAe,EAAE,MAAKF,IAAI,CAAC;IAAC;EAChD;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACA,IAAI,CAACG,OAAO,EAAE;MACnB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOR,MAAM,CAACC,MAAM,CAACH,MAAM,CAACI,WAAW,EAAE,EAAE;QAC1CO,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EAjCuBX,MAAM","names":["connectSeries","Gain","optionsFromArguments","Signal","Add","Object","assign","getDefaults","arguments","context","_sum","_param","_constantSource","dispose","value"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\Add.ts"],"sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and [[addend]].\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}