{"ast":null,"code":"export var testAudioNodeDisconnectMethodSupport = function testAudioNodeDisconnectMethodSupport(nativeAudioContext, nativeAudioWorkletNodeConstructor) {\n  return new Promise(function (resolve) {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      var analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n      var dummy = nativeAudioContext.createGain();\n      // Bug #95: Safari does not play one sample buffers.\n      var ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      var channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      var source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy);\n      // tslint:disable-next-line:deprecation\n      analyzer.onaudioprocess = function (event) {\n        var chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n        if (Array.prototype.some.call(chnnlDt, function (sample) {\n          return sample === 1;\n        })) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n      source.start();\n    }\n  });\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,oCAAoC,GAAG,SAAvCA,oCAAoC,CAC7CC,kBAAuC,EACvCC,iCAA4E,EAC1D;EAClB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAI;IAC3B;;;;IAIA,IAAIF,iCAAiC,KAAK,IAAI,EAAE;MAC5CE,OAAO,CAAC,IAAI,CAAC;KAChB,MAAM;MACH,IAAMC,QAAQ,GAAGJ,kBAAkB,CAACK,qBAAqB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACtE,IAAMC,KAAK,GAAGN,kBAAkB,CAACO,UAAU,EAAE;MAC7C;MACA,IAAMC,IAAI,GAAGR,kBAAkB,CAACS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;MACzD,IAAMC,WAAW,GAAGF,IAAI,CAACG,cAAc,CAAC,CAAC,CAAC;MAE1CD,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;MAClBA,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC;MAElB,IAAME,MAAM,GAAGZ,kBAAkB,CAACa,kBAAkB,EAAE;MAEtDD,MAAM,CAACE,MAAM,GAAGN,IAAI;MACpBI,MAAM,CAACG,IAAI,GAAG,IAAI;MAElBH,MAAM,CAACI,OAAO,CAACZ,QAAQ,CAAC,CAACY,OAAO,CAAChB,kBAAkB,CAACiB,WAAW,CAAC;MAChEL,MAAM,CAACI,OAAO,CAACV,KAAK,CAAC;MACrBM,MAAM,CAACM,UAAU,CAACZ,KAAK,CAAC;MAExB;MACAF,QAAQ,CAACe,cAAc,GAAG,UAACC,KAAK,EAAI;QAChC,IAAMC,OAAO,GAAGD,KAAK,CAACE,WAAW,CAACX,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAErD,IAAIY,KAAK,CAACC,SAAS,CAACC,IAAI,CAACC,IAAI,CAACL,OAAO,EAAE,UAACM,MAAc;UAAA,OAAKA,MAAM,KAAK,CAAC;QAAA,EAAC,EAAE;UACtExB,OAAO,CAAC,IAAI,CAAC;SAChB,MAAM;UACHA,OAAO,CAAC,KAAK,CAAC;;QAGlBS,MAAM,CAACgB,IAAI,EAAE;QAEbxB,QAAQ,CAACe,cAAc,GAAG,IAAI,CAAC,CAAC;QAEhCP,MAAM,CAACM,UAAU,CAACd,QAAQ,CAAC;QAC3BA,QAAQ,CAACc,UAAU,CAAClB,kBAAkB,CAACiB,WAAW,CAAC;MACvD,CAAC;MAEDL,MAAM,CAACiB,KAAK,EAAE;;EAEtB,CAAC,CAAC;AACN,CAAC","names":["testAudioNodeDisconnectMethodSupport","nativeAudioContext","nativeAudioWorkletNodeConstructor","Promise","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","getChannelData","source","createBufferSource","buffer","loop","connect","destination","disconnect","onaudioprocess","event","chnnlDt","inputBuffer","Array","prototype","some","call","sample","stop","start"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\helpers\\test-audio-node-disconnect-method-support.ts"],"sourcesContent":["import { TNativeAudioContext, TNativeAudioWorkletNodeConstructor } from '../types';\n\nexport const testAudioNodeDisconnectMethodSupport = (\n    nativeAudioContext: TNativeAudioContext,\n    nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor\n): Promise<boolean> => {\n    return new Promise((resolve) => {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            resolve(true);\n        } else {\n            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n            const dummy = nativeAudioContext.createGain();\n            // Bug #95: Safari does not play one sample buffers.\n            const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n            const channelData = ones.getChannelData(0);\n\n            channelData[0] = 1;\n            channelData[1] = 1;\n\n            const source = nativeAudioContext.createBufferSource();\n\n            source.buffer = ones;\n            source.loop = true;\n\n            source.connect(analyzer).connect(nativeAudioContext.destination);\n            source.connect(dummy);\n            source.disconnect(dummy);\n\n            // tslint:disable-next-line:deprecation\n            analyzer.onaudioprocess = (event) => {\n                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n                if (Array.prototype.some.call(chnnlDt, (sample: number) => sample === 1)) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n\n                source.stop();\n\n                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                source.disconnect(analyzer);\n                analyzer.disconnect(nativeAudioContext.destination);\n            };\n\n            source.start();\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}