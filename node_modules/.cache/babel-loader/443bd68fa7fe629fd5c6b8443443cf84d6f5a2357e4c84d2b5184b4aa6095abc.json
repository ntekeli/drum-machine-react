{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport var GreaterThanZero = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(GreaterThanZero, _SignalOperator);\n  var _super = _createSuper(GreaterThanZero);\n  function GreaterThanZero() {\n    var _this;\n    _classCallCheck(this, GreaterThanZero);\n    _this = _super.call(this, Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n    _this.name = \"GreaterThanZero\";\n    _this._thresh = _this.output = new WaveShaper({\n      context: _this.context,\n      length: 127,\n      mapping: function mapping(val) {\n        if (val <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    });\n    _this._scale = _this.input = new Multiply({\n      context: _this.context,\n      value: 10000\n    });\n    // connections\n    _this._scale.connect(_this._thresh);\n    return _this;\n  }\n  _createClass(GreaterThanZero, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GreaterThanZero.prototype), \"dispose\", this).call(this);\n      this._scale.dispose();\n      this._thresh.dispose();\n      return this;\n    }\n  }]);\n  return GreaterThanZero;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,cAAc,QAA+B,kBAAkB;AACxE,SAASC,QAAQ,QAAQ,YAAY;AAErC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,oBAAoB,QAAQ,uBAAuB;AAI5D;;;;;;;;;;AAUA,WAAaC,eAAgB;EAAA;EAAA;EAmB5B;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACH,oBAAoB,CAACC,eAAe,CAACG,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAlB3E,UAAI,GAAW,iBAAiB;IAoBxC,MAAKC,OAAO,GAAG,MAAKC,MAAM,GAAG,IAAIR,UAAU,CAAC;MAC3CS,OAAO,EAAE,MAAKA,OAAO;MACrBC,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE,iBAACC,GAAG,EAAI;QAChB,IAAIA,GAAG,IAAI,CAAC,EAAE;UACb,OAAO,CAAC;SACR,MAAM;UACN,OAAO,CAAC;;MAEV;KACA,CAAC;IACF,MAAKC,MAAM,GAAG,MAAKC,KAAK,GAAG,IAAIf,QAAQ,CAAC;MACvCU,OAAO,EAAE,MAAKA,OAAO;MACrBM,KAAK,EAAE;KACP,CAAC;IAEF;IACA,MAAKF,MAAM,CAACG,OAAO,CAAC,MAAKT,OAAO,CAAC;IAAC;EACnC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACM,MAAM,CAACI,OAAO,EAAE;MACrB,IAAI,CAACV,OAAO,CAACU,OAAO,EAAE;MACtB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EA/CmCnB,cAAsC","names":["SignalOperator","Multiply","WaveShaper","optionsFromArguments","GreaterThanZero","Object","assign","getDefaults","arguments","_thresh","output","context","length","mapping","val","_scale","input","value","connect","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\GreaterThanZero.ts"],"sourcesContent":["import { SignalOperator, SignalOperatorOptions } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport type GreaterThanZeroOptions = SignalOperatorOptions\n\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThanZero extends SignalOperator<GreaterThanZeroOptions> {\n\n\treadonly name: string = \"GreaterThanZero\";\n\n\t/**\n\t * The waveshaper\n\t */\n\tprivate _thresh: WaveShaper;\n\n\t/**\n\t * Scale the first thresholded signal by a large value.\n\t * this will help with values which are very close to 0\n\t */\n\tprivate _scale: Multiply;\n\n\treadonly output: ToneAudioNode;\n\treadonly input: ToneAudioNode;\n\n\tconstructor(options?: Partial<GreaterThanZeroOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n\n\t\tthis._thresh = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 127,\n\t\t\tmapping: (val) => {\n\t\t\t\tif (val <= 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._scale = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 10000\n\t\t});\n\n\t\t// connections\n\t\tthis._scale.connect(this._thresh);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}