{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport var AmplitudeEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(AmplitudeEnvelope, _Envelope);\n  var _super = _createSuper(AmplitudeEnvelope);\n  function AmplitudeEnvelope() {\n    var _this;\n    _classCallCheck(this, AmplitudeEnvelope);\n    _this = _super.call(this, optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    _this.name = \"AmplitudeEnvelope\";\n    _this._gainNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    _this.output = _this._gainNode;\n    _this.input = _this._gainNode;\n    _this._sig.connect(_this._gainNode.gain);\n    _this.output = _this._gainNode;\n    _this.input = _this._gainNode;\n    return _this;\n  }\n  /**\n   * Clean up\n   */\n  _createClass(AmplitudeEnvelope, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AmplitudeEnvelope.prototype), \"dispose\", this).call(this);\n      this._gainNode.dispose();\n      return this;\n    }\n  }]);\n  return AmplitudeEnvelope;\n}(Envelope);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAyB,YAAY;AAEtD;;;;;;;;;;;;;;;;;;;;;;AAsBA,WAAaC,iBAAkB;EAAA;EAAA;EAsB9B;IAAA;IAAA;IACC,0BAAMF,oBAAoB,CAACE,iBAAiB,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IArBzG,UAAI,GAAW,mBAAmB;IAEnC,eAAS,GAAS,IAAIL,IAAI,CAAC;MAClCM,OAAO,EAAE,MAAKA,OAAO;MACrBC,IAAI,EAAE;KACN,CAAC;IACF,YAAM,GAAS,MAAKC,SAAS;IAC7B,WAAK,GAAS,MAAKA,SAAS;IAe3B,MAAKC,IAAI,CAACC,OAAO,CAAC,MAAKF,SAAS,CAACD,IAAI,CAAC;IACtC,MAAKI,MAAM,GAAG,MAAKH,SAAS;IAC5B,MAAKI,KAAK,GAAG,MAAKJ,SAAS;IAAC;EAC7B;EAEA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACA,SAAS,CAACK,OAAO,EAAE;MACxB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EApCqCX,QAAQ","names":["Gain","optionsFromArguments","Envelope","AmplitudeEnvelope","getDefaults","arguments","context","gain","_gainNode","_sig","connect","output","input","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\envelope\\AmplitudeEnvelope.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}