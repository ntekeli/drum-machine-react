{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport var Gain = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Gain, _ToneAudioNode);\n  var _super = _createSuper(Gain);\n  function Gain() {\n    var _this;\n    _classCallCheck(this, Gain);\n    _this = _super.call(this, optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    _this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n    _this._gainNode = _this.context.createGain();\n    // input = output\n    _this.input = _this._gainNode;\n    _this.output = _this._gainNode;\n    var options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    _this.gain = new Param({\n      context: _this.context,\n      convert: options.convert,\n      param: _this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(_assertThisInitialized(_this), \"gain\");\n    return _this;\n  }\n  _createClass(Gain, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(Gain.prototype), \"dispose\", this).call(this);\n      this._gainNode.disconnect();\n      this.gain.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        convert: true,\n        gain: 1,\n        units: \"gain\"\n      });\n    }\n  }]);\n  return Gain;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,KAAK,QAAQ,kBAAkB;AAExC,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,aAAa,QAA8B,iBAAiB;AAUrE;;;;;;;;;;;;;AAaA,WAAaC,IAAoE;EAAA;EAAA;EA6BhF;IAAA;IAAA;IACC,0BAAMH,oBAAoB,CAACG,IAAI,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IA5BpE,UAAI,GAAW,MAAM;IAY9B;;;IAGQ,eAAS,GAAa,MAAKC,OAAO,CAACC,UAAU,EAAE;IAEvD;IACS,WAAK,GAAa,MAAKC,SAAS;IAChC,YAAM,GAAa,MAAKA,SAAS;IAUzC,IAAMC,OAAO,GAAGT,oBAAoB,CAACG,IAAI,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEtF,MAAKK,IAAI,GAAG,IAAIX,KAAK,CAAC;MACrBO,OAAO,EAAE,MAAKA,OAAO;MACrBK,OAAO,EAAEF,OAAO,CAACE,OAAO;MACxBC,KAAK,EAAE,MAAKJ,SAAS,CAACE,IAAI;MAC1BG,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpBC,KAAK,EAAEL,OAAO,CAACC,IAAI;MACnBK,QAAQ,EAAEN,OAAO,CAACM,QAAQ;MAC1BC,QAAQ,EAAEP,OAAO,CAACO;KAClB,CAAC;IACFf,QAAQ,gCAAO,MAAM,CAAC;IAAC;EACxB;EAAC;IAAA;IAAA;IAUD;;;IAGA,mBAAO;MACN;MACA,IAAI,CAACO,SAAS,CAACS,UAAU,EAAE;MAC3B,IAAI,CAACP,IAAI,CAACQ,OAAO,EAAE;MACnB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAhBD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAClB,aAAa,CAACE,WAAW,EAAE,EAAE;QACjDO,OAAO,EAAE,IAAI;QACbD,IAAI,EAAE,CAAC;QACPG,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EAnDuFX,aAAoC","names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Gain","getDefaults","arguments","context","createGain","_gainNode","options","gain","convert","param","units","value","minValue","maxValue","disconnect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\context\\Gain.ts"],"sourcesContent":["import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t * @example\n\t * const gainNode = new Tone.Gain(0).toDestination();\n\t * const osc = new Tone.Oscillator().connect(gainNode).start();\n\t * gainNode.gain.rampTo(1, 0.1);\n\t * gainNode.gain.rampTo(0, 2, \"+0.5\");\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}