{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport var Effect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Effect, _ToneAudioNode);\n  var _super = _createSuper(Effect);\n  function Effect(options) {\n    var _this;\n    _classCallCheck(this, Effect);\n    _this = _super.call(this, options);\n    _this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n    _this._dryWet = new CrossFade({\n      context: _this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n    _this.wet = _this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n    _this.effectSend = new Gain({\n      context: _this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n    _this.effectReturn = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect input node\n     */\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect output\n     */\n    _this.output = _this._dryWet;\n    // connections\n    _this.input.fan(_this._dryWet.a, _this.effectSend);\n    _this.effectReturn.connect(_this._dryWet.b);\n    _this.wet.setValueAtTime(options.wet, 0);\n    _this._internalChannels = [_this.effectReturn, _this.effectSend];\n    readOnly(_assertThisInitialized(_this), \"wet\");\n    return _this;\n  }\n  _createClass(Effect, [{\n    key: \"connectEffect\",\n    value:\n    /**\n     * chains the effect in between the effectSend and effectReturn\n     */\n    function connectEffect(effect) {\n      // add it to the internal channels\n      this._internalChannels.push(effect);\n      this.effectSend.chain(effect, this.effectReturn);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Effect.prototype), \"dispose\", this).call(this);\n      this._dryWet.dispose();\n      this.effectSend.dispose();\n      this.effectReturn.dispose();\n      this.wet.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n  return Effect;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,aAAa,QAA8B,+BAA+B;AAEnF,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD;;;;;AAKA,WAAsBC,MACrB;EAAA;EAAA;EAoCA,gBAAYC,OAAsB;IAAA;IAAA;IACjC,0BAAMA,OAAO;IAnCL,UAAI,GAAW,QAAQ;IAEhC;;;IAGQ,aAAO,GAAc,IAAIL,SAAS,CAAC;MAAEM,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAErE;;;;;IAKA,SAAG,GAA0B,MAAKC,OAAO,CAACC,IAAI;IAE9C;;;IAGU,gBAAU,GAAS,IAAIP,IAAI,CAAC;MAAEK,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAEhE;;;IAGU,kBAAY,GAAS,IAAIL,IAAI,CAAC;MAAEK,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAElE;;;IAGA,WAAK,GAAS,IAAIL,IAAI,CAAC;MAAEK,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAEjD;;;IAGA,YAAM,GAAG,MAAKC,OAAO;IAKpB;IACA,MAAKE,KAAK,CAACC,GAAG,CAAC,MAAKH,OAAO,CAACI,CAAC,EAAE,MAAKC,UAAU,CAAC;IAC/C,MAAKC,YAAY,CAACC,OAAO,CAAC,MAAKP,OAAO,CAACQ,CAAC,CAAC;IACzC,MAAKC,GAAG,CAACC,cAAc,CAACZ,OAAO,CAACW,GAAG,EAAE,CAAC,CAAC;IACvC,MAAKE,iBAAiB,GAAG,CAAC,MAAKL,YAAY,EAAE,MAAKD,UAAU,CAAC;IAC7DT,QAAQ,gCAAO,KAAK,CAAC;IAAC;EACvB;EAAC;IAAA;IAAA;IAQD;;;IAGU,uBAAcgB,MAAiC;MACxD;MACA,IAAI,CAACD,iBAAiB,CAACE,IAAI,CAACD,MAAM,CAAC;MACnC,IAAI,CAACP,UAAU,CAACS,KAAK,CAACF,MAAM,EAAE,IAAI,CAACN,YAAY,CAAC;MAChD,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACN,OAAO,CAACe,OAAO,EAAE;MACtB,IAAI,CAACV,UAAU,CAACU,OAAO,EAAE;MACzB,IAAI,CAACT,YAAY,CAACS,OAAO,EAAE;MAC3B,IAAI,CAACN,GAAG,CAACM,OAAO,EAAE;MAClB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAvBD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACtB,aAAa,CAACuB,WAAW,EAAE,EAAE;QACjDT,GAAG,EAAE;OACL,CAAC;IACH;EAAC;EAAA;AAAA,EAnDOd,aAAsB","names":["CrossFade","Gain","ToneAudioNode","readOnly","Effect","options","context","_dryWet","fade","input","fan","a","effectSend","effectReturn","connect","b","wet","setValueAtTime","_internalChannels","effect","push","chain","dispose","Object","assign","getDefaults"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\Effect.ts"],"sourcesContent":["import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}