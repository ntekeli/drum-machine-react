{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AudioToGain } from \"../signal/AudioToGain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\nexport var AMSynth = /*#__PURE__*/function (_ModulationSynth) {\n  _inherits(AMSynth, _ModulationSynth);\n  var _super = _createSuper(AMSynth);\n  function AMSynth() {\n    var _this;\n    _classCallCheck(this, AMSynth);\n    _this = _super.call(this, optionsFromArguments(AMSynth.getDefaults(), arguments));\n    _this.name = \"AMSynth\";\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    });\n    // control the two voices frequency\n    _this.frequency.connect(_this._carrier.frequency);\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n    _this._carrier.chain(_this._modulationNode, _this.output);\n    return _this;\n  }\n  _createClass(AMSynth, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AMSynth.prototype), \"dispose\", this).call(this);\n      this._modulationScale.dispose();\n      return this;\n    }\n  }]);\n  return AMSynth;\n}(ModulationSynth);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,WAAW,QAAQ,uBAAuB;AAEnD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,eAAe,QAAgC,mBAAmB;AAI3E;;;;;;;;;;;;;AAaA,WAAaC,OAAQ;EAAA;EAAA;EAUpB;IAAA;IAAA;IACC,0BAAMF,oBAAoB,CAACE,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IATpD,UAAI,GAAW,SAAS;IAWhC,MAAKC,gBAAgB,GAAG,IAAIN,WAAW,CAAC;MACvCO,OAAO,EAAE,MAAKA;KACd,CAAC;IAEF;IACA,MAAKC,SAAS,CAACC,OAAO,CAAC,MAAKC,QAAQ,CAACF,SAAS,CAAC;IAC/C,MAAKA,SAAS,CAACG,KAAK,CAAC,MAAKC,WAAW,EAAE,MAAKC,UAAU,CAACL,SAAS,CAAC;IACjE,MAAKM,MAAM,CAACC,GAAG,CAAC,MAAKL,QAAQ,CAACI,MAAM,EAAE,MAAKD,UAAU,CAACC,MAAM,CAAC;IAC7D,MAAKD,UAAU,CAACF,KAAK,CAAC,MAAKL,gBAAgB,EAAE,MAAKU,eAAe,CAACC,IAAI,CAAC;IACvE,MAAKP,QAAQ,CAACC,KAAK,CAAC,MAAKK,eAAe,EAAE,MAAKE,MAAM,CAAC;IAAC;EACxD;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACZ,gBAAgB,CAACa,OAAO,EAAE;MAC/B,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EA7B2BjB,eAA+B","names":["AudioToGain","optionsFromArguments","ModulationSynth","AMSynth","getDefaults","arguments","_modulationScale","context","frequency","connect","_carrier","chain","harmonicity","_modulator","detune","fan","_modulationNode","gain","output","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\AMSynth.ts"],"sourcesContent":["import { AudioToGain } from \"../signal/AudioToGain\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport type AMSynthOptions = ModulationSynthOptions;\n\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n * \n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth<AMSynthOptions> {\n\n\treadonly name: string = \"AMSynth\";\n\n\t/**\n\t * Scale the oscillator from -1,1 to 0-1\n\t */\n\tprivate _modulationScale: AudioToGain;\n\n\tconstructor(options?: RecursivePartial<AMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AMSynth.getDefaults(), arguments));\n\n\t\tthis._modulationScale = new AudioToGain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}