{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport var Pow = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Pow, _SignalOperator);\n  var _super = _createSuper(Pow);\n  function Pow() {\n    var _this;\n    _classCallCheck(this, Pow);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n    _this.name = \"Pow\";\n    var options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    _this._exponentScaler = _this.input = _this.output = new WaveShaper({\n      context: _this.context,\n      mapping: _this._expFunc(options.value),\n      length: 8192\n    });\n    _this._exponent = options.value;\n    return _this;\n  }\n  _createClass(Pow, [{\n    key: \"_expFunc\",\n    value:\n    /**\n     * the function which maps the waveshaper\n     * @param exponent exponent value\n     */\n    function _expFunc(exponent) {\n      return function (val) {\n        return Math.pow(Math.abs(val), exponent);\n      };\n    }\n    /**\n     * The value of the exponent.\n     */\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._exponent;\n    },\n    set: function set(exponent) {\n      this._exponent = exponent;\n      this._exponentScaler.setMap(this._expFunc(this._exponent));\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Pow.prototype), \"dispose\", this).call(this);\n      this._exponentScaler.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(SignalOperator.getDefaults(), {\n        value: 1\n      });\n    }\n  }]);\n  return Pow;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAU,QAA6B,cAAc;AAC9D,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,cAAc,QAAQ,kBAAkB;AAOjD;;;;;;;;;AASA,WAAaC,GAAI;EAAA;EAAA;EAiBhB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACJ,oBAAoB,CAACE,GAAG,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAhB1E,UAAI,GAAW,KAAK;IAiB5B,IAAMC,OAAO,GAAGP,oBAAoB,CAACE,GAAG,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAE7E,MAAKE,eAAe,GAAG,MAAKC,KAAK,GAAG,MAAKC,MAAM,GAAG,IAAIX,UAAU,CAAC;MAChEY,OAAO,EAAE,MAAKA,OAAO;MACrBC,OAAO,EAAE,MAAKC,QAAQ,CAACN,OAAO,CAACO,KAAK,CAAC;MACrCC,MAAM,EAAE;KACR,CAAC;IAEF,MAAKC,SAAS,GAAGT,OAAO,CAACO,KAAK;IAAC;EAChC;EAAC;IAAA;IAAA;IAQD;;;;IAIQ,kBAASG,QAAgB;MAChC,OAAO,UAACC,GAAW,EAAI;QACtB,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,GAAG,CAAC,EAAED,QAAQ,CAAC;MACzC,CAAC;IACF;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAS;MACR,OAAO,IAAI,CAACD,SAAS;IACtB,CAAC;IAAA,KACD,aAAUC,QAAgB;MACzB,IAAI,CAACD,SAAS,GAAGC,QAAQ;MACzB,IAAI,CAACT,eAAe,CAACc,MAAM,CAAC,IAAI,CAACT,QAAQ,CAAC,IAAI,CAACG,SAAS,CAAC,CAAC;IAC3D;IAEA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACR,eAAe,CAACe,OAAO,EAAE;MAC9B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAlCD,uBAAkB;MACjB,OAAOpB,MAAM,CAACC,MAAM,CAACH,cAAc,CAACI,WAAW,EAAE,EAAE;QAClDS,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EAlCuBb,cAA0B","names":["WaveShaper","optionsFromArguments","SignalOperator","Pow","Object","assign","getDefaults","arguments","options","_exponentScaler","input","output","context","mapping","_expFunc","value","length","_exponent","exponent","val","Math","pow","abs","setMap","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\Pow.ts"],"sourcesContent":["import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\n\treadonly name: string = \"Pow\";\n\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}