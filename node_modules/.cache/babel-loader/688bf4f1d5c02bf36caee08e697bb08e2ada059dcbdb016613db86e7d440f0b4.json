{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeStereoPannerNodes = new WeakMap();\n    var createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeStereoPannerNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n              nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n              if (!nativeStereoPannerNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeStereoPannerNode.channelCount,\n                  channelCountMode: nativeStereoPannerNode.channelCountMode,\n                  channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                  pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n              if (nativeStereoPannerNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            case 11:\n              if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                _context.next = 16;\n                break;\n              }\n              _context.next = 14;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            case 14:\n              _context.next = 18;\n              break;\n            case 16:\n              _context.next = 18;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            case 18:\n              return _context.abrupt(\"return\", nativeStereoPannerNode);\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createStereoPannerNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,qCAAqC,GAA4C,SAAjFA,qCAAqC,CAC9CC,iBAAiB,EACjBC,4BAA4B,EAC5BC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,+BAA+B,GAAG,IAAIC,OAAO,EAAuD;IAE1G,IAAMC,sBAAsB;MAAA,sEAAG,iBAAOC,KAA2B,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAChHC,sBAAsB,GAAGR,kBAAkB,CAA6BM,KAAK,CAAC;cAElF;;;;cAIMG,sCAAsC,GAAGb,gBAAgB,CAACY,sBAAsB,EAAED,yBAAyB,CAAC;cAElH,IAAI,CAACE,sCAAsC,EAAE;gBACnCC,OAAO,GAAG;kBACZC,YAAY,EAAEH,sBAAsB,CAACG,YAAY;kBACjDC,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAAgB;kBACzDC,qBAAqB,EAAEL,sBAAsB,CAACK,qBAAqB;kBACnEC,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAACC;iBACnC;gBAEDP,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAyB,EAAEG,OAAO,CAAC;;cAG7FP,+BAA+B,CAACa,GAAG,CAACT,yBAAyB,EAAEC,sBAAsB,CAAC;cAAC,IAElFC,sCAAsC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACjCR,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACQ,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAElFhB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACQ,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAAC;YAAA;cAAA,KAGzFnB,sBAAsB,CAACa,sBAAsB,CAAC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACxCN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,sBAAsB,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAE3Ff,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,sBAAsB,CAAC;YAAA;cAAA,iCAGpFA,sBAAsB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAChC;MAAA,gBAnCKH,sBAAsB;QAAA;MAAA;IAAA,GAmC3B;IAED,OAAO;MACHa,MAAM,kBAACZ,KAA2B,EAAEC,yBAAqD;QACrF,IAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAG,CAACb,yBAAyB,CAAC;QAErG,IAAIY,8BAA8B,KAAKE,SAAS,EAAE;UAC9C,OAAOC,OAAO,CAACC,OAAO,CAACJ,8BAA8B,CAAC;;QAG1D,OAAOd,sBAAsB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACnE;KACH;EACL,CAAC;AACL,CAAC","names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\stereo-panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IStereoPannerNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeStereoPannerNode, TStereoPannerNodeRendererFactoryFactory } from '../types';\n\nexport const createStereoPannerNodeRendererFactory: TStereoPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeStereoPannerNodes = new WeakMap<TNativeOfflineAudioContext, TNativeStereoPannerNode>();\n\n        const createStereoPannerNode = async (proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode<T, TNativeStereoPannerNode>(proxy);\n\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n\n            return nativeStereoPannerNode;\n        };\n\n        return {\n            render(proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeStereoPannerNode> {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}