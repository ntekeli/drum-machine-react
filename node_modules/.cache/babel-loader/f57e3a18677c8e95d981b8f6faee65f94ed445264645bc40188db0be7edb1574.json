{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createDecodeAudioData = function createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (anyContext, audioData) {\n    var nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n    // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n    if (detachedArrayBuffers.has(audioData)) {\n      var err = createDataCloneError();\n      return Promise.reject(err);\n    }\n    // The audioData parameter maybe of a type which can't be added to a WeakSet.\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch (_unused) {\n      // Ignore errors.\n    }\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, function () {\n      return testPromiseSupport(nativeContext);\n    })) {\n      return nativeContext.decodeAudioData(audioData).then(function (audioBuffer) {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(function () {\n          // Ignore errors.\n        });\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n          return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n        })) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    }\n    // Bug #21: Safari does not return a Promise yet.\n    return new Promise(function (resolve, reject) {\n      var complete = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return detachArrayBuffer(audioData);\n              case 3:\n                _context.next = 7;\n                break;\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 5]]);\n        }));\n        return function complete() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      var fail = function fail(err) {\n        reject(err);\n        complete();\n      };\n      // Bug #26: Safari throws a synchronous error.\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, function (audioBuffer) {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n          audioBufferStore.add(audioBuffer);\n          complete().then(function () {\n            return resolve(audioBuffer);\n          });\n        }, function (err) {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,mCAAmC,QAAQ,sDAAsD;AAG1G,OAAO,IAAMC,qBAAqB,GAA4B,SAAjDA,qBAAqB,CAC9BC,gBAAgB,EAChBC,eAAe,EACfC,oBAAoB,EACpBC,mBAAmB,EACnBC,oBAAoB,EACpBC,gBAAgB,EAChBC,eAAe,EACfC,mDAAmD,EACnDC,kBAAkB,EAClBC,iCAAiC,EACjCC,4CAA4C,EAC5C;EACA,OAAO,UAACC,UAAU,EAAEC,SAAS,EAAI;IAC7B,IAAMC,aAAa,GAAGP,eAAe,CAACK,UAAU,CAAC,GAAGA,UAAU,GAAGN,gBAAgB,CAACM,UAAU,CAAC;IAE7F;IACA,IAAIP,oBAAoB,CAACU,GAAG,CAACF,SAAS,CAAC,EAAE;MACrC,IAAMG,GAAG,GAAGb,oBAAoB,EAAE;MAElC,OAAOc,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;;IAG9B;IACA,IAAI;MACAX,oBAAoB,CAACc,GAAG,CAACN,SAAS,CAAC;KACtC,CAAC,gBAAM;MACJ;IAAA;IAGJ;IACA,IAAIX,eAAe,CAACO,kBAAkB,EAAE;MAAA,OAAMA,kBAAkB,CAACK,aAAa,CAAC;IAAA,EAAC,EAAE;MAC9E,OAAOA,aAAa,CAACM,eAAe,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAC,UAACC,WAAW,EAAI;QACjE;QACAxB,iBAAiB,CAACe,SAAS,CAAC,CAACU,KAAK,CAAC,YAAK;UACpC;QAAA,CACH,CAAC;QAEF;QACA,IACI,CAACrB,eAAe,CAACM,mDAAmD,EAAE;UAAA,OAClEA,mDAAmD,CAACc,WAAW,CAAC;QAAA,EACnE,EACH;UACEX,4CAA4C,CAACW,WAAW,CAAC;;QAG7DrB,gBAAgB,CAACkB,GAAG,CAACG,WAAW,CAAC;QAEjC,OAAOA,WAAW;MACtB,CAAC,CAAC;;IAGN;IACA,OAAO,IAAIL,OAAO,CAAC,UAACO,OAAO,EAAEN,MAAM,EAAI;MACnC,IAAMO,QAAQ;QAAA,sEAAG;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAGH3B,iBAAiB,CAACe,SAAS,CAAC;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA,CAIzC;QAAA,gBAPKY,QAAQ;UAAA;QAAA;MAAA,GAOb;MAED,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAIV,GAAyB,EAAI;QACvCE,MAAM,CAACF,GAAG,CAAC;QACXS,QAAQ,EAAE;MACd,CAAC;MAED;MACA,IAAI;QACA;QACAX,aAAa,CAACM,eAAe,CACzBP,SAAS,EACT,UAACS,WAAW,EAAI;UACZ;UACA;UACA,IAAI,OAAOA,WAAW,CAACK,eAAe,KAAK,UAAU,EAAE;YACnDjB,iCAAiC,CAACY,WAAW,CAAC;YAC9CvB,mCAAmC,CAACuB,WAAW,CAAC;;UAGpDrB,gBAAgB,CAACkB,GAAG,CAACG,WAAW,CAAC;UAEjCG,QAAQ,EAAE,CAACJ,IAAI,CAAC;YAAA,OAAMG,OAAO,CAACF,WAAW,CAAC;UAAA,EAAC;QAC/C,CAAC,EACD,UAACN,GAAyB,EAAI;UAC1B;UACA,IAAIA,GAAG,KAAK,IAAI,EAAE;YACdU,IAAI,CAACtB,mBAAmB,EAAE,CAAC;WAC9B,MAAM;YACHsB,IAAI,CAACV,GAAG,CAAC;;QAEjB,CAAC,CACJ;OACJ,CAAC,OAAOA,GAAG,EAAE;QACVU,IAAI,CAACV,GAAG,CAAC;;IAEjB,CAAC,CAAC;EACN,CAAC;AACL,CAAC","names":["detachArrayBuffer","wrapAudioBufferGetChannelDataMethod","createDecodeAudioData","audioBufferStore","cacheTestResult","createDataCloneError","createEncodingError","detachedArrayBuffers","getNativeContext","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","anyContext","audioData","nativeContext","has","err","Promise","reject","add","decodeAudioData","then","audioBuffer","catch","resolve","complete","fail","copyFromChannel"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\decode-audio-data.ts"],"sourcesContent":["import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TDecodeAudioDataFactory } from '../types';\n\nexport const createDecodeAudioData: TDecodeAudioDataFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    detachedArrayBuffers,\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n\n            return Promise.reject(err);\n        }\n\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        } catch {\n            // Ignore errors.\n        }\n\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n        }\n\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                } catch {\n                    // Ignore errors.\n                }\n            };\n\n            const fail = (err: DOMException | Error) => {\n                reject(err);\n                complete();\n            };\n\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(\n                    audioData,\n                    (audioBuffer) => {\n                        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                        if (typeof audioBuffer.copyFromChannel !== 'function') {\n                            wrapAudioBufferCopyChannelMethods(audioBuffer);\n                            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                        }\n\n                        audioBufferStore.add(audioBuffer);\n\n                        complete().then(() => resolve(audioBuffer));\n                    },\n                    (err: DOMException | Error) => {\n                        // Bug #4: Safari returns null instead of an error.\n                        if (err === null) {\n                            fail(createEncodingError());\n                        } else {\n                            fail(err);\n                        }\n                    }\n                );\n            } catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}