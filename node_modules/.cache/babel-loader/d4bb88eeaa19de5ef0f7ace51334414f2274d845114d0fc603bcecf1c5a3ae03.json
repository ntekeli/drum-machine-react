{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\nexport var FMSynth = /*#__PURE__*/function (_ModulationSynth) {\n  _inherits(FMSynth, _ModulationSynth);\n  var _super = _createSuper(FMSynth);\n  function FMSynth() {\n    var _this;\n    _classCallCheck(this, FMSynth);\n    _this = _super.call(this, optionsFromArguments(FMSynth.getDefaults(), arguments));\n    _this.name = \"FMSynth\";\n    var options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    _this.modulationIndex = new Multiply({\n      context: _this.context,\n      value: options.modulationIndex\n    });\n    // control the two voices frequency\n    _this.frequency.connect(_this._carrier.frequency);\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n    _this.frequency.chain(_this.modulationIndex, _this._modulationNode);\n    _this.detune.fan(_this._carrier.detune, _this._modulator.detune);\n    _this._modulator.connect(_this._modulationNode.gain);\n    _this._modulationNode.connect(_this._carrier.frequency);\n    _this._carrier.connect(_this.output);\n    return _this;\n  }\n  _createClass(FMSynth, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FMSynth.prototype), \"dispose\", this).call(this);\n      this.modulationIndex.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ModulationSynth.getDefaults(), {\n        modulationIndex: 10\n      });\n    }\n  }]);\n  return FMSynth;\n}(ModulationSynth);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,oBAAoB,QAAQ,uBAAuB;AAE5D,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,eAAe,QAAgC,mBAAmB;AAM3E;;;;;;;;;;;;AAaA,WAAaC,OAAQ;EAAA;EAAA;EAWpB;IAAA;IAAA;IACC,0BAAMH,oBAAoB,CAACG,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAXpD,UAAI,GAAW,SAAS;IAYhC,IAAMC,OAAO,GAAGN,oBAAoB,CAACG,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAEtE,MAAKE,eAAe,GAAG,IAAIN,QAAQ,CAAC;MACnCO,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAEH,OAAO,CAACC;KACf,CAAC;IAEF;IACA,MAAKG,SAAS,CAACC,OAAO,CAAC,MAAKC,QAAQ,CAACF,SAAS,CAAC;IAC/C,MAAKA,SAAS,CAACG,KAAK,CAAC,MAAKC,WAAW,EAAE,MAAKC,UAAU,CAACL,SAAS,CAAC;IACjE,MAAKA,SAAS,CAACG,KAAK,CAAC,MAAKN,eAAe,EAAE,MAAKS,eAAe,CAAC;IAChE,MAAKC,MAAM,CAACC,GAAG,CAAC,MAAKN,QAAQ,CAACK,MAAM,EAAE,MAAKF,UAAU,CAACE,MAAM,CAAC;IAC7D,MAAKF,UAAU,CAACJ,OAAO,CAAC,MAAKK,eAAe,CAACG,IAAI,CAAC;IAClD,MAAKH,eAAe,CAACL,OAAO,CAAC,MAAKC,QAAQ,CAACF,SAAS,CAAC;IACrD,MAAKE,QAAQ,CAACD,OAAO,CAAC,MAAKS,MAAM,CAAC;IAAC;EACpC;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACb,eAAe,CAACc,OAAO,EAAE;MAC9B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACrB,eAAe,CAACE,WAAW,EAAE,EAAE;QACnDG,eAAe,EAAE;OACjB,CAAC;IACH;EAAC;EAAA;AAAA,EAlC2BL,eAA+B","names":["optionsFromArguments","Multiply","ModulationSynth","FMSynth","getDefaults","arguments","options","modulationIndex","context","value","frequency","connect","_carrier","chain","harmonicity","_modulator","_modulationNode","detune","fan","gain","output","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\FMSynth.ts"],"sourcesContent":["import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}