{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport var Mono = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Mono, _ToneAudioNode);\n  var _super = _createSuper(Mono);\n  function Mono() {\n    var _this;\n    _classCallCheck(this, Mono);\n    _this = _super.call(this, optionsFromArguments(Mono.getDefaults(), arguments));\n    _this.name = \"Mono\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._merge = _this.output = new Merge({\n      channels: 2,\n      context: _this.context\n    });\n    _this.input.connect(_this._merge, 0, 0);\n    _this.input.connect(_this._merge, 0, 1);\n    return _this;\n  }\n  _createClass(Mono, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Mono.prototype), \"dispose\", this).call(this);\n      this._merge.dispose();\n      this.input.dispose();\n      return this;\n    }\n  }]);\n  return Mono;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAC9C,SAAqBC,aAAa,QAA8B,kCAAkC;AAClG,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,KAAK,QAAQ,SAAS;AAI/B;;;;;;AAMA,WAAaC,IAAK;EAAA;EAAA;EAoBjB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,IAAI,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IApBjD,UAAI,GAAW,MAAM;IAsB7B,MAAKC,KAAK,GAAG,IAAIP,IAAI,CAAC;MAAEQ,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAEhD,MAAKC,MAAM,GAAG,MAAKC,MAAM,GAAG,IAAIP,KAAK,CAAC;MACrCQ,QAAQ,EAAE,CAAC;MACXH,OAAO,EAAE,MAAKA;KACd,CAAC;IAEF,MAAKD,KAAK,CAACK,OAAO,CAAC,MAAKH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACrC,MAAKF,KAAK,CAACK,OAAO,CAAC,MAAKH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAAC;EACvC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACA,MAAM,CAACI,OAAO,EAAE;MACrB,IAAI,CAACN,KAAK,CAACM,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EAxCwBZ,aAA0B","names":["Gain","ToneAudioNode","optionsFromArguments","Merge","Mono","getDefaults","arguments","input","context","_merge","output","channels","connect","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Mono.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n\nexport type MonoOptions = ToneAudioNodeOptions;\n\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode<MonoOptions> {\n\n\treadonly name: string = \"Mono\";\n\n\t/**\n\t * merge the signal\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The summed output of the multiple inputs\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * The stereo signal to sum to mono\n\t */\n\treadonly input: Gain;\n\n\tconstructor(options?: Partial<MonoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Mono.getDefaults(), arguments));\n\n\t\tthis.input = new Gain({ context: this.context });\n\n\t\tthis._merge = this.output = new Merge({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tthis.input.connect(this._merge, 0, 0);\n\t\tthis.input.connect(this._merge, 0, 1);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merge.dispose();\n\t\tthis.input.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}