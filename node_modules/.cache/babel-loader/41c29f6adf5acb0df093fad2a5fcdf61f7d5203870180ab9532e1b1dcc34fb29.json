{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n    var renderedBufferPromise = null;\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(proxy, nativeOfflineAudioContext) {\n        var nativeGainNode, nativePannerNode, commonAudioNodeOptions, commonNativePannerNodeOptions, nativePannerNodeIsOwnedByContext, options, partialOfflineAudioContext, nativeChannelMergerNode, renderedBuffer, inputGainNode, channelDatas, i, lastOrientation, lastPosition, gateGainNode, partialPannerNode, _i, orientation, positon, currentTime;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              nativeGainNode = null;\n              nativePannerNode = getNativeAudioNode(proxy);\n              commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n              };\n              commonNativePannerNodeOptions = _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n              }); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n              if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                  gain: 1\n                }));\n              } else if (!nativePannerNodeIsOwnedByContext) {\n                options = _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                  orientationX: nativePannerNode.orientationX.value,\n                  orientationY: nativePannerNode.orientationY.value,\n                  orientationZ: nativePannerNode.orientationZ.value,\n                  positionX: nativePannerNode.positionX.value,\n                  positionY: nativePannerNode.positionY.value,\n                  positionZ: nativePannerNode.positionZ.value\n                });\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n              if (!(nativeGainNode !== null)) {\n                _context3.next = 31;\n                break;\n              }\n              if (!(renderedBufferPromise === null)) {\n                _context3.next = 15;\n                break;\n              }\n              if (!(nativeOfflineAudioContextConstructor === null)) {\n                _context3.next = 11;\n                break;\n              }\n              throw new Error('Missing the native OfflineAudioContext constructor.');\n            case 11:\n              partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6,\n              // Bug #17: Safari does not yet expose the length.\n              proxy.context.length, nativeOfflineAudioContext.sampleRate);\n              nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 6\n              });\n              nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n              renderedBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                var nativeConstantSourceNodes, i;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map( /*#__PURE__*/function () {\n                        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(audioParam, index) {\n                          var nativeConstantSourceNode;\n                          return _regeneratorRuntime().wrap(function _callee$(_context) {\n                            while (1) switch (_context.prev = _context.next) {\n                              case 0:\n                                nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                  channelCount: 1,\n                                  channelCountMode: 'explicit',\n                                  channelInterpretation: 'discrete',\n                                  offset: index === 0 ? 1 : 0\n                                });\n                                _context.next = 3;\n                                return renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n                              case 3:\n                                return _context.abrupt(\"return\", nativeConstantSourceNode);\n                              case 4:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }, _callee);\n                        }));\n                        return function (_x3, _x4) {\n                          return _ref3.apply(this, arguments);\n                        };\n                      }()));\n                    case 2:\n                      nativeConstantSourceNodes = _context2.sent;\n                      for (i = 0; i < 6; i += 1) {\n                        nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                        nativeConstantSourceNodes[i].start(0);\n                      }\n                      return _context2.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }))();\n            case 15:\n              _context3.next = 17;\n              return renderedBufferPromise;\n            case 17:\n              renderedBuffer = _context3.sent;\n              inputGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                gain: 1\n              }));\n              _context3.next = 21;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n            case 21:\n              channelDatas = [];\n              for (i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                channelDatas.push(renderedBuffer.getChannelData(i));\n              }\n              lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n              lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n              gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                gain: 1\n              }));\n              partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                orientationX: lastOrientation[0],\n                orientationY: lastOrientation[1],\n                orientationZ: lastOrientation[2],\n                positionX: lastPosition[0],\n                positionY: lastPosition[1],\n                positionZ: lastPosition[2]\n              }));\n              inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n              partialPannerNode.connect(nativeGainNode);\n              for (_i = 128; _i < renderedBuffer.length; _i += 128) {\n                orientation = [channelDatas[0][_i], channelDatas[1][_i], channelDatas[2][_i]];\n                positon = [channelDatas[3][_i], channelDatas[4][_i], channelDatas[5][_i]];\n                if (orientation.some(function (value, index) {\n                  return value !== lastOrientation[index];\n                }) || positon.some(function (value, index) {\n                  return value !== lastPosition[index];\n                })) {\n                  lastOrientation = orientation;\n                  lastPosition = positon;\n                  currentTime = _i / nativeOfflineAudioContext.sampleRate;\n                  gateGainNode.gain.setValueAtTime(0, currentTime);\n                  gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                    gain: 0\n                  }));\n                  partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                  }));\n                  gateGainNode.gain.setValueAtTime(1, currentTime);\n                  inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                  partialPannerNode.connect(nativeGainNode);\n                }\n              }\n              return _context3.abrupt(\"return\", nativeGainNode);\n            case 31:\n              if (nativePannerNodeIsOwnedByContext) {\n                _context3.next = 46;\n                break;\n              }\n              _context3.next = 34;\n              return renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n            case 34:\n              _context3.next = 36;\n              return renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n            case 36:\n              _context3.next = 38;\n              return renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n            case 38:\n              _context3.next = 40;\n              return renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n            case 40:\n              _context3.next = 42;\n              return renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n            case 42:\n              _context3.next = 44;\n              return renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            case 44:\n              _context3.next = 58;\n              break;\n            case 46:\n              _context3.next = 48;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n            case 48:\n              _context3.next = 50;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n            case 50:\n              _context3.next = 52;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n            case 52:\n              _context3.next = 54;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n            case 54:\n              _context3.next = 56;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n            case 56:\n              _context3.next = 58;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            case 58:\n              if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                _context3.next = 63;\n                break;\n              }\n              _context3.next = 61;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            case 61:\n              _context3.next = 65;\n              break;\n            case 63:\n              _context3.next = 65;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            case 65:\n              return _context3.abrupt(\"return\", nativePannerNode);\n            case 66:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","nativeConstantSourceNodes","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\panner-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, INativePannerNodeFaker, IOfflineAudioContext, IPannerNode } from '../interfaces';\nimport {\n    TNativeAudioBuffer,\n    TNativeGainNode,\n    TNativeOfflineAudioContext,\n    TNativePannerNode,\n    TPannerNodeRendererFactoryFactory\n} from '../types';\n\nexport const createPannerNodeRendererFactory: TPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode | TNativePannerNode>();\n\n        let renderedBufferPromise: null | Promise<TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode: null | TNativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode<T, TNativePannerNode>(proxy);\n\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            } else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        6,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all(\n                            [\n                                proxy.orientationX,\n                                proxy.orientationY,\n                                proxy.orientationZ,\n                                proxy.positionX,\n                                proxy.positionY,\n                                proxy.positionZ\n                            ].map(async (audioParam, index) => {\n                                const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: index === 0 ? 1 : 0\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n\n                                return nativeConstantSourceNode;\n                            })\n                        );\n\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n\n                const channelDatas: Float32Array[] = [];\n\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n\n                inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation: [number, number, number] = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon: [number, number, number] = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n                    if (\n                        orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])\n                    ) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n\n                        inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n\n                return nativeGainNode;\n            }\n\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n\n            return nativePannerNode;\n        };\n\n        return {\n            render(\n                proxy: IPannerNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeGainNode | TNativePannerNode> {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}