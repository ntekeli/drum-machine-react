{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport var FrequencyEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(FrequencyEnvelope, _Envelope);\n  var _super = _createSuper(FrequencyEnvelope);\n  function FrequencyEnvelope() {\n    var _this;\n    _classCallCheck(this, FrequencyEnvelope);\n    _this = _super.call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    _this.name = \"FrequencyEnvelope\";\n    var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    _this._octaves = options.octaves;\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._exponent = _this.input = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._scale = _this.output = new Scale({\n      context: _this.context,\n      min: _this._baseFrequency,\n      max: _this._baseFrequency * Math.pow(2, _this._octaves)\n    });\n    _this._sig.chain(_this._exponent, _this._scale);\n    return _this;\n  }\n  _createClass(FrequencyEnvelope, [{\n    key: \"baseFrequency\",\n    get:\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    function get() {\n      return this._baseFrequency;\n    },\n    set: function set(min) {\n      var freq = this.toFrequency(min);\n      assertRange(freq, 0);\n      this._baseFrequency = freq;\n      this._scale.min = this._baseFrequency;\n      // update the max value when the min changes\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    }\n    /**\n     * The envelope's exponent value.\n     */\n  }, {\n    key: \"exponent\",\n    get: function get() {\n      return this._exponent.value;\n    },\n    set: function set(exponent) {\n      this._exponent.value = exponent;\n    }\n    /**\n     * Clean up\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyEnvelope.prototype), \"dispose\", this).call(this);\n      this._exponent.dispose();\n      this._scale.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Envelope.getDefaults(), {\n        baseFrequency: 200,\n        exponent: 1,\n        octaves: 4\n      });\n    }\n  }]);\n  return FrequencyEnvelope;\n}(Envelope);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","Envelope","Scale","Pow","assertRange","FrequencyEnvelope","getDefaults","arguments","options","_octaves","octaves","_baseFrequency","toFrequency","baseFrequency","_exponent","input","context","value","exponent","_scale","output","min","max","Math","pow","_sig","chain","freq","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\envelope\\FrequencyEnvelope.ts"],"sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tconst freq = this.toFrequency(min);\n\t\tassertRange(freq, 0);\n\t\tthis._baseFrequency = freq;\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: number) {\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}