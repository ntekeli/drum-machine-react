{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createDelayNodeRendererFactory = function createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function (maxDelayTime) {\n    var renderedNativeDelayNodes = new WeakMap();\n    var createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeDelayNode, nativeDelayNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n              if (!nativeDelayNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeDelayNode.channelCount,\n                  channelCountMode: nativeDelayNode.channelCountMode,\n                  channelInterpretation: nativeDelayNode.channelInterpretation,\n                  delayTime: nativeDelayNode.delayTime.value,\n                  maxDelayTime: maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n              if (nativeDelayNodeIsOwnedByContext) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            case 11:\n              _context.next = 13;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            case 13:\n              return _context.abrupt(\"return\", nativeDelayNode);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createDelayNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,8BAA8B,GAAqC,SAAnEA,8BAA8B,CACvCC,iBAAiB,EACjBC,qBAAqB,EACrBC,kBAAkB,EAClBC,gBAAgB,EAChBC,uBAAuB,EACvB;EACA,OAAO,UAA+DC,YAAoB,EAAI;IAC1F,IAAMC,wBAAwB,GAAG,IAAIC,OAAO,EAAgD;IAE5F,IAAMC,eAAe;MAAA,sEAAG,iBAAOC,KAAoB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAClGC,eAAe,GAAGT,kBAAkB,CAAsBO,KAAK,CAAC,EAEpE;cACMG,+BAA+B,GAAGd,gBAAgB,CAACa,eAAe,EAAED,yBAAyB,CAAC;cAEpG,IAAI,CAACE,+BAA+B,EAAE;gBAC5BC,OAAO,GAAG;kBACZC,YAAY,EAAEH,eAAe,CAACG,YAAY;kBAC1CC,gBAAgB,EAAEJ,eAAe,CAACI,gBAAgB;kBAClDC,qBAAqB,EAAEL,eAAe,CAACK,qBAAqB;kBAC5DC,SAAS,EAAEN,eAAe,CAACM,SAAS,CAACC,KAAK;kBAC1Cb,YAAY,EAAZA;iBACH;gBAEDM,eAAe,GAAGV,qBAAqB,CAACS,yBAAyB,EAAEG,OAAO,CAAC;;cAG/EP,wBAAwB,CAACa,GAAG,CAACT,yBAAyB,EAAEC,eAAe,CAAC;cAAC,IAEpEC,+BAA+B;gBAAA;gBAAA;cAAA;cAAA;cAAA,OAC1BT,gBAAgB,CAACO,yBAAyB,EAAED,KAAK,CAACQ,SAAS,EAAEN,eAAe,CAACM,SAAS,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAEvFjB,iBAAiB,CAACU,yBAAyB,EAAED,KAAK,CAACQ,SAAS,EAAEN,eAAe,CAACM,SAAS,CAAC;YAAA;cAAA;cAAA,OAG5Fb,uBAAuB,CAACK,KAAK,EAAEC,yBAAyB,EAAEC,eAAe,CAAC;YAAA;cAAA,iCAEzEA,eAAe;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACzB;MAAA,gBA7BKH,eAAe;QAAA;MAAA;IAAA,GA6BpB;IAED,OAAO;MACHY,MAAM,kBAACX,KAAoB,EAAEC,yBAAqD;QAC9E,IAAMW,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAG,CAACZ,yBAAyB,CAAC;QAEvF,IAAIW,uBAAuB,KAAKE,SAAS,EAAE;UACvC,OAAOC,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC;;QAGnD,OAAOb,eAAe,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC5D;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDelayNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDelayNodeRendererFactoryFactory, TNativeDelayNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDelayNodeRendererFactory: TDelayNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(maxDelayTime: number) => {\n        const renderedNativeDelayNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDelayNode>();\n\n        const createDelayNode = async (proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode<T, TNativeDelayNode>(proxy);\n\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n            return nativeDelayNode;\n        };\n\n        return {\n            render(proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeDelayNode> {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}