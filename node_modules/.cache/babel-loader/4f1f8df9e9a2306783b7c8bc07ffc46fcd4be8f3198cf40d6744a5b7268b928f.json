{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nvar allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport var Freeverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Freeverb, _StereoEffect);\n  var _super = _createSuper(Freeverb);\n  function Freeverb() {\n    var _this;\n    _classCallCheck(this, Freeverb);\n    _this = _super.call(this, optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    _this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n    _this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n    _this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n    _this._allpassFiltersR = [];\n    var options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    // make the allpass filters on the right\n    _this._allpassFiltersL = allpassFilterFrequencies.map(function (freq) {\n      var allpassL = _this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    });\n    // make the allpass filters on the left\n    _this._allpassFiltersR = allpassFilterFrequencies.map(function (freq) {\n      var allpassR = _this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    });\n    // make the comb filters\n    _this._combFilters = combFilterTunings.map(function (delayTime, index) {\n      var lfpf = new LowpassCombFilter({\n        context: _this.context,\n        dampening: options.dampening,\n        delayTime: delayTime\n      });\n      if (index < combFilterTunings.length / 2) {\n        var _this2;\n        (_this2 = _this).connectEffectLeft.apply(_this2, [lfpf].concat(_toConsumableArray(_this._allpassFiltersL)));\n      } else {\n        var _this3;\n        (_this3 = _this).connectEffectRight.apply(_this3, [lfpf].concat(_toConsumableArray(_this._allpassFiltersR)));\n      }\n      _this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n  _createClass(Freeverb, [{\n    key: \"dampening\",\n    get:\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    function get() {\n      return this._combFilters[0].dampening;\n    },\n    set: function set(d) {\n      this._combFilters.forEach(function (c) {\n        return c.dampening = d;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Freeverb.prototype), \"dispose\", this).call(this);\n      this._allpassFiltersL.forEach(function (al) {\n        return al.disconnect();\n      });\n      this._allpassFiltersR.forEach(function (ar) {\n        return ar.disconnect();\n      });\n      this._combFilters.forEach(function (cf) {\n        return cf.dispose();\n      });\n      this.roomSize.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.7,\n        dampening: 3000\n      });\n    }\n  }]);\n  return Freeverb;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","readOnly","Signal","LowpassCombFilter","combFilterTunings","allpassFilterFrequencies","Freeverb","getDefaults","arguments","options","roomSize","context","value","units","_allpassFiltersL","map","allpassL","createBiquadFilter","type","frequency","freq","_allpassFiltersR","allpassR","_combFilters","delayTime","index","lfpf","dampening","length","connectEffectLeft","connectEffectRight","connect","resonance","d","forEach","c","al","disconnect","ar","cf","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\Freeverb.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}