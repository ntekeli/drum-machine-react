{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createWaveShaperNodeRendererFactory = function createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeWaveShaperNodes = new WeakMap();\n    var createWaveShaperNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeWaveShaperNode, nativeWaveShaperNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n              if (!nativeWaveShaperNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeWaveShaperNode.channelCount,\n                  channelCountMode: nativeWaveShaperNode.channelCountMode,\n                  channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                  curve: nativeWaveShaperNode.curve,\n                  oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n              if (!isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            case 11:\n              return _context.abrupt(\"return\", nativeWaveShaperNode);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createWaveShaperNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,mCAAmC,GAA0C,SAA7EA,mCAAmC,CAC5CC,0BAA0B,EAC1BC,kBAAkB,EAClBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,6BAA6B,GAAG,IAAIC,OAAO,EAAqD;IAEtG,IAAMC,oBAAoB;MAAA,sEAAG,iBAAOC,KAAyB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAC5GC,oBAAoB,GAAGP,kBAAkB,CAA2BK,KAAK,CAAC,EAE9E;cACMG,oCAAoC,GAAGX,gBAAgB,CAACU,oBAAoB,EAAED,yBAAyB,CAAC;cAE9G,IAAI,CAACE,oCAAoC,EAAE;gBACjCC,OAAO,GAAG;kBACZC,YAAY,EAAEH,oBAAoB,CAACG,YAAY;kBAC/CC,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAAgB;kBACvDC,qBAAqB,EAAEL,oBAAoB,CAACK,qBAAqB;kBACjEC,KAAK,EAAEN,oBAAoB,CAACM,KAAK;kBACjCC,UAAU,EAAEP,oBAAoB,CAACO;iBACpC;gBAEDP,oBAAoB,GAAGR,0BAA0B,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;cAGzFP,6BAA6B,CAACa,GAAG,CAACT,yBAAyB,EAAEC,oBAAoB,CAAC;cAAC,KAE/EX,sBAAsB,CAACW,oBAAoB,CAAC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACtCN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,oBAAoB,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAEzFf,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,oBAAoB,CAAC;YAAA;cAAA,iCAGlFA,oBAAoB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAC9B;MAAA,gBA3BKH,oBAAoB;QAAA;MAAA;IAAA,GA2BzB;IAED,OAAO;MACHa,MAAM,kBAACZ,KAAyB,EAAEC,yBAAqD;QACnF,IAAMY,4BAA4B,GAAGhB,6BAA6B,CAACiB,GAAG,CAACb,yBAAyB,CAAC;QAEjG,IAAIY,4BAA4B,KAAKE,SAAS,EAAE;UAC5C,OAAOC,OAAO,CAACC,OAAO,CAACJ,4BAA4B,CAAC;;QAGxD,OAAOd,oBAAoB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACjE;KACH;EACL,CAAC;AACL,CAAC","names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\wave-shaper-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IWaveShaperNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeWaveShaperNode, TWaveShaperNodeRendererFactoryFactory } from '../types';\n\nexport const createWaveShaperNodeRendererFactory: TWaveShaperNodeRendererFactoryFactory = (\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeWaveShaperNodes = new WeakMap<TNativeOfflineAudioContext, TNativeWaveShaperNode>();\n\n        const createWaveShaperNode = async (proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode<T, TNativeWaveShaperNode>(proxy);\n\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n\n            return nativeWaveShaperNode;\n        };\n\n        return {\n            render(proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeWaveShaperNode> {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}