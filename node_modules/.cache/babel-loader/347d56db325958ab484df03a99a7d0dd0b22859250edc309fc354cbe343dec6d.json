{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createDecrementCycleCounter = function createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) {\n  return function (audioNode, count) {\n    var cycleCounter = cycleCounters.get(audioNode);\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n    var nativeContext = getNativeContext(audioNode.context);\n    var isOffline = isNativeOfflineAudioContext(nativeContext);\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n          outputs = _getAudioNodeConnecti.outputs;\n        var _iterator = _createForOfIteratorHelper(outputs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var output = _step.value;\n            if (isAudioNodeOutputConnection(output)) {\n              var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,2BAA2B,QAAQ,wCAAwC;AAGpF,OAAO,IAAMC,2BAA2B,GAAkC,SAA7DA,2BAA2B,CACpCC,uCAAuC,EACvCC,aAAa,EACbC,uBAAuB,EACvBC,kBAAkB,EAClBC,mBAAmB,EACnBC,gBAAgB,EAChBC,iBAAiB,EACjBC,2BAA2B,EAC3B;EACA,OAAO,UAACC,SAAS,EAAEC,KAAK,EAAI;IACxB,IAAMC,YAAY,GAAGT,aAAa,CAACU,GAAG,CAACH,SAAS,CAAC;IAEjD,IAAIE,YAAY,KAAKE,SAAS,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;;IAGxD,IAAMC,aAAa,GAAGT,gBAAgB,CAACG,SAAS,CAACO,OAAO,CAAC;IACzD,IAAMC,SAAS,GAAGT,2BAA2B,CAACO,aAAa,CAAC;IAE5D,IAAIJ,YAAY,KAAKD,KAAK,EAAE;MACxBR,aAAa,CAACgB,MAAM,CAACT,SAAS,CAAC;MAE/B,IAAI,CAACQ,SAAS,IAAIV,iBAAiB,CAACE,SAAS,CAAC,EAAE;QAC5C,IAAMU,qBAAqB,GAAGf,kBAAkB,CAACK,SAAS,CAAC;QAC3D,4BAAoBN,uBAAuB,CAACM,SAAS,CAAC;UAA9CW,OAAO,yBAAPA,OAAO;QAAwC,2CAElCA,OAAO;UAAA;QAAA;UAA5B,oDAA8B;YAAA,IAAnBC,MAAM;YACb,IAAItB,2BAA2B,CAACsB,MAAM,CAAC,EAAE;cACrC,IAAMC,0BAA0B,GAAGlB,kBAAkB,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC;cAEhEpB,uCAAuC,CAACkB,qBAAqB,EAAEG,0BAA0B,EAAED,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;aACnH,MAAM;cACH,IAAME,2BAA2B,GAAGlB,mBAAmB,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAC;cAElEF,qBAAqB,CAACK,OAAO,CAACD,2BAA2B,EAAEF,MAAM,CAAC,CAAC,CAAC,CAAC;;;QAE5E;UAAA;QAAA;UAAA;QAAA;;KAER,MAAM;MACHnB,aAAa,CAACuB,GAAG,CAAChB,SAAS,EAAEE,YAAY,GAAGD,KAAK,CAAC;;EAE1D,CAAC;AACL,CAAC","names":["isAudioNodeOutputConnection","createDecrementCycleCounter","connectNativeAudioNodeToNativeAudioNode","cycleCounters","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","getNativeContext","isActiveAudioNode","isNativeOfflineAudioContext","audioNode","count","cycleCounter","get","undefined","Error","nativeContext","context","isOffline","delete","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","connect","set"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\decrement-cycle-counter.ts"],"sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TDecrementCycleCounterFactory } from '../types';\n\nexport const createDecrementCycleCounter: TDecrementCycleCounterFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    cycleCounters,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    getNativeContext,\n    isActiveAudioNode,\n    isNativeOfflineAudioContext\n) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    } else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        } else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}