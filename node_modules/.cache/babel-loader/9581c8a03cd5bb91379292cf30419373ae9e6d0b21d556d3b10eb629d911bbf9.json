{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport var createDelayNodeConstructor = function createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DelayNode, _audioNodeConstructor);\n    var _super = _createSuper(DelayNode);\n    function DelayNode(context, options) {\n      var _this;\n      _classCallCheck(this, DelayNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      _this = _super.call(this, context, false, nativeDelayNode, delayNodeRenderer);\n      _this._delayTime = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDelayNode.delayTime);\n      setAudioNodeTailTime(_assertThisInitialized(_this), mergedOptions.maxDelayTime);\n      return _this;\n    }\n    _createClass(DelayNode, [{\n      key: \"delayTime\",\n      get: function get() {\n        return this._delayTime;\n      }\n    }]);\n    return DelayNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,SAAS,EAAE,CAAC;EACZC,YAAY,EAAE;CACR;AAEV,OAAO,IAAMC,0BAA0B,GAAiC,SAA3DA,0BAA0B,CACnCC,oBAAoB,EACpBC,gBAAgB,EAChBC,uBAAuB,EACvBC,qBAAqB,EACrBC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,EACpB;EACA;IAAA;IAAA;IAGI,mBAAYC,OAAU,EAAEC,OAAgC;MAAA;MAAA;MACpD,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,aAAa,mCAAQjB,eAAe,GAAKe,OAAO,CAAE;MACxD,IAAMG,eAAe,GAAGR,qBAAqB,CAACM,aAAa,EAAEC,aAAa,CAAC;MAC3E,IAAME,SAAS,GAAGP,2BAA2B,CAACI,aAAa,CAAC;MAC5D,IAAMI,iBAAiB,GAAiCD,SAAS,GAAGV,uBAAuB,CAACQ,aAAa,CAACZ,YAAY,CAAC,GAAG,IAAK;MAE/H,0BAAMS,OAAO,EAAE,KAAK,EAAEI,eAAe,EAAEE,iBAAiB;MAExD,MAAKC,UAAU,GAAGb,gBAAgB,gCAAOW,SAAS,EAAED,eAAe,CAACd,SAAS,CAAC;MAE9ES,oBAAoB,gCAAOI,aAAa,CAACZ,YAAY,CAAC;MAAC;IAC3D;IAAC;MAAA;MAAA,KAED,eAAa;QACT,OAAO,IAAI,CAACgB,UAAU;MAC1B;IAAC;IAAA;EAAA,EAnB8Cd,oBAAuB;AAqB9E,CAAC","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","delayTime","maxDelayTime","createDelayNodeConstructor","audioNodeConstructor","createAudioParam","createDelayNodeRenderer","createNativeDelayNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeDelayNode","isOffline","delayNodeRenderer","_delayTime"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\delay-node-constructor.ts"],"sourcesContent":["import { IAudioParam, IDelayNode, IDelayOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TDelayNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n} as const;\n\nexport const createDelayNodeConstructor: TDelayNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DelayNode<T extends TContext> extends audioNodeConstructor<T> implements IDelayNode<T> {\n        private _delayTime: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDelayOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n\n        get delayTime(): IAudioParam {\n            return this._delayTime;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}