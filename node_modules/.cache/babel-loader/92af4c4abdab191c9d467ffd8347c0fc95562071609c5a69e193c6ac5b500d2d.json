{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var createIsSupportedPromise = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) {\n    var results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport))) {\n            _context.next = 5;\n            break;\n          }\n          _context.next = 3;\n          return Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n        case 3:\n          results = _context.sent;\n          return _context.abrupt(\"return\", results.every(function (result) {\n            return result;\n          }));\n        case 5:\n          return _context.abrupt(\"return\", false);\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function createIsSupportedPromise(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"mappings":";;AAEA,OAAO,IAAMA,wBAAwB;EAAA,sEAA+B,iBAChEC,eAAe,EACfC,gDAAgD,EAChDC,kCAAkC,EAClCC,qDAAqD,EACrDC,8BAA8B,EAC9BC,iCAAiC,EACjCC,yCAAyC,EACzCC,wCAAwC,EACxCC,+CAA+C,EAC/CC,6CAA6C,EAC7CC,oCAAoC,EACpCC,gCAAgC,EAChCC,0BAA0B,EAC1BC,iEAAiE,EACjEC,uCAAuC,EACvCC,wBAAwB;IAAA;IAAA;MAAA;QAAA;UAAA,MAGpBf,eAAe,CAACC,gDAAgD,EAAEA,gDAAgD,CAAC,IACnHD,eAAe,CAACE,kCAAkC,EAAEA,kCAAkC,CAAC,IACvFF,eAAe,CAACI,8BAA8B,EAAEA,8BAA8B,CAAC,IAC/EJ,eAAe,CAACK,iCAAiC,EAAEA,iCAAiC,CAAC,IACrFL,eAAe,CAACO,wCAAwC,EAAEA,wCAAwC,CAAC,IACnGP,eAAe,CAACQ,+CAA+C,EAAEA,+CAA+C,CAAC,IACjHR,eAAe,CAACS,6CAA6C,EAAEA,6CAA6C,CAAC,IAC7GT,eAAe,CAACU,oCAAoC,EAAEA,oCAAoC,CAAC,IAC3FV,eAAe,CAACW,gCAAgC,EAAEA,gCAAgC,CAAC,IACnFX,eAAe,CAACY,0BAA0B,EAAEA,0BAA0B,CAAC,IACvEZ,eAAe,CACXa,iEAAiE,EACjEA,iEAAiE,CACpE;YAAA;YAAA;UAAA;UAAA;UAAA,OAEqBG,OAAO,CAACC,GAAG,CAAC,CAC9BjB,eAAe,CAACG,qDAAqD,EAAEA,qDAAqD,CAAC,EAC7HH,eAAe,CAACM,yCAAyC,EAAEA,yCAAyC,CAAC,EACrGN,eAAe,CAACc,uCAAuC,EAAEA,uCAAuC,CAAC,EACjGd,eAAe,CAACe,wBAAwB,EAAEA,wBAAwB,CAAC,CACtE,CAAC;QAAA;UALIG,OAAO;UAAA,iCAONA,OAAO,CAACC,KAAK,CAAC,UAACC,MAAM;YAAA,OAAKA,MAAM;UAAA,EAAC;QAAA;UAAA,iCAGrC,KAAK;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACf;EAAA,gBA7CYrB,wBAAwB;IAAA;EAAA;AAAA,GA6CpC","names":["createIsSupportedPromise","cacheTestResult","testAudioBufferCopyChannelMethodsSubarraySupport","testAudioContextCloseMethodSupport","testAudioContextDecodeAudioDataMethodTypeErrorSupport","testAudioContextOptionsSupport","testAudioNodeConnectMethodSupport","testAudioWorkletProcessorNoOutputsSupport","testChannelMergerNodeChannelCountSupport","testConstantSourceNodeAccurateSchedulingSupport","testConvolverNodeBufferReassignabilitySupport","testConvolverNodeChannelCountSupport","testDomExceptionContrucorSupport","testIsSecureContextSupport","testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","testStereoPannerNodeDefaultValueSupport","testTransferablesSupport","Promise","all","results","every","result"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\is-supported-promise.ts"],"sourcesContent":["import { TIsSupportedPromiseFactory } from '../types';\n\nexport const createIsSupportedPromise: TIsSupportedPromiseFactory = async (\n    cacheTestResult,\n    testAudioBufferCopyChannelMethodsSubarraySupport,\n    testAudioContextCloseMethodSupport,\n    testAudioContextDecodeAudioDataMethodTypeErrorSupport,\n    testAudioContextOptionsSupport,\n    testAudioNodeConnectMethodSupport,\n    testAudioWorkletProcessorNoOutputsSupport,\n    testChannelMergerNodeChannelCountSupport,\n    testConstantSourceNodeAccurateSchedulingSupport,\n    testConvolverNodeBufferReassignabilitySupport,\n    testConvolverNodeChannelCountSupport,\n    testDomExceptionContrucorSupport,\n    testIsSecureContextSupport,\n    testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n    testStereoPannerNodeDefaultValueSupport,\n    testTransferablesSupport\n) => {\n    if (\n        cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) &&\n        cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) &&\n        cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) &&\n        cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) &&\n        cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) &&\n        cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) &&\n        cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) &&\n        cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) &&\n        cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) &&\n        cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) &&\n        cacheTestResult(\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport\n        )\n    ) {\n        const results = await Promise.all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n\n        return results.every((result) => result);\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}