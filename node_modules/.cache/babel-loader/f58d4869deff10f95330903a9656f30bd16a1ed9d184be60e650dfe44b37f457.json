{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport var AutoWah = /*#__PURE__*/function (_Effect) {\n  _inherits(AutoWah, _Effect);\n  var _super = _createSuper(AutoWah);\n  function AutoWah() {\n    var _this;\n    _classCallCheck(this, AutoWah);\n    _this = _super.call(this, optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    _this.name = \"AutoWah\";\n    var options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.follower\n    });\n    _this._sweepRange = new ScaleExp({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this._inputBoost = new Gain({\n      context: _this.context\n    });\n    _this._bandpass = new Filter({\n      context: _this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    _this._peaking = new Filter({\n      context: _this.context,\n      type: \"peaking\"\n    });\n    _this._peaking.gain.value = options.gain;\n    _this.gain = _this._peaking.gain;\n    _this.Q = _this._bandpass.Q;\n    // the control signal path\n    _this.effectSend.chain(_this._inputBoost, _this._follower, _this._sweepRange);\n    _this._sweepRange.connect(_this._bandpass.frequency);\n    _this._sweepRange.connect(_this._peaking.frequency);\n    // the filtered path\n    _this.effectSend.chain(_this._bandpass, _this._peaking, _this.effectReturn);\n    // set the initial value\n    _this._setSweepRange();\n    _this.sensitivity = options.sensitivity;\n    readOnly(_assertThisInitialized(_this), [\"gain\", \"Q\"]);\n    return _this;\n  }\n  _createClass(AutoWah, [{\n    key: \"octaves\",\n    get:\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      this._setSweepRange();\n    }\n    /**\n     * The follower's smoothing time\n     */\n  }, {\n    key: \"follower\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(follower) {\n      this._follower.smoothing = follower;\n    }\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(baseFreq) {\n      this._baseFrequency = this.toFrequency(baseFreq);\n      this._setSweepRange();\n    }\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n  }, {\n    key: \"sensitivity\",\n    get: function get() {\n      return gainToDb(1 / this._inputBoost.gain.value);\n    },\n    set: function set(sensitivity) {\n      this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    }\n    /**\n     * sets the sweep range of the scaler\n     */\n  }, {\n    key: \"_setSweepRange\",\n    value: function _setSweepRange() {\n      this._sweepRange.min = this._baseFrequency;\n      this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoWah.prototype), \"dispose\", this).call(this);\n      this._follower.dispose();\n      this._sweepRange.dispose();\n      this._bandpass.dispose();\n      this._peaking.dispose();\n      this._inputBoost.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        baseFrequency: 100,\n        octaves: 6,\n        sensitivity: 0,\n        Q: 2,\n        gain: 2,\n        follower: 0.2\n      });\n    }\n  }]);\n  return AutoWah;\n}(Effect);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,MAAM,QAAuB,UAAU;AAChD,SAASC,MAAM,QAAQ,4BAA4B;AACnD,SAASC,QAAQ,QAAQ,gCAAgC;AAEzD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,0BAA0B;AAC7D,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,SAASC,QAAQ,QAAQ,wBAAwB;AAWjD;;;;;;;;;;;;;;;AAeA,WAAaC,OAAQ;EAAA;EAAA;EAyDpB;IAAA;IAAA;IAEC,0BAAMN,oBAAoB,CAACM,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,eAAe,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IAzDjG,UAAI,GAAW,SAAS;IA0DhC,IAAMC,OAAO,GAAGT,oBAAoB,CAACM,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,eAAe,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IAEnH,MAAKE,SAAS,GAAG,IAAIX,QAAQ,CAAC;MAC7BY,OAAO,EAAE,MAAKA,OAAO;MACrBC,SAAS,EAAEH,OAAO,CAACI;KACnB,CAAC;IACF,MAAKC,WAAW,GAAG,IAAIV,QAAQ,CAAC;MAC/BO,OAAO,EAAE,MAAKA,OAAO;MACrBI,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE,CAAC;MACNC,QAAQ,EAAE;KACV,CAAC;IACF,MAAKC,cAAc,GAAG,MAAKC,WAAW,CAACV,OAAO,CAACW,aAAa,CAAC;IAC7D,MAAKC,QAAQ,GAAGZ,OAAO,CAACa,OAAO;IAC/B,MAAKC,WAAW,GAAG,IAAItB,IAAI,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACtD,MAAKa,SAAS,GAAG,IAAI1B,MAAM,CAAC;MAC3Ba,OAAO,EAAE,MAAKA,OAAO;MACrBc,OAAO,EAAE,CAAC,EAAE;MACZC,SAAS,EAAE,CAAC;MACZC,CAAC,EAAElB,OAAO,CAACkB;KACX,CAAC;IACF,MAAKC,QAAQ,GAAG,IAAI9B,MAAM,CAAC;MAC1Ba,OAAO,EAAE,MAAKA,OAAO;MACrBkB,IAAI,EAAE;KACN,CAAC;IACF,MAAKD,QAAQ,CAACE,IAAI,CAACC,KAAK,GAAGtB,OAAO,CAACqB,IAAI;IACvC,MAAKA,IAAI,GAAG,MAAKF,QAAQ,CAACE,IAAI;IAC9B,MAAKH,CAAC,GAAG,MAAKH,SAAS,CAACG,CAAC;IAEzB;IACA,MAAKK,UAAU,CAACC,KAAK,CAAC,MAAKV,WAAW,EAAE,MAAKb,SAAS,EAAE,MAAKI,WAAW,CAAC;IACzE,MAAKA,WAAW,CAACoB,OAAO,CAAC,MAAKV,SAAS,CAACE,SAAS,CAAC;IAClD,MAAKZ,WAAW,CAACoB,OAAO,CAAC,MAAKN,QAAQ,CAACF,SAAS,CAAC;IACjD;IACA,MAAKM,UAAU,CAACC,KAAK,CAAC,MAAKT,SAAS,EAAE,MAAKI,QAAQ,EAAE,MAAKO,YAAY,CAAC;IACvE;IACA,MAAKC,cAAc,EAAE;IACrB,MAAKC,WAAW,GAAG5B,OAAO,CAAC4B,WAAW;IAEtChC,QAAQ,gCAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAAC;EAC/B;EAAC;IAAA;IAAA;IAaD;;;IAGA,eAAW;MACV,OAAO,IAAI,CAACgB,QAAQ;IACrB,CAAC;IAAA,KACD,aAAYC,OAAO;MAClB,IAAI,CAACD,QAAQ,GAAGC,OAAO;MACvB,IAAI,CAACc,cAAc,EAAE;IACtB;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAY;MACX,OAAO,IAAI,CAAC1B,SAAS,CAACE,SAAS;IAChC,CAAC;IAAA,KACD,aAAaC,QAAQ;MACpB,IAAI,CAACH,SAAS,CAACE,SAAS,GAAGC,QAAQ;IACpC;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAiB;MAChB,OAAO,IAAI,CAACK,cAAc;IAC3B,CAAC;IAAA,KACD,aAAkBoB,QAAQ;MACzB,IAAI,CAACpB,cAAc,GAAG,IAAI,CAACC,WAAW,CAACmB,QAAQ,CAAC;MAChD,IAAI,CAACF,cAAc,EAAE;IACtB;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAe;MACd,OAAOjC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACoB,WAAW,CAACO,IAAI,CAACC,KAAK,CAAC;IACjD,CAAC;IAAA,KACD,aAAgBM,WAAW;MAC1B,IAAI,CAACd,WAAW,CAACO,IAAI,CAACC,KAAK,GAAG,CAAC,GAAG7B,QAAQ,CAACmC,WAAW,CAAC;IACxD;IAEA;;;EAAA;IAAA;IAAA,OAGQ,0BAAc;MACrB,IAAI,CAACvB,WAAW,CAACC,GAAG,GAAG,IAAI,CAACG,cAAc;MAC1C,IAAI,CAACJ,WAAW,CAACE,GAAG,GAAGuB,IAAI,CAACxB,GAAG,CAAC,IAAI,CAACG,cAAc,GAAGqB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACnB,QAAQ,CAAC,EAAE,IAAI,CAACV,OAAO,CAAC8B,UAAU,GAAG,CAAC,CAAC;IAC/G;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAAC/B,SAAS,CAACgC,OAAO,EAAE;MACxB,IAAI,CAAC5B,WAAW,CAAC4B,OAAO,EAAE;MAC1B,IAAI,CAAClB,SAAS,CAACkB,OAAO,EAAE;MACxB,IAAI,CAACd,QAAQ,CAACc,OAAO,EAAE;MACvB,IAAI,CAACnB,WAAW,CAACmB,OAAO,EAAE;MAC1B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OArED,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAC/C,MAAM,CAACU,WAAW,EAAE,EAAE;QAC1Ca,aAAa,EAAE,GAAG;QAClBE,OAAO,EAAE,CAAC;QACVe,WAAW,EAAE,CAAC;QACdV,CAAC,EAAE,CAAC;QACJG,IAAI,EAAE,CAAC;QACPjB,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EA/G2BhB,MAAsB","names":["Effect","Filter","Follower","optionsFromArguments","Gain","dbToGain","gainToDb","ScaleExp","readOnly","AutoWah","getDefaults","arguments","options","_follower","context","smoothing","follower","_sweepRange","min","max","exponent","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","_inputBoost","_bandpass","rolloff","frequency","Q","_peaking","type","gain","value","effectSend","chain","connect","effectReturn","_setSweepRange","sensitivity","baseFreq","Math","pow","sampleRate","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\AutoWah.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}