{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport var Gate = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Gate, _ToneAudioNode);\n  var _super = _createSuper(Gate);\n  function Gate() {\n    var _this;\n    _classCallCheck(this, Gate);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    _this.name = \"Gate\";\n    var options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.smoothing\n    });\n    _this._gt = new GreaterThan({\n      context: _this.context,\n      value: dbToGain(options.threshold)\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._gate = _this.output = new Gain({\n      context: _this.context\n    });\n    // connections\n    _this.input.connect(_this._gate);\n    // the control signal\n    _this.input.chain(_this._follower, _this._gt, _this._gate.gain);\n    return _this;\n  }\n  _createClass(Gate, [{\n    key: \"threshold\",\n    get:\n    /**\n     * The threshold of the gate in decibels\n     */\n    function get() {\n      return gainToDb(this._gt.value);\n    },\n    set: function set(thresh) {\n      this._gt.value = dbToGain(thresh);\n    }\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(smoothingTime) {\n      this._follower.smoothing = smoothingTime;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Gate.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this._follower.dispose();\n      this._gt.dispose();\n      this._gate.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        smoothing: 0.1,\n        threshold: -40\n      });\n    }\n  }]);\n  return Gate;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,6BAA6B;AAOhE;;;;;;;;;;;;AAYA,WAAaC,IAAK;EAAA;EAAA;EA4BjB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACL,oBAAoB,CAACG,IAAI,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;IA3B5F,UAAI,GAAW,MAAM;IA4B7B,IAAMC,OAAO,GAAGR,oBAAoB,CAACG,IAAI,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAE/F,MAAKE,SAAS,GAAG,IAAIV,QAAQ,CAAC;MAC7BW,OAAO,EAAE,MAAKA,OAAO;MACrBC,SAAS,EAAEH,OAAO,CAACG;KACnB,CAAC;IACF,MAAKC,GAAG,GAAG,IAAIf,WAAW,CAAC;MAC1Ba,OAAO,EAAE,MAAKA,OAAO;MACrBG,KAAK,EAAEZ,QAAQ,CAACO,OAAO,CAACM,SAAS;KACjC,CAAC;IACF,MAAKC,KAAK,GAAG,IAAIjB,IAAI,CAAC;MAAEY,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAChD,MAAKM,KAAK,GAAG,MAAKC,MAAM,GAAG,IAAInB,IAAI,CAAC;MAAEY,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAE9D;IACA,MAAKK,KAAK,CAACG,OAAO,CAAC,MAAKF,KAAK,CAAC;IAC9B;IACA,MAAKD,KAAK,CAACI,KAAK,CAAC,MAAKV,SAAS,EAAE,MAAKG,GAAG,EAAE,MAAKI,KAAK,CAACI,IAAI,CAAC;IAAC;EAC7D;EAAC;IAAA;IAAA;IASD;;;IAGA,eAAa;MACZ,OAAOlB,QAAQ,CAAC,IAAI,CAACU,GAAG,CAACC,KAAK,CAAC;IAChC,CAAC;IAAA,KACD,aAAcQ,MAAM;MACnB,IAAI,CAACT,GAAG,CAACC,KAAK,GAAGZ,QAAQ,CAACoB,MAAM,CAAC;IAClC;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAa;MACZ,OAAO,IAAI,CAACZ,SAAS,CAACE,SAAS;IAChC,CAAC;IAAA,KACD,aAAcW,aAAa;MAC1B,IAAI,CAACb,SAAS,CAACE,SAAS,GAAGW,aAAa;IACzC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACP,KAAK,CAACQ,OAAO,EAAE;MACpB,IAAI,CAACd,SAAS,CAACc,OAAO,EAAE;MACxB,IAAI,CAACX,GAAG,CAACW,OAAO,EAAE;MAClB,IAAI,CAACP,KAAK,CAACO,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAlCD,uBAAkB;MACjB,OAAOnB,MAAM,CAACC,MAAM,CAACT,aAAa,CAACU,WAAW,EAAE,EAAE;QACjDK,SAAS,EAAE,GAAG;QACdG,SAAS,EAAE,CAAC;OACZ,CAAC;IACH;EAAC;EAAA;AAAA,EAtDwBlB,aAA0B","names":["ToneAudioNode","GreaterThan","Gain","Follower","optionsFromArguments","dbToGain","gainToDb","Gate","Object","assign","getDefaults","arguments","options","_follower","context","smoothing","_gt","value","threshold","input","_gate","output","connect","chain","gain","thresh","smoothingTime","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\dynamics\\Gate.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n\nexport interface GateOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n\tsmoothing: Time;\n}\n\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode<GateOptions> {\n\n\treadonly name: string = \"Gate\";\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Follow the incoming signal\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * Test if it's greater than the threshold\n\t */\n\tprivate _gt: GreaterThan;\n\n\t/**\n\t * Gate the incoming signal when it does not exceed the threshold\n\t */\n\tprivate _gate: Gain;\n\n\t/**\n\t * @param threshold The threshold above which the gate will open.\n\t * @param smoothing The follower's smoothing time\n\t */\n\tconstructor(threshold?: Decibels, smoothing?: Time);\n\tconstructor(options?: Partial<GateOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n\t\tconst options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.smoothing,\n\t\t});\n\t\tthis._gt = new GreaterThan({\n\t\t\tcontext: this.context,\n\t\t\tvalue: dbToGain(options.threshold),\n\t\t});\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis._gate = this.output = new Gain({ context: this.context });\n\n\t\t// connections\n\t\tthis.input.connect(this._gate);\n\t\t// the control signal\n\t\tthis.input.chain(this._follower, this._gt, this._gate.gain);\n\t}\n\n\tstatic getDefaults(): GateOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.1,\n\t\t\tthreshold: -40\n\t\t});\n\t}\n\n\t/**\n\t * The threshold of the gate in decibels\n\t */\n\tget threshold(): Decibels {\n\t\treturn gainToDb(this._gt.value);\n\t}\n\tset threshold(thresh) {\n\t\tthis._gt.value = dbToGain(thresh);\n\t}\n\n\t/**\n\t * The attack/decay speed of the gate. See [[Follower.smoothing]]\n\t */\n\tget smoothing(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset smoothing(smoothingTime) {\n\t\tthis._follower.smoothing = smoothingTime;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._gate.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}