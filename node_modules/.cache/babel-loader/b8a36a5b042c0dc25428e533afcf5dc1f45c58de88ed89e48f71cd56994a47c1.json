{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createBiquadFilterNodeRendererFactory = function createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeBiquadFilterNodes = new WeakMap();\n    var createBiquadFilterNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeBiquadFilterNode, nativeBiquadFilterNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeBiquadFilterNode = getNativeAudioNode(proxy);\n              /*\n               * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n               * again.\n               */\n              nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n              if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                options = {\n                  Q: nativeBiquadFilterNode.Q.value,\n                  channelCount: nativeBiquadFilterNode.channelCount,\n                  channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                  channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                  detune: nativeBiquadFilterNode.detune.value,\n                  frequency: nativeBiquadFilterNode.frequency.value,\n                  gain: nativeBiquadFilterNode.gain.value,\n                  type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n              if (nativeBiquadFilterNodeIsOwnedByContext) {\n                _context.next = 15;\n                break;\n              }\n              _context.next = 7;\n              return renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n            case 7:\n              _context.next = 9;\n              return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n            case 9:\n              _context.next = 11;\n              return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n            case 11:\n              _context.next = 13;\n              return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            case 13:\n              _context.next = 23;\n              break;\n            case 15:\n              _context.next = 17;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n            case 17:\n              _context.next = 19;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n            case 19:\n              _context.next = 21;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n            case 21:\n              _context.next = 23;\n              return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            case 23:\n              _context.next = 25;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            case 25:\n              return _context.abrupt(\"return\", nativeBiquadFilterNode);\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createBiquadFilterNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\biquad-filter-node-renderer-factory.ts"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IBiquadFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TBiquadFilterNodeRendererFactoryFactory, TNativeBiquadFilterNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createBiquadFilterNodeRendererFactory: TBiquadFilterNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeBiquadFilterNodes = new WeakMap<TNativeOfflineAudioContext, TNativeBiquadFilterNode>();\n\n        const createBiquadFilterNode = async (proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode<T, TNativeBiquadFilterNode>(proxy);\n\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            return nativeBiquadFilterNode;\n        };\n\n        return {\n            render(proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeBiquadFilterNode> {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}