{"ast":null,"code":"// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport var filterBuffer = function filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) {\n  var inputLength = input.length;\n  var i = bufferIndex;\n  for (var j = 0; j < inputLength; j += 1) {\n    var y = feedforward[0] * input[j];\n    for (var k = 1; k < minLength; k += 1) {\n      var x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n    for (var _k = minLength; _k < feedforwardLength; _k += 1) {\n      y += feedforward[_k] * xBuffer[i - _k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    for (var _k2 = minLength; _k2 < feedbackLength; _k2 += 1) {\n      y -= feedback[_k2] * yBuffer[i - _k2 & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n    output[j] = y;\n  }\n  return i;\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAY,CACrBC,QAAsB,EACtBC,cAAsB,EACtBC,WAAyB,EACzBC,iBAAyB,EACzBC,SAAiB,EACjBC,OAAqB,EACrBC,OAAqB,EACrBC,WAAmB,EACnBC,YAAoB,EACpBC,KAAmB,EACnBC,MAAoB,EACpB;EACA,IAAMC,WAAW,GAAGF,KAAK,CAACG,MAAM;EAEhC,IAAIC,CAAC,GAAGN,WAAW;EAEnB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,IAAI,CAAC,EAAE;IACrC,IAAIC,CAAC,GAAGb,WAAW,CAAC,CAAC,CAAC,GAAGO,KAAK,CAACK,CAAC,CAAC;IAEjC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,SAAS,EAAEY,CAAC,IAAI,CAAC,EAAE;MACnC,IAAMC,CAAC,GAAIJ,CAAC,GAAGG,CAAC,GAAKR,YAAY,GAAG,CAAE,CAAC,CAAC;MAExCO,CAAC,IAAIb,WAAW,CAACc,CAAC,CAAC,GAAGX,OAAO,CAACY,CAAC,CAAC;MAChCF,CAAC,IAAIf,QAAQ,CAACgB,CAAC,CAAC,GAAGV,OAAO,CAACW,CAAC,CAAC;;IAGjC,KAAK,IAAID,EAAC,GAAGZ,SAAS,EAAEY,EAAC,GAAGb,iBAAiB,EAAEa,EAAC,IAAI,CAAC,EAAE;MACnDD,CAAC,IAAIb,WAAW,CAACc,EAAC,CAAC,GAAGX,OAAO,CAAEQ,CAAC,GAAGG,EAAC,GAAKR,YAAY,GAAG,CAAE,CAAC,CAAC,CAAC;;;IAGjE,KAAK,IAAIQ,GAAC,GAAGZ,SAAS,EAAEY,GAAC,GAAGf,cAAc,EAAEe,GAAC,IAAI,CAAC,EAAE;MAChDD,CAAC,IAAIf,QAAQ,CAACgB,GAAC,CAAC,GAAGV,OAAO,CAAEO,CAAC,GAAGG,GAAC,GAAKR,YAAY,GAAG,CAAE,CAAC,CAAC,CAAC;;;IAG9DH,OAAO,CAACQ,CAAC,CAAC,GAAGJ,KAAK,CAACK,CAAC,CAAC;IACrBR,OAAO,CAACO,CAAC,CAAC,GAAGE,CAAC;IAEdF,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAKL,YAAY,GAAG,CAAE,CAAC,CAAC;IAElCE,MAAM,CAACI,CAAC,CAAC,GAAGC,CAAC;;EAGjB,OAAOF,CAAC;AACZ,CAAC","names":["filterBuffer","feedback","feedbackLength","feedforward","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","bufferLength","input","output","inputLength","length","i","j","y","k","x"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\helpers\\filter-buffer.ts"],"sourcesContent":["// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (\n    feedback: Float64Array,\n    feedbackLength: number,\n    feedforward: Float64Array,\n    feedforwardLength: number,\n    minLength: number,\n    xBuffer: Float32Array,\n    yBuffer: Float32Array,\n    bufferIndex: number,\n    bufferLength: number,\n    input: Float32Array,\n    output: Float32Array\n) => {\n    const inputLength = input.length;\n\n    let i = bufferIndex;\n\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n        output[j] = y;\n    }\n\n    return i;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}