{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport var DummyContext = /*#__PURE__*/function (_BaseContext) {\n  _inherits(DummyContext, _BaseContext);\n  var _super = _createSuper(DummyContext);\n  function DummyContext() {\n    var _this;\n    _classCallCheck(this, DummyContext);\n    _this = _super.apply(this, arguments);\n    _this.lookAhead = 0;\n    _this.latencyHint = 0;\n    _this.isOffline = false;\n    return _this;\n  }\n  //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n  _createClass(DummyContext, [{\n    key: \"createAnalyser\",\n    value: function createAnalyser() {\n      return {};\n    }\n  }, {\n    key: \"createOscillator\",\n    value: function createOscillator() {\n      return {};\n    }\n  }, {\n    key: \"createBufferSource\",\n    value: function createBufferSource() {\n      return {};\n    }\n  }, {\n    key: \"createBiquadFilter\",\n    value: function createBiquadFilter() {\n      return {};\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(_numberOfChannels, _length, _sampleRate) {\n      return {};\n    }\n  }, {\n    key: \"createChannelMerger\",\n    value: function createChannelMerger(_numberOfInputs) {\n      return {};\n    }\n  }, {\n    key: \"createChannelSplitter\",\n    value: function createChannelSplitter(_numberOfOutputs) {\n      return {};\n    }\n  }, {\n    key: \"createConstantSource\",\n    value: function createConstantSource() {\n      return {};\n    }\n  }, {\n    key: \"createConvolver\",\n    value: function createConvolver() {\n      return {};\n    }\n  }, {\n    key: \"createDelay\",\n    value: function createDelay(_maxDelayTime) {\n      return {};\n    }\n  }, {\n    key: \"createDynamicsCompressor\",\n    value: function createDynamicsCompressor() {\n      return {};\n    }\n  }, {\n    key: \"createGain\",\n    value: function createGain() {\n      return {};\n    }\n  }, {\n    key: \"createIIRFilter\",\n    value: function createIIRFilter(_feedForward, _feedback) {\n      return {};\n    }\n  }, {\n    key: \"createPanner\",\n    value: function createPanner() {\n      return {};\n    }\n  }, {\n    key: \"createPeriodicWave\",\n    value: function createPeriodicWave(_real, _imag, _constraints) {\n      return {};\n    }\n  }, {\n    key: \"createStereoPanner\",\n    value: function createStereoPanner() {\n      return {};\n    }\n  }, {\n    key: \"createWaveShaper\",\n    value: function createWaveShaper() {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamSource\",\n    value: function createMediaStreamSource(_stream) {\n      return {};\n    }\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(_element) {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamDestination\",\n    value: function createMediaStreamDestination() {\n      return {};\n    }\n  }, {\n    key: \"decodeAudioData\",\n    value: function decodeAudioData(_audioData) {\n      return Promise.resolve({});\n    }\n    //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n  }, {\n    key: \"createAudioWorkletNode\",\n    value: function createAudioWorkletNode(_name, _options) {\n      return {};\n    }\n  }, {\n    key: \"rawContext\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"addAudioWorkletModule\",\n    value: function addAudioWorkletModule(_url, _name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(_fn, _timeout) {\n      return 0;\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function clearTimeout(_id) {\n      return this;\n    }\n  }, {\n    key: \"setInterval\",\n    value: function setInterval(_fn, _interval) {\n      return 0;\n    }\n  }, {\n    key: \"clearInterval\",\n    value: function clearInterval(_id) {\n      return this;\n    }\n  }, {\n    key: \"getConstant\",\n    value: function getConstant(_val) {\n      return {};\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"sampleRate\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"listener\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"transport\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"draw\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"now\",\n    value: function now() {\n      return 0;\n    }\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return 0;\n    }\n  }]);\n  return DummyContext;\n}(BaseContext);","map":{"version":3,"mappings":"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","names":["BaseContext","DummyContext","_numberOfChannels","_length","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_element","_audioData","Promise","resolve","_name","_options","_url","_fn","_timeout","_id","_interval","_val","_d"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\context\\DummyContext.ts"],"sourcesContent":["import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tcreateMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\treturn {} as MediaElementAudioSourceNode;\n\t}\n\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\treturn {} as MediaStreamAudioDestinationNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) {}\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) {}\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}