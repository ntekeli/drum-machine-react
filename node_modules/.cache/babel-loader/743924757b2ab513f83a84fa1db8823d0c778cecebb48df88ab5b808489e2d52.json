{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport var MembraneSynth = /*#__PURE__*/function (_Synth) {\n  _inherits(MembraneSynth, _Synth);\n  var _super = _createSuper(MembraneSynth);\n  function MembraneSynth() {\n    var _this;\n    _classCallCheck(this, MembraneSynth);\n    _this = _super.call(this, optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    _this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n    _this.portamento = 0;\n    var options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    _this.pitchDecay = options.pitchDecay;\n    _this.octaves = options.octaves;\n    readOnly(_assertThisInitialized(_this), [\"oscillator\", \"envelope\"]);\n    return _this;\n  }\n  _createClass(MembraneSynth, [{\n    key: \"setNote\",\n    value: function setNote(note, time) {\n      var seconds = this.toSeconds(time);\n      var hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n      var maxNote = hertz * this.octaves;\n      this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n      this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MembraneSynth.prototype), \"dispose\", this).call(this);\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n        envelope: {\n          attack: 0.001,\n          attackCurve: \"exponential\",\n          decay: 0.4,\n          release: 1.4,\n          sustain: 0.01\n        },\n        octaves: 10,\n        oscillator: {\n          type: \"sine\"\n        },\n        pitchDecay: 0.05\n      });\n    }\n  }]);\n  return MembraneSynth;\n}(Synth);\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,cAAc,QAAQ,wBAAwB;AAEvD,SAASC,SAAS,EAAEC,oBAAoB,QAAQ,uBAAuB;AACvE,SAASC,QAAQ,QAA0B,wBAAwB;AACnE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,KAAK,QAAsB,SAAS;AAC7C,SAASC,KAAK,EAAEC,SAAS,QAAQ,wBAAwB;AAOzD;;;;;;;;;;;;;AAaA,WAAaC,aAAc;EAAA;EAAA;EA6B1B;IAAA;IAAA;IAEC,0BAAMN,oBAAoB,CAACM,aAAa,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IA7B1D,UAAI,GAAW,eAAe;IAkBvC;;;IAGS,gBAAU,GAAG,CAAC;IAStB,IAAMC,OAAO,GAAGT,oBAAoB,CAACM,aAAa,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAE5E,MAAKE,UAAU,GAAGD,OAAO,CAACC,UAAU;IACpC,MAAKC,OAAO,GAAGF,OAAO,CAACE,OAAO;IAC9BV,QAAQ,gCAAO,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IAAC;EAC5C;EAAC;IAAA;IAAA,OAmBD,iBAAQW,IAAgC,EAAEC,IAAW;MACpD,IAAMC,OAAO,GAAG,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;MACpC,IAAMG,KAAK,GAAG,IAAI,CAACC,WAAW,CAACL,IAAI,YAAYd,cAAc,GAAGc,IAAI,CAACK,WAAW,EAAE,GAAGL,IAAI,CAAC;MAC1F,IAAMM,OAAO,GAAGF,KAAK,GAAG,IAAI,CAACL,OAAO;MACpC,IAAI,CAACQ,UAAU,CAACC,SAAS,CAACC,cAAc,CAACH,OAAO,EAAEJ,OAAO,CAAC;MAC1D,IAAI,CAACK,UAAU,CAACC,SAAS,CAACE,4BAA4B,CAACN,KAAK,EAAEF,OAAO,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,UAAU,CAAC,CAAC;MACxG,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OA7BD,uBAAkB;MACjB,OAAOX,SAAS,CAACG,UAAU,CAACK,WAAW,EAAE,EAAEJ,KAAK,CAACI,WAAW,EAAE,EAAE;QAC/DgB,QAAQ,EAAE;UACTC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,aAAa;UAC1BC,KAAK,EAAE,GAAG;UACVC,OAAO,EAAE,GAAG;UACZC,OAAO,EAAE;SACT;QACDjB,OAAO,EAAE,EAAE;QACXQ,UAAU,EAAE;UACXU,IAAI,EAAE;SACN;QACDnB,UAAU,EAAE;OACZ,CAAC;IACH;EAAC;EAAA;AAAA,EAtDiCP,KAA2B;AAU7D2B,YADC1B,KAAK,CAAC,CAAC,CAAC,8CACS;AAQlB0B,YADCzB,SAAS,CAAC,CAAC,CAAC,iDACI","names":["FrequencyClass","deepMerge","optionsFromArguments","readOnly","Monophonic","Synth","range","timeRange","MembraneSynth","getDefaults","arguments","options","pitchDecay","octaves","note","time","seconds","toSeconds","hertz","toFrequency","maxNote","oscillator","frequency","setValueAtTime","exponentialRampToValueAtTime","envelope","attack","attackCurve","decay","release","sustain","type","__decorate"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\instrument\\MembraneSynth.ts"],"sourcesContent":["import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}