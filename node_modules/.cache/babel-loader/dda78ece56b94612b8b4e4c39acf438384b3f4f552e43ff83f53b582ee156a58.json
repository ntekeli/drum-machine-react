{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createIncrementCycleCounterFactory = function createIncrementCycleCounterFactory(cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) {\n  return function (isOffline) {\n    return function (audioNode, count) {\n      var cycleCounter = cycleCounters.get(audioNode);\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n          var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n            outputs = _getAudioNodeConnecti.outputs;\n          var _iterator = _createForOfIteratorHelper(outputs),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var output = _step.value;\n              if (isAudioNodeOutputConnection(output)) {\n                var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n              } else {\n                var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,2BAA2B,QAAQ,wCAAwC;AAGpF,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAAkC,CAC3CC,aAAa,EACbC,4CAA4C,EAC5CC,uBAAuB,EACvBC,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB,EACjB;EACA,OAAO,UAACC,SAAS,EAAI;IACjB,OAAO,UAACC,SAAS,EAAEC,KAAK,EAAI;MACxB,IAAMC,YAAY,GAAGT,aAAa,CAACU,GAAG,CAACH,SAAS,CAAC;MAEjD,IAAIE,YAAY,KAAKE,SAAS,EAAE;QAC5B,IAAI,CAACL,SAAS,IAAID,iBAAiB,CAACE,SAAS,CAAC,EAAE;UAC5C,IAAMK,qBAAqB,GAAGT,kBAAkB,CAACI,SAAS,CAAC;UAC3D,4BAAoBL,uBAAuB,CAACK,SAAS,CAAC;YAA9CM,OAAO,yBAAPA,OAAO;UAAwC,2CAElCA,OAAO;YAAA;UAAA;YAA5B,oDAA8B;cAAA,IAAnBC,MAAM;cACb,IAAIhB,2BAA2B,CAACgB,MAAM,CAAC,EAAE;gBACrC,IAAMC,0BAA0B,GAAGZ,kBAAkB,CAACW,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEhEb,4CAA4C,CACxCW,qBAAqB,EACrBG,0BAA0B,EAC1BD,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,CACZ;eACJ,MAAM;gBACH,IAAME,2BAA2B,GAAGZ,mBAAmB,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;gBAElEF,qBAAqB,CAACK,UAAU,CAACD,2BAA2B,EAAEF,MAAM,CAAC,CAAC,CAAC,CAAC;;;UAE/E;YAAA;UAAA;YAAA;UAAA;;QAGLd,aAAa,CAACkB,GAAG,CAACX,SAAS,EAAEC,KAAK,CAAC;OACtC,MAAM;QACHR,aAAa,CAACkB,GAAG,CAACX,SAAS,EAAEE,YAAY,GAAGD,KAAK,CAAC;;IAE1D,CAAC;EACL,CAAC;AACL,CAAC","names":["isAudioNodeOutputConnection","createIncrementCycleCounterFactory","cycleCounters","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","isActiveAudioNode","isOffline","audioNode","count","cycleCounter","get","undefined","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","disconnect","set"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\increment-cycle-counter-factory.ts"],"sourcesContent":["import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TIncrementCycleCounterFactoryFactory } from '../types';\n\nexport const createIncrementCycleCounterFactory: TIncrementCycleCounterFactoryFactory = (\n    cycleCounters,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    isActiveAudioNode\n) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                            disconnectNativeAudioNodeFromNativeAudioNode(\n                                nativeSourceAudioNode,\n                                nativeDestinationAudioNode,\n                                output[1],\n                                output[2]\n                            );\n                        } else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n\n                cycleCounters.set(audioNode, count);\n            } else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}