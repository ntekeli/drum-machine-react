{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport var Split = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Split, _ToneAudioNode);\n  var _super = _createSuper(Split);\n  function Split() {\n    var _this;\n    _classCallCheck(this, Split);\n    _this = _super.call(this, optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n    _this.name = \"Split\";\n    var options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    _this._splitter = _this.input = _this.output = _this.context.createChannelSplitter(options.channels);\n    _this._internalChannels = [_this._splitter];\n    return _this;\n  }\n  _createClass(Split, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Split.prototype), \"dispose\", this).call(this);\n      this._splitter.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        channels: 2\n      });\n    }\n  }]);\n  return Split;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAA8B,kCAAkC;AACtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAM/D;;;;;;;;AAQA,WAAaC,KAAM;EAAA;EAAA;EAgBlB;IAAA;IAAA;IACC,0BAAMD,oBAAoB,CAACC,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAhBhE,UAAI,GAAW,OAAO;IAiB9B,IAAMC,OAAO,GAAGJ,oBAAoB,CAACC,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC;IAElF,MAAKE,SAAS,GAAG,MAAKC,KAAK,GAAG,MAAKC,MAAM,GAAG,MAAKC,OAAO,CAACC,qBAAqB,CAACL,OAAO,CAACM,QAAQ,CAAC;IAChG,MAAKC,iBAAiB,GAAG,CAAC,MAAKN,SAAS,CAAC;IAAC;EAC3C;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACA,SAAS,CAACO,UAAU,EAAE;MAC3B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACf,aAAa,CAACG,WAAW,EAAE,EAAE;QACjDQ,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EA5ByBX,aAA2B","names":["ToneAudioNode","optionsFromArguments","Split","getDefaults","arguments","options","_splitter","input","output","context","createChannelSplitter","channels","_internalChannels","disconnect","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\Split.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}