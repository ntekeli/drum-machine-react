{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect } from \"./Effect\";\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport var FeedbackEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(FeedbackEffect, _Effect);\n  var _super = _createSuper(FeedbackEffect);\n  function FeedbackEffect(options) {\n    var _this;\n    _classCallCheck(this, FeedbackEffect);\n    _this = _super.call(this, options);\n    _this.name = \"FeedbackEffect\";\n    _this._feedbackGain = new Gain({\n      context: _this.context,\n      gain: options.feedback,\n      units: \"normalRange\"\n    });\n    _this.feedback = _this._feedbackGain.gain;\n    readOnly(_assertThisInitialized(_this), \"feedback\");\n    // the feedback loop\n    _this.effectReturn.chain(_this._feedbackGain, _this.effectSend);\n    return _this;\n  }\n  _createClass(FeedbackEffect, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FeedbackEffect.prototype), \"dispose\", this).call(this);\n      this._feedbackGain.dispose();\n      this.feedback.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        feedback: 0.125\n      });\n    }\n  }]);\n  return FeedbackEffect;\n}(Effect);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAI,QAAQ,sBAAsB;AAG3C,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,MAAM,QAAuB,UAAU;AAgBhD;;;;AAIA,WAAsBC,cAAsD;EAAA;EAAA;EAc3E,wBAAYC,OAA8B;IAAA;IAAA;IAEzC,0BAAMA,OAAO;IAdL,UAAI,GAAW,gBAAgB;IAgBvC,MAAKC,aAAa,GAAG,IAAIL,IAAI,CAAC;MAC7BM,OAAO,EAAE,MAAKA,OAAO;MACrBC,IAAI,EAAEH,OAAO,CAACI,QAAQ;MACtBC,KAAK,EAAE;KACP,CAAC;IAEF,MAAKD,QAAQ,GAAG,MAAKH,aAAa,CAACE,IAAI;IACvCN,QAAQ,gCAAO,UAAU,CAAC;IAE1B;IACA,MAAKS,YAAY,CAACC,KAAK,CAAC,MAAKN,aAAa,EAAE,MAAKO,UAAU,CAAC;IAAC;EAC9D;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACP,aAAa,CAACQ,OAAO,EAAE;MAC5B,IAAI,CAACL,QAAQ,CAACK,OAAO,EAAE;MACvB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAXD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACb,MAAM,CAACc,WAAW,EAAE,EAAE;QAC1CR,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EAnCkFN,MAAe","names":["Gain","readOnly","Effect","FeedbackEffect","options","_feedbackGain","context","gain","feedback","units","effectReturn","chain","effectSend","dispose","Object","assign","getDefaults"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\FeedbackEffect.ts"],"sourcesContent":["import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}