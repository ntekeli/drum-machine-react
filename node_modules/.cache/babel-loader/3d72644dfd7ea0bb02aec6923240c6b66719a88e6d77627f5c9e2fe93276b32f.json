{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport var StereoWidener = /*#__PURE__*/function (_MidSideEffect) {\n  _inherits(StereoWidener, _MidSideEffect);\n  var _super = _createSuper(StereoWidener);\n  function StereoWidener() {\n    var _this;\n    _classCallCheck(this, StereoWidener);\n    _this = _super.call(this, optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    _this.name = \"StereoWidener\";\n    var options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"width\"]);\n    _this._twoTimesWidthMid = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._twoTimesWidthSide = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    _this._midMult = new Multiply({\n      context: _this.context\n    });\n    _this._twoTimesWidthMid.connect(_this._midMult.factor);\n    _this.connectEffectMid(_this._midMult);\n    _this._oneMinusWidth = new Subtract({\n      context: _this.context\n    });\n    _this._oneMinusWidth.connect(_this._twoTimesWidthMid);\n    connect(_this.context.getConstant(1), _this._oneMinusWidth);\n    _this.width.connect(_this._oneMinusWidth.subtrahend);\n    _this._sideMult = new Multiply({\n      context: _this.context\n    });\n    _this.width.connect(_this._twoTimesWidthSide);\n    _this._twoTimesWidthSide.connect(_this._sideMult.factor);\n    _this.connectEffectSide(_this._sideMult);\n    return _this;\n  }\n  _createClass(StereoWidener, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoWidener.prototype), \"dispose\", this).call(this);\n      this.width.dispose();\n      this._midMult.dispose();\n      this._sideMult.dispose();\n      this._twoTimesWidthMid.dispose();\n      this._twoTimesWidthSide.dispose();\n      this._oneMinusWidth.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MidSideEffect.getDefaults(), {\n        width: 0.5\n      });\n    }\n  }]);\n  return StereoWidener;\n}(MidSideEffect);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,aAAa,QAA8B,yBAAyB;AAC7E,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,OAAO,QAAQ,+BAA+B;AAMvD;;;;;;;;;;AAUA,WAAaC,aAAc;EAAA;EAAA;EAuC1B;IAAA;IAAA;IAEC,0BAAMH,oBAAoB,CAACG,aAAa,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAvCrE,UAAI,GAAW,eAAe;IAwCtC,IAAMC,OAAO,GAAGN,oBAAoB,CAACG,aAAa,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IACvF,MAAKE,KAAK,GAAG,IAAIV,MAAM,CAAC;MACvBW,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAEH,OAAO,CAACC,KAAK;MACpBG,KAAK,EAAE;KACP,CAAC;IACFT,QAAQ,gCAAO,CAAC,OAAO,CAAC,CAAC;IACzB,MAAKU,iBAAiB,GAAG,IAAIb,QAAQ,CAAC;MACrCU,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAE;KACP,CAAC;IACF,MAAKG,kBAAkB,GAAG,IAAId,QAAQ,CAAC;MACtCU,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAE;KACP,CAAC;IACF,MAAKI,QAAQ,GAAG,IAAIf,QAAQ,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACvD,MAAKG,iBAAiB,CAACT,OAAO,CAAC,MAAKW,QAAQ,CAACC,MAAM,CAAC;IACpD,MAAKC,gBAAgB,CAAC,MAAKF,QAAQ,CAAC;IAEpC,MAAKG,cAAc,GAAG,IAAIjB,QAAQ,CAAC;MAAES,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAC7D,MAAKQ,cAAc,CAACd,OAAO,CAAC,MAAKS,iBAAiB,CAAC;IACnDT,OAAO,CAAC,MAAKM,OAAO,CAACS,WAAW,CAAC,CAAC,CAAC,EAAE,MAAKD,cAAc,CAAC;IACzD,MAAKT,KAAK,CAACL,OAAO,CAAC,MAAKc,cAAc,CAACE,UAAU,CAAC;IAElD,MAAKC,SAAS,GAAG,IAAIrB,QAAQ,CAAC;MAAEU,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IACxD,MAAKD,KAAK,CAACL,OAAO,CAAC,MAAKU,kBAAkB,CAAC;IAC3C,MAAKA,kBAAkB,CAACV,OAAO,CAAC,MAAKiB,SAAS,CAACL,MAAM,CAAC;IACtD,MAAKM,iBAAiB,CAAC,MAAKD,SAAS,CAAC;IAAC;EACxC;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACZ,KAAK,CAACc,OAAO,EAAE;MACpB,IAAI,CAACR,QAAQ,CAACQ,OAAO,EAAE;MACvB,IAAI,CAACF,SAAS,CAACE,OAAO,EAAE;MACxB,IAAI,CAACV,iBAAiB,CAACU,OAAO,EAAE;MAChC,IAAI,CAACT,kBAAkB,CAACS,OAAO,EAAE;MACjC,IAAI,CAACL,cAAc,CAACK,OAAO,EAAE;MAC7B,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAfD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAC3B,aAAa,CAACQ,WAAW,EAAE,EAAE;QACjDG,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EA5EiCX,aAAmC","names":["MidSideEffect","Signal","Multiply","Subtract","optionsFromArguments","readOnly","connect","StereoWidener","getDefaults","arguments","options","width","context","value","units","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","factor","connectEffectMid","_oneMinusWidth","getConstant","subtrahend","_sideMult","connectEffectSide","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\StereoWidener.ts"],"sourcesContent":["import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectSide(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}