{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport var DCMeter = /*#__PURE__*/function (_MeterBase) {\n  _inherits(DCMeter, _MeterBase);\n  var _super = _createSuper(DCMeter);\n  function DCMeter() {\n    var _this;\n    _classCallCheck(this, DCMeter);\n    _this = _super.call(this, optionsFromArguments(DCMeter.getDefaults(), arguments));\n    _this.name = \"DCMeter\";\n    _this._analyser.type = \"waveform\";\n    _this._analyser.size = 256;\n    return _this;\n  }\n  /**\n   * Get the signal value of the incoming signal\n   */\n  _createClass(DCMeter, [{\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this._analyser.getValue();\n      return value[0];\n    }\n  }]);\n  return DCMeter;\n}(MeterBase);","map":{"version":3,"mappings":";;;;AAAA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AAIzD;;;;;;;;;;;;;AAaA,WAAaC,OAAQ;EAAA;EAAA;EAKpB;IAAA;IAAA;IACC,0BAAMF,oBAAoB,CAACE,OAAO,CAACC,WAAW,EAAE,EAAEC,SAAS,CAAC;IAJpD,UAAI,GAAW,SAAS;IAMhC,MAAKC,SAAS,CAACC,IAAI,GAAG,UAAU;IAChC,MAAKD,SAAS,CAACE,IAAI,GAAG,GAAG;IAAC;EAC3B;EAEA;;;EAAA;IAAA;IAAA,OAGA,oBAAQ;MACP,IAAMC,KAAK,GAAG,IAAI,CAACH,SAAS,CAACI,QAAQ,EAAkB;MACvD,OAAOD,KAAK,CAAC,CAAC,CAAC;IAChB;EAAC;EAAA;AAAA,EAlB2BP,SAAyB","names":["optionsFromArguments","MeterBase","DCMeter","getDefaults","arguments","_analyser","type","size","value","getValue"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\analysis\\DCMeter.ts"],"sourcesContent":["import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue() as Float32Array;\n\t\treturn value[0];\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}