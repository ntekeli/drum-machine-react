{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect } from \"./Effect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\nexport var BitCrusher = /*#__PURE__*/function (_Effect) {\n  _inherits(BitCrusher, _Effect);\n  var _super = _createSuper(BitCrusher);\n  function BitCrusher() {\n    var _this;\n    _classCallCheck(this, BitCrusher);\n    _this = _super.call(this, optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n    _this.name = \"BitCrusher\";\n    var options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    _this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: _this.context,\n      bits: options.bits\n    });\n    // connect it up\n    _this.connectEffect(_this._bitCrusherWorklet);\n    _this.bits = _this._bitCrusherWorklet.bits;\n    return _this;\n  }\n  _createClass(BitCrusher, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusher.prototype), \"dispose\", this).call(this);\n      this._bitCrusherWorklet.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        bits: 4\n      });\n    }\n  }]);\n  return BitCrusher;\n}(Effect);\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nvar BitCrusherWorklet = /*#__PURE__*/function (_ToneAudioWorklet) {\n  _inherits(BitCrusherWorklet, _ToneAudioWorklet);\n  var _super2 = _createSuper(BitCrusherWorklet);\n  function BitCrusherWorklet() {\n    var _this2;\n    _classCallCheck(this, BitCrusherWorklet);\n    _this2 = _super2.call(this, optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n    _this2.name = \"BitCrusherWorklet\";\n    var options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    _this2.input = new Gain({\n      context: _this2.context\n    });\n    _this2.output = new Gain({\n      context: _this2.context\n    });\n    _this2.bits = new Param({\n      context: _this2.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: _this2._dummyParam,\n      swappable: true\n    });\n    return _this2;\n  }\n  _createClass(BitCrusherWorklet, [{\n    key: \"_audioWorkletName\",\n    value: function _audioWorkletName() {\n      return workletName;\n    }\n  }, {\n    key: \"onReady\",\n    value: function onReady(node) {\n      connectSeries(this.input, node, this.output);\n      var bits = node.parameters.get(\"bits\");\n      this.bits.setParam(bits);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusherWorklet.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this.output.dispose();\n      this.bits.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioWorklet.getDefaults(), {\n        bits: 12\n      });\n    }\n  }]);\n  return BitCrusherWorklet;\n}(ToneAudioWorklet);","map":{"version":3,"mappings":"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","names":["ToneAudioWorklet","Effect","Gain","optionsFromArguments","connectSeries","Param","workletName","BitCrusher","getDefaults","arguments","options","_bitCrusherWorklet","BitCrusherWorklet","context","bits","connectEffect","dispose","Object","assign","input","output","value","units","minValue","maxValue","param","_dummyParam","swappable","node","parameters","get","setParam"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\BitCrusher.ts"],"sourcesContent":["import { ToneAudioWorklet, ToneAudioWorkletOptions } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n * \n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\n\tconstructor(bits?: Positive);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n\t\tconst options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\n\treadonly name: string = \"BitCrusherWorklet\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: this._dummyParam,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn workletName;\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\tconst bits = node.parameters.get(\"bits\") as AudioParam;\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}