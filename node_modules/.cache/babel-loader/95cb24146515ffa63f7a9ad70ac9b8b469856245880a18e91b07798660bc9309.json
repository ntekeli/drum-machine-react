{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log as _log } from \"./util/Debug\";\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport var Tone = /*#__PURE__*/function () {\n  function Tone() {\n    _classCallCheck(this, Tone);\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false;\n    //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n    /**\n     * Indicates if the instance was disposed\n     */\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n  _createClass(Tone, [{\n    key: \"log\",\n    value:\n    /**\n     * Prints the outputs to the console log for debugging purposes.\n     * Prints the contents only if either the object has a property\n     * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n     * is set to the name of the class.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * // prints all logs originating from this oscillator\n     * osc.debug = true;\n     * // calls to start/stop will print in the console\n     * osc.start();\n     */\n    function log() {\n      // if the object is either set to debug = true\n      // or if there is a string on the Tone.global.with the class name\n      if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        _log.apply(void 0, [this].concat(args));\n      }\n    }\n    /**\n     * disconnect and dispose.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._wasDisposed = true;\n      return this;\n    }\n    /**\n     * Indicates if the instance was disposed. 'Disposing' an\n     * instance means that all of the Web Audio nodes that were\n     * created for the instance are disconnected and freed for garbage collection.\n     */\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this._wasDisposed;\n    }\n    /**\n     * Convert the class to a string\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.toString());\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {};\n    }\n  }]);\n  return Tone;\n}();\n/**\n * The version number semver\n */\nTone.version = version;","map":{"version":3,"mappings":";;AAAA;;;;;;AAMA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,GAAG,IAAHA,IAAG,QAAQ,cAAc;AASlC;;;;;AAKA,WAAsBC,IAAI;EAA1B;IAAA;IAmBC;IACA;IACA;IAEA;;;IAGA,UAAK,GAAG,KAAK;IAsBb;IACA;IACA;IAEA;;;IAGQ,iBAAY,GAAG,KAAK;EA4B7B;EAvEC;;;EAAA;IAAA;IAAA;IAgBA;;;;;;;;;;;;IAYU,eAAkB;MAC3B;MACA;MACA,IAAI,IAAI,CAACC,KAAK,IAAKH,SAAS,IAAI,IAAI,CAACI,QAAQ,EAAE,KAAKJ,SAAS,CAACK,gBAAiB,EAAE;QAAA,kCAHjEC,IAAW;UAAXA,IAAW;QAAA;QAI1BL,IAAG,gBAAC,IAAI,SAAKK,IAAI,EAAC;;IAEpB;IAWA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN,IAAI,CAACC,YAAY,GAAG,IAAI;MACxB,OAAO,IAAI;IACZ;IAEA;;;;;EAAA;IAAA;IAAA,KAKA,eAAY;MACX,OAAO,IAAI,CAACA,YAAY;IACzB;IAEA;;;;;;EAAA;IAAA;IAAA,OAMA,oBAAQ;MACP,OAAO,IAAI,CAACC,IAAI;IACjB;EAAC;IAAA;IAAA,OAnED,uBAAkB;MACjB,OAAO,EAAE;IACV;EAAC;EAAA;AAAA;AAfD;;;AAGON,YAAO,GAAWH,OAAO","names":["version","theWindow","log","Tone","debug","toString","TONE_DEBUG_CLASS","args","_wasDisposed","name"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\core\\Tone.ts"],"sourcesContent":["/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions { }\n\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}