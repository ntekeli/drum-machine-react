{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConvolverNodeRendererFactory = function createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConvolverNodes = new WeakMap();\n    var createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeConvolverNode, nativeConvolverNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n              if (!nativeConvolverNodeIsOwnedByContext) {\n                options = {\n                  buffer: nativeConvolverNode.buffer,\n                  channelCount: nativeConvolverNode.channelCount,\n                  channelCountMode: nativeConvolverNode.channelCountMode,\n                  channelInterpretation: nativeConvolverNode.channelInterpretation,\n                  disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n              if (!isNativeAudioNodeFaker(nativeConvolverNode)) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 7;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            case 7:\n              _context.next = 11;\n              break;\n            case 9:\n              _context.next = 11;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            case 11:\n              return _context.abrupt(\"return\", nativeConvolverNode);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createConvolverNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAAkC,CAC3CC,yBAAyB,EACzBC,kBAAkB,EAClBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,4BAA4B,GAAG,IAAIC,OAAO,EAAoD;IAEpG,IAAMC,mBAAmB;MAAA,sEAAG,iBAAOC,KAAwB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cAC1GC,mBAAmB,GAAGP,kBAAkB,CAA0BK,KAAK,CAAC,EAE5E;cACMG,mCAAmC,GAAGX,gBAAgB,CAACU,mBAAmB,EAAED,yBAAyB,CAAC;cAE5G,IAAI,CAACE,mCAAmC,EAAE;gBAChCC,OAAO,GAAG;kBACZC,MAAM,EAAEH,mBAAmB,CAACG,MAAM;kBAClCC,YAAY,EAAEJ,mBAAmB,CAACI,YAAY;kBAC9CC,gBAAgB,EAAEL,mBAAmB,CAACK,gBAAgB;kBACtDC,qBAAqB,EAAEN,mBAAmB,CAACM,qBAAqB;kBAChEC,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;iBAC9C;gBAEDR,mBAAmB,GAAGR,yBAAyB,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;cAGvFP,4BAA4B,CAACc,GAAG,CAACV,yBAAyB,EAAEC,mBAAmB,CAAC;cAAC,KAE7EX,sBAAsB,CAACW,mBAAmB,CAAC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACrCN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,mBAAmB,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAExFhB,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,mBAAmB,CAAC;YAAA;cAAA,iCAGjFA,mBAAmB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAC7B;MAAA,gBA3BKH,mBAAmB;QAAA;MAAA;IAAA,GA2BxB;IAED,OAAO;MACHc,MAAM,kBAACb,KAAwB,EAAEC,yBAAqD;QAClF,IAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAAG,CAACd,yBAAyB,CAAC;QAE/F,IAAIa,2BAA2B,KAAKE,SAAS,EAAE;UAC3C,OAAOC,OAAO,CAACC,OAAO,CAACJ,2BAA2B,CAAC;;QAGvD,OAAOf,mBAAmB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAChE;KACH;EACL,CAAC;AACL,CAAC","names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\convolver-node-renderer-factory.ts"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConvolverNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConvolverNodeRendererFactoryFactory, TNativeConvolverNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConvolverNodeRendererFactory: TConvolverNodeRendererFactoryFactory = (\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConvolverNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConvolverNode>();\n\n        const createConvolverNode = async (proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode<T, TNativeConvolverNode>(proxy);\n\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n\n            return nativeConvolverNode;\n        };\n\n        return {\n            render(proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeConvolverNode> {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}