{"ast":null,"code":"import _objectSpread from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport var createAnalyserNodeConstructor = function createAnalyserNodeConstructor(audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audionNodeConstructo) {\n    _inherits(AnalyserNode, _audionNodeConstructo);\n    var _super = _createSuper(AnalyserNode);\n    function AnalyserNode(context, options) {\n      var _this;\n      _classCallCheck(this, AnalyserNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      var analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAnalyserNode, analyserNodeRenderer);\n      _this._nativeAnalyserNode = nativeAnalyserNode;\n      return _this;\n    }\n    _createClass(AnalyserNode, [{\n      key: \"fftSize\",\n      get: function get() {\n        return this._nativeAnalyserNode.fftSize;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.fftSize = value;\n      }\n    }, {\n      key: \"frequencyBinCount\",\n      get: function get() {\n        return this._nativeAnalyserNode.frequencyBinCount;\n      }\n    }, {\n      key: \"maxDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.maxDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var maxDecibels = this._nativeAnalyserNode.maxDecibels;\n        this._nativeAnalyserNode.maxDecibels = value;\n        if (!(value > this._nativeAnalyserNode.minDecibels)) {\n          this._nativeAnalyserNode.maxDecibels = maxDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"minDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.minDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var minDecibels = this._nativeAnalyserNode.minDecibels;\n        this._nativeAnalyserNode.minDecibels = value;\n        if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n          this._nativeAnalyserNode.minDecibels = minDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"smoothingTimeConstant\",\n      get: function get() {\n        return this._nativeAnalyserNode.smoothingTimeConstant;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.smoothingTimeConstant = value;\n      }\n    }, {\n      key: \"getByteFrequencyData\",\n      value: function getByteFrequencyData(array) {\n        this._nativeAnalyserNode.getByteFrequencyData(array);\n      }\n    }, {\n      key: \"getByteTimeDomainData\",\n      value: function getByteTimeDomainData(array) {\n        this._nativeAnalyserNode.getByteTimeDomainData(array);\n      }\n    }, {\n      key: \"getFloatFrequencyData\",\n      value: function getFloatFrequencyData(array) {\n        this._nativeAnalyserNode.getFloatFrequencyData(array);\n      }\n    }, {\n      key: \"getFloatTimeDomainData\",\n      value: function getFloatTimeDomainData(array) {\n        this._nativeAnalyserNode.getFloatTimeDomainData(array);\n      }\n    }]);\n    return AnalyserNode;\n  }(audionNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","array","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\analyser-node-constructor.ts"],"sourcesContent":["import { IAnalyserNode, IAnalyserOptions } from '../interfaces';\nimport { TAnalyserNodeConstructorFactory, TAudioNodeRenderer, TContext, TNativeAnalyserNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n} as const;\n\nexport const createAnalyserNodeConstructor: TAnalyserNodeConstructorFactory = (\n    audionNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class AnalyserNode<T extends TContext> extends audionNodeConstructor<T> implements IAnalyserNode<T> {\n        private _nativeAnalyserNode: TNativeAnalyserNode;\n\n        constructor(context: T, options?: Partial<IAnalyserOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n\n        get fftSize(): number {\n            return this._nativeAnalyserNode.fftSize;\n        }\n\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n\n        get frequencyBinCount(): number {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n\n        get maxDecibels(): number {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n\n            this._nativeAnalyserNode.maxDecibels = value;\n\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get minDecibels(): number {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n\n            this._nativeAnalyserNode.minDecibels = value;\n\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get smoothingTimeConstant(): number {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n\n        public getByteFrequencyData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n\n        public getByteTimeDomainData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n\n        public getFloatFrequencyData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n\n        public getFloatTimeDomainData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}