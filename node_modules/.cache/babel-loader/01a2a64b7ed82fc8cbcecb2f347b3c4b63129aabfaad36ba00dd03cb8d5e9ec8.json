{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\nexport var ScaleExp = /*#__PURE__*/function (_Scale) {\n  _inherits(ScaleExp, _Scale);\n  var _super = _createSuper(ScaleExp);\n  function ScaleExp() {\n    var _this;\n    _classCallCheck(this, ScaleExp);\n    _this = _super.call(this, Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n    _this.name = \"ScaleExp\";\n    var options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    _this.input = _this._exp = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._exp.connect(_this._mult);\n    return _this;\n  }\n  _createClass(ScaleExp, [{\n    key: \"exponent\",\n    get:\n    /**\n     * Instead of interpolating linearly between the [[min]] and\n     * [[max]] values, setting the exponent will interpolate between\n     * the two values with an exponential curve.\n     */\n    function get() {\n      return this._exp.value;\n    },\n    set: function set(exp) {\n      this._exp.value = exp;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ScaleExp.prototype), \"dispose\", this).call(this);\n      this._exp.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Scale.getDefaults(), {\n        exponent: 1\n      });\n    }\n  }]);\n  return ScaleExp;\n}(Scale);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,KAAK,QAAsB,SAAS;AAE7C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,GAAG,QAAQ,OAAO;AAM3B;;;;;;;;;AASA,WAAaC,QAAS;EAAA;EAAA;EAgBrB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACJ,oBAAoB,CAACE,QAAQ,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAfhG,UAAI,GAAW,UAAU;IAgBjC,IAAMC,OAAO,GAAGP,oBAAoB,CAACE,QAAQ,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IAEnG,MAAKE,KAAK,GAAG,MAAKC,IAAI,GAAG,IAAIR,GAAG,CAAC;MAChCS,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAEJ,OAAO,CAACK;KACf,CAAC;IACF,MAAKH,IAAI,CAACI,OAAO,CAAC,MAAKC,KAAK,CAAC;IAAC;EAC/B;EAAC;IAAA;IAAA;IAQD;;;;;IAKA,eAAY;MACX,OAAO,IAAI,CAACL,IAAI,CAACE,KAAK;IACvB,CAAC;IAAA,KACD,aAAaI,GAAG;MACf,IAAI,CAACN,IAAI,CAACE,KAAK,GAAGI,GAAG;IACtB;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACN,IAAI,CAACO,OAAO,EAAE;MACnB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAtBD,uBAAkB;MACjB,OAAOb,MAAM,CAACC,MAAM,CAACL,KAAK,CAACM,WAAW,EAAE,EAAE;QACzCO,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EA/B4Bb,KAAsB","names":["Scale","optionsFromArguments","Pow","ScaleExp","Object","assign","getDefaults","arguments","options","input","_exp","context","value","exponent","connect","_mult","exp","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\signal\\ScaleExp.ts"],"sourcesContent":["import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}