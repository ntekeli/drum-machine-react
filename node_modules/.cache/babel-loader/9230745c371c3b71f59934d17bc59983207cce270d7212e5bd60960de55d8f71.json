{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport var createDetectCycles = function createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) {\n  return function detectCycles(chain, nextLink) {\n    var audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n    var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n      outputs = _getAudioNodeConnecti.outputs;\n    return Array.from(outputs).map(function (outputConnection) {\n      return detectCycles([].concat(_toConsumableArray(chain), [audioNode]), outputConnection[0]);\n    }).reduce(function (mergedCycles, nestedCycles) {\n      return mergedCycles.concat(nestedCycles);\n    }, []);\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,WAAW,QAAQ,sBAAsB;AAIlD,OAAO,IAAMC,kBAAkB,GAAyB,SAA3CA,kBAAkB,CAA0BC,wBAAwB,EAAEC,uBAAuB,EAAEC,cAAc,EAAI;EAC1H,OAAO,SAASC,YAAY,CAAqBC,KAAsB,EAAEC,QAAqC;IAC1G,IAAMC,SAAS,GAAGT,WAAW,CAACQ,QAAQ,CAAC,GAAGA,QAAQ,GAAkBH,cAAc,CAACF,wBAAwB,EAAEK,QAAQ,CAAC;IAEtH,IAAIP,WAAW,CAACQ,SAAS,CAAC,EAAE;MACxB,OAAO,EAAE;;IAGb,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAKE,SAAS,EAAE;MACxB,OAAO,CAACF,KAAK,CAAC;;IAGlB,IAAIA,KAAK,CAACG,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC3B,OAAO,EAAE;;IAGb,4BAAoBL,uBAAuB,CAACK,SAAS,CAAC;MAA9CE,OAAO,yBAAPA,OAAO;IAEf,OAAOC,KAAK,CAACC,IAAI,CAACF,OAAO,CAAC,CACrBG,GAAG,CAAC,UAACC,gBAAgB;MAAA,OAAKT,YAAY,8BAAKC,KAAK,IAAEE,SAAS,IAAGM,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAAA,EAAC,CACnFC,MAAM,CAAC,UAACC,YAAY,EAAEC,YAAY;MAAA,OAAKD,YAAY,CAACE,MAAM,CAACD,YAAY,CAAC;IAAA,GAAE,EAAE,CAAC;EACtF,CAAC;AACL,CAAC","names":["isAudioNode","isDelayNode","createDetectCycles","audioParamAudioNodeStore","getAudioNodeConnections","getValueForKey","detectCycles","chain","nextLink","audioNode","includes","outputs","Array","from","map","outputConnection","reduce","mergedCycles","nestedCycles","concat"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\standardized-audio-context\\src\\factories\\detect-cycles.ts"],"sourcesContent":["import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nimport { IAudioNode, IAudioParam } from '../interfaces';\nimport { TContext, TDetectCyclesFactory } from '../types';\n\nexport const createDetectCycles: TDetectCyclesFactory = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles<T extends TContext>(chain: IAudioNode<T>[], nextLink: IAudioNode<T> | IAudioParam): IAudioNode<T>[][] {\n        const audioNode = isAudioNode(nextLink) ? nextLink : <IAudioNode<T>>getValueForKey(audioParamAudioNodeStore, nextLink);\n\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n\n        const { outputs } = getAudioNodeConnections(audioNode);\n\n        return Array.from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}