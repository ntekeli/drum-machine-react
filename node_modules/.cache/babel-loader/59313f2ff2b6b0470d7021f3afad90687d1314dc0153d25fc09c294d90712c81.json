{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport var MultibandSplit = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandSplit, _ToneAudioNode);\n  var _super = _createSuper(MultibandSplit);\n  function MultibandSplit() {\n    var _this;\n    _classCallCheck(this, MultibandSplit);\n    _this = _super.call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    _this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n    _this.output = undefined;\n    /**\n     * The low band.\n     */\n    _this.low = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n    _this._lowMidFilter = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n    _this.mid = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n    _this.high = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    _this._internalChannels = [_this.low, _this.mid, _this.high];\n    var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    _this.lowFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    _this.highFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    _this.input.fan(_this.low, _this.high);\n    _this.input.chain(_this._lowMidFilter, _this.mid);\n    // the frequency control signal\n    _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n    _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency);\n    // the Q value\n    _this.Q.connect(_this.low.Q);\n    _this.Q.connect(_this._lowMidFilter.Q);\n    _this.Q.connect(_this.mid.Q);\n    _this.Q.connect(_this.high.Q);\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n  _createClass(MultibandSplit, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(MultibandSplit.prototype), \"dispose\", this).call(this);\n      writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n      this.low.dispose();\n      this._lowMidFilter.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        highFrequency: 2500,\n        lowFrequency: 400\n      });\n    }\n  }]);\n  return MultibandSplit;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","getDefaults","arguments","context","undefined","frequency","type","low","mid","high","options","lowFrequency","units","value","highFrequency","Q","input","fan","chain","_lowMidFilter","connect","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\component\\channel\\MultibandSplit.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}