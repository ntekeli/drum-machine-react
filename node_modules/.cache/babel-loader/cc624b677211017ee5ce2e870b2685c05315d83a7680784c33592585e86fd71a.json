{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport var AutoPanner = /*#__PURE__*/function (_LFOEffect) {\n  _inherits(AutoPanner, _LFOEffect);\n  var _super = _createSuper(AutoPanner);\n  function AutoPanner() {\n    var _this;\n    _classCallCheck(this, AutoPanner);\n    _this = _super.call(this, optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n    _this.name = \"AutoPanner\";\n    var options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    _this._panner = new Panner({\n      context: _this.context,\n      channelCount: options.channelCount\n    });\n    // connections\n    _this.connectEffect(_this._panner);\n    _this._lfo.connect(_this._panner.pan);\n    _this._lfo.min = -1;\n    _this._lfo.max = 1;\n    return _this;\n  }\n  _createClass(AutoPanner, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoPanner.prototype), \"dispose\", this).call(this);\n      this._panner.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(LFOEffect.getDefaults(), {\n        channelCount: 1\n      });\n    }\n  }]);\n  return AutoPanner;\n}(LFOEffect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAM,QAAQ,6BAA6B;AACpD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,SAAS,QAA0B,aAAa;AAOzD;;;;;;;;;;;AAWA,WAAaC,UAAW;EAAA;EAAA;EAcvB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAdtE,UAAI,GAAW,YAAY;IAenC,IAAMC,OAAO,GAAGL,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAExF,MAAKE,OAAO,GAAG,IAAIP,MAAM,CAAC;MACzBQ,OAAO,EAAE,MAAKA,OAAO;MACrBC,YAAY,EAAEH,OAAO,CAACG;KACtB,CAAC;IACF;IACA,MAAKC,aAAa,CAAC,MAAKH,OAAO,CAAC;IAChC,MAAKI,IAAI,CAACC,OAAO,CAAC,MAAKL,OAAO,CAACM,GAAG,CAAC;IACnC,MAAKF,IAAI,CAACG,GAAG,GAAG,CAAC,CAAC;IAClB,MAAKH,IAAI,CAACI,GAAG,GAAG,CAAC;IAAC;EACnB;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACR,OAAO,CAACS,OAAO,EAAE;MACtB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAChB,SAAS,CAACE,WAAW,EAAE,EAAE;QAC7CK,YAAY,EAAE;OACd,CAAC;IACH;EAAC;EAAA;AAAA,EAlC8BP,SAA4B","names":["Panner","optionsFromArguments","LFOEffect","AutoPanner","getDefaults","arguments","options","_panner","context","channelCount","connectEffect","_lfo","connect","pan","min","max","dispose","Object","assign"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\AutoPanner.ts"],"sourcesContent":["import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport interface AutoPannerOptions extends LFOEffectOptions {\n\tchannelCount: number;\n}\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\n\treadonly name: string = \"AutoPanner\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis._panner = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tstatic getDefaults(): AutoPannerOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tchannelCount: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}