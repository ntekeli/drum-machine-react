{"ast":null,"code":"import _classCallCheck from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Ntekeli/Desktop/drum-machine/drum-machine/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport var MidSideEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(MidSideEffect, _Effect);\n  var _super = _createSuper(MidSideEffect);\n  function MidSideEffect(options) {\n    var _this;\n    _classCallCheck(this, MidSideEffect);\n    _this = _super.call(this, options);\n    _this.name = \"MidSideEffect\";\n    _this._midSideMerge = new MidSideMerge({\n      context: _this.context\n    });\n    _this._midSideSplit = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSend = _this._midSideSplit.mid;\n    _this._sideSend = _this._midSideSplit.side;\n    _this._midReturn = _this._midSideMerge.mid;\n    _this._sideReturn = _this._midSideMerge.side;\n    // the connections\n    _this.effectSend.connect(_this._midSideSplit);\n    _this._midSideMerge.connect(_this.effectReturn);\n    return _this;\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n  _createClass(MidSideEffect, [{\n    key: \"connectEffectMid\",\n    value: function connectEffectMid() {\n      var _this$_midSend;\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n      (_this$_midSend = this._midSend).chain.apply(_this$_midSend, nodes.concat([this._midReturn]));\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n  }, {\n    key: \"connectEffectSide\",\n    value: function connectEffectSide() {\n      var _this$_sideSend;\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n      (_this$_sideSend = this._sideSend).chain.apply(_this$_sideSend, nodes.concat([this._sideReturn]));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideEffect.prototype), \"dispose\", this).call(this);\n      this._midSideSplit.dispose();\n      this._midSideMerge.dispose();\n      this._midSend.dispose();\n      this._sideSend.dispose();\n      this._midReturn.dispose();\n      this._sideReturn.dispose();\n      return this;\n    }\n  }]);\n  return MidSideEffect;\n}(Effect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAM,QAAuB,UAAU;AAChD,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,YAAY,QAAQ,mCAAmC;AAKhE;;;;;;;;;;AAUA,WAAsBC,aAAoD;EAAA;EAAA;EAkCzE,uBAAYC,OAA6B;IAAA;IAAA;IAExC,0BAAMA,OAAO;IAlCL,UAAI,GAAW,eAAe;IAoCtC,MAAKC,aAAa,GAAG,IAAIH,YAAY,CAAC;MAAEI,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAChE,MAAKC,aAAa,GAAG,IAAIN,YAAY,CAAC;MAAEK,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAChE,MAAKE,QAAQ,GAAG,MAAKD,aAAa,CAACE,GAAG;IACtC,MAAKC,SAAS,GAAG,MAAKH,aAAa,CAACI,IAAI;IACxC,MAAKC,UAAU,GAAG,MAAKP,aAAa,CAACI,GAAG;IACxC,MAAKI,WAAW,GAAG,MAAKR,aAAa,CAACM,IAAI;IAE1C;IACA,MAAKG,UAAU,CAACC,OAAO,CAAC,MAAKR,aAAa,CAAC;IAC3C,MAAKF,aAAa,CAACU,OAAO,CAAC,MAAKC,YAAY,CAAC;IAAC;EAC/C;EAEA;;;EAAA;IAAA;IAAA,OAGU,4BAAuC;MAAA;MAAA,kCAAnBC,KAAmB;QAAnBA,KAAmB;MAAA;MAChD,sBAAI,CAACT,QAAQ,EAACU,KAAK,uBAAID,KAAK,SAAE,IAAI,CAACL,UAAU,GAAC;IAC/C;IAEA;;;EAAA;IAAA;IAAA,OAGU,6BAAwC;MAAA;MAAA,mCAAnBK,KAAmB;QAAnBA,KAAmB;MAAA;MACjD,uBAAI,CAACP,SAAS,EAACQ,KAAK,wBAAID,KAAK,SAAE,IAAI,CAACJ,WAAW,GAAC;IACjD;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACN,aAAa,CAACY,OAAO,EAAE;MAC5B,IAAI,CAACd,aAAa,CAACc,OAAO,EAAE;MAC5B,IAAI,CAACX,QAAQ,CAACW,OAAO,EAAE;MACvB,IAAI,CAACT,SAAS,CAACS,OAAO,EAAE;MACxB,IAAI,CAACP,UAAU,CAACO,OAAO,EAAE;MACzB,IAAI,CAACN,WAAW,CAACM,OAAO,EAAE;MAC1B,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EAzEgFnB,MAAe","names":["Effect","MidSideSplit","MidSideMerge","MidSideEffect","options","_midSideMerge","context","_midSideSplit","_midSend","mid","_sideSend","side","_midReturn","_sideReturn","effectSend","connect","effectReturn","nodes","chain","dispose"],"sources":["C:\\Users\\Ntekeli\\Desktop\\drum-machine\\drum-machine\\node_modules\\tone\\Tone\\effect\\MidSideEffect.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}